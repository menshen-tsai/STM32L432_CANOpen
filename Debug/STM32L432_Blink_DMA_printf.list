
STM32L432_Blink_DMA_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d1c  08006d1c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  20000068  08006d8c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  08006d8c  00020d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017efb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035dd  00000000  00000000  00037fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb3  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b7a  00000000  00000000  0003d9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ac2  00000000  00000000  00061545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d54cf  00000000  00000000  0007a007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d84  00000000  00000000  0014f4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015525c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c3c 	.word	0x08006c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006c3c 	.word	0x08006c3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <dma_printf_init+0x30>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <dma_printf_init+0x30>)
 800057e:	f000 f87d 	bl	800067c <dma_ring_init>
    dmi.sending = false;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <dma_printf_init+0x30>)
 8000584:	2200      	movs	r2, #0
 8000586:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <dma_printf_init+0x30>)
 800058c:	2200      	movs	r2, #0
 800058e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000084 	.word	0x20000084

080005a0 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <dma_printf_putc+0x60>)
 80005b0:	f000 f8ae 	bl	8000710 <dma_ring_putc>
    if(!dmi.sending){
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <dma_printf_putc+0x60>)
 80005b6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d11b      	bne.n	80005f6 <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <dma_printf_putc+0x60>)
 80005c0:	f000 f902 	bl	80007c8 <dma_ring_available_linear>
 80005c4:	4603      	mov	r3, r0
 80005c6:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 80005c8:	89fb      	ldrh	r3, [r7, #14]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <dma_printf_putc+0x60>)
 80005cc:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <dma_printf_putc+0x60>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <dma_printf_putc+0x60>)
 80005da:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <dma_printf_putc+0x60>)
 80005e0:	f000 f915 	bl	800080e <dma_ring_get_r_ptr>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <dma_printf_putc+0x60>)
 80005ea:	4413      	add	r3, r2
 80005ec:	89fa      	ldrh	r2, [r7, #14]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4620      	mov	r0, r4
 80005f2:	f004 f803 	bl	80045fc <HAL_UART_Transmit_DMA>
    }
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084

08000604 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <dma_printf_send_it+0x74>)
 800060e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	d12b      	bne.n	8000670 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <dma_printf_send_it+0x74>)
 800061a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800061e:	4619      	mov	r1, r3
 8000620:	4815      	ldr	r0, [pc, #84]	; (8000678 <dma_printf_send_it+0x74>)
 8000622:	f000 f901 	bl	8000828 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8000626:	4814      	ldr	r0, [pc, #80]	; (8000678 <dma_printf_send_it+0x74>)
 8000628:	f000 f8ce 	bl	80007c8 <dma_ring_available_linear>
 800062c:	4603      	mov	r3, r0
 800062e:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8000630:	89fb      	ldrh	r3, [r7, #14]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d017      	beq.n	8000666 <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <dma_printf_send_it+0x74>)
 800063a:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <dma_printf_send_it+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <dma_printf_send_it+0x74>)
 8000648:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <dma_printf_send_it+0x74>)
 800064e:	f000 f8de 	bl	800080e <dma_ring_get_r_ptr>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <dma_printf_send_it+0x74>)
 8000658:	4413      	add	r3, r2
 800065a:	89fa      	ldrh	r2, [r7, #14]
 800065c:	4619      	mov	r1, r3
 800065e:	4620      	mov	r0, r4
 8000660:	f003 ffcc 	bl	80045fc <HAL_UART_Transmit_DMA>
 8000664:	e005      	b.n	8000672 <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <dma_printf_send_it+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800066e:	e000      	b.n	8000672 <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8000670:	bf00      	nop
    }
}
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	20000084 	.word	0x20000084

0800067c <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"

void dma_ring_init(struct dma_ring_buf *ring){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800068a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <dma_ring_getc>:

int dma_ring_getc(struct dma_ring_buf *ring, uint8_t *c){
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
  if(ring->r_ptr == ring->w_ptr) return RING_FAIL;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d101      	bne.n	80006d0 <dma_ring_getc+0x1e>
 80006cc:	2301      	movs	r3, #1
 80006ce:	e019      	b.n	8000704 <dma_ring_getc+0x52>
  uint16_t next_ptr = ring->r_ptr+1;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80006d6:	3301      	adds	r3, #1
 80006d8:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80006e0:	89fa      	ldrh	r2, [r7, #14]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d301      	bcc.n	80006ea <dma_ring_getc+0x38>
 80006e6:	2300      	movs	r3, #0
 80006e8:	81fb      	strh	r3, [r7, #14]

  *c = ring->buf[ring->r_ptr];
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	5c9a      	ldrb	r2, [r3, r2]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	701a      	strb	r2, [r3, #0]
  ring->r_ptr = next_ptr;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	89fa      	ldrh	r2, [r7, #14]
 80006fe:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  return RING_SUCCESS;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <dma_ring_putc>:

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000722:	3301      	adds	r3, #1
 8000724:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800072c:	89fa      	ldrh	r2, [r7, #14]
 800072e:	429a      	cmp	r2, r3
 8000730:	d301      	bcc.n	8000736 <dma_ring_putc+0x26>
 8000732:	2300      	movs	r3, #0
 8000734:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800073c:	89fa      	ldrh	r2, [r7, #14]
 800073e:	429a      	cmp	r2, r3
 8000740:	d109      	bne.n	8000756 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000748:	3301      	adds	r3, #1
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8000752:	2301      	movs	r3, #1
 8000754:	e00b      	b.n	800076e <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	89fa      	ldrh	r2, [r7, #14]
 8000768:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <dma_ring_available>:

int dma_ring_available(struct dma_ring_buf *ring){
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800078e:	429a      	cmp	r2, r3
 8000790:	d308      	bcc.n	80007a4 <dma_ring_available+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	e00b      	b.n	80007bc <dma_ring_available+0x42>
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80007b2:	4413      	add	r3, r2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
 80007ba:	1a9b      	subs	r3, r3, r2
  }
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <dma_ring_available_linear>:
int dma_ring_available_linear(struct dma_ring_buf *ring){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80007dc:	429a      	cmp	r2, r3
 80007de:	d308      	bcc.n	80007f2 <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	e007      	b.n	8000802 <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000800:	1ad3      	subs	r3, r2, r3
  }
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  while(len > 0){
 8000832:	e018      	b.n	8000866 <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800083a:	3301      	adds	r3, #1
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8000842:	4293      	cmp	r3, r2
 8000844:	db04      	blt.n	8000850 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800084e:	e007      	b.n	8000860 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000856:	3301      	adds	r3, #1
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	603b      	str	r3, [r7, #0]
  while(len > 0){
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dce3      	bgt.n	8000834 <dma_ring_forward_r_ptr+0xc>
  }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <dma_ring_set_w_ptr>:

void dma_ring_set_w_ptr(struct dma_ring_buf *ring, uint16_t w_ptr){
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	807b      	strh	r3, [r7, #2]
    ring->w_ptr = w_ptr;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	887a      	ldrh	r2, [r7, #2]
 800088a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    dsi.huart = scanf_huart;
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <dma_scanf_init+0x34>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    dma_ring_init(&dsi.rx_ring);
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <dma_scanf_init+0x34>)
 80008ae:	f7ff fee5 	bl	800067c <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <dma_scanf_init+0x34>)
 80008b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <dma_scanf_init+0x34>)
 80008ba:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 80008be:	4904      	ldr	r1, [pc, #16]	; (80008d0 <dma_scanf_init+0x34>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 ff17 	bl	80046f4 <HAL_UART_Receive_DMA>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000498 	.word	0x20000498

080008d4 <dma_scanf_getc_blocking>:

int dma_scanf_getc_blocking(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
    while(dma_ring_available(&dsi.rx_ring) == 0){
 80008da:	e00f      	b.n	80008fc <dma_scanf_getc_blocking+0x28>
        dma_ring_set_w_ptr(&dsi.rx_ring, (uint16_t)((dsi.rx_ring.buf_size - dsi.huart->hdmarx->Instance->CNDTR)&0xFFFF));
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <dma_scanf_getc_blocking+0x48>)
 80008de:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <dma_scanf_getc_blocking+0x48>)
 80008e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80008e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <dma_scanf_getc_blocking+0x48>)
 80008f8:	f7ff ffbf 	bl	800087a <dma_ring_set_w_ptr>
    while(dma_ring_available(&dsi.rx_ring) == 0){
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <dma_scanf_getc_blocking+0x48>)
 80008fe:	f7ff ff3c 	bl	800077a <dma_ring_available>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0e9      	beq.n	80008dc <dma_scanf_getc_blocking+0x8>
    }
    char c;
    dma_ring_getc(&dsi.rx_ring, &c);
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	4619      	mov	r1, r3
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <dma_scanf_getc_blocking+0x48>)
 800090e:	f7ff fed0 	bl	80006b2 <dma_ring_getc>
    return c;
 8000912:	79fb      	ldrb	r3, [r7, #7]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000498 	.word	0x20000498

08000920 <log_info>:
//
#include "main.h"
#include "log.h"
#include <stdarg.h>
#include <stdio.h>
void log_info(const char *msg, ...){
 8000920:	b40f      	push	{r0, r1, r2, r3}
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
    fprintf(stdout, "[INFO]:");
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <log_info+0x4c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2207      	movs	r2, #7
 8000930:	2101      	movs	r1, #1
 8000932:	480f      	ldr	r0, [pc, #60]	; (8000970 <log_info+0x50>)
 8000934:	f005 fce4 	bl	8006300 <fwrite>
    va_list ap;
    va_start(ap, msg);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	607b      	str	r3, [r7, #4]
    vfprintf(stdout, msg, ap);
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <log_info+0x4c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	6939      	ldr	r1, [r7, #16]
 8000948:	4618      	mov	r0, r3
 800094a:	f005 fa17 	bl	8005d7c <vfiprintf>
    va_end(ap);
    fputc('\n', stdout);
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <log_info+0x4c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4619      	mov	r1, r3
 8000956:	200a      	movs	r0, #10
 8000958:	f005 fc60 	bl	800621c <fputc>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000966:	b004      	add	sp, #16
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000064 	.word	0x20000064
 8000970:	08006c54 	.word	0x08006c54

08000974 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	static uint32_t c;
	if(htim->Instance == htim7.Instance) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d112      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_IWDG_Refresh(&hiwdg);
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800098a:	f001 ffa0 	bl	80028ce <HAL_IWDG_Refresh>
		c++;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000996:	6013      	str	r3, [r2, #0]
		if (c >= 50) {
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b31      	cmp	r3, #49	; 0x31
 800099e:	d906      	bls.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x3a>
			c = 0;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009a6:	2108      	movs	r1, #8
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009aa:	f001 ff27 	bl	80027fc <HAL_GPIO_TogglePin>
		}
	}
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000900 	.word	0x20000900
 80009bc:	200008cc 	.word	0x200008cc
 80009c0:	20000bec 	.word	0x20000bec
 80009c4:	48000400 	.word	0x48000400

080009c8 <__io_putchar>:

int __io_putchar(int ch)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  dma_printf_putc(ch&0xFF);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fde3 	bl	80005a0 <dma_printf_putc>
  return ch;
 80009da:	687b      	ldr	r3, [r7, #4]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <__io_getchar>:

int __io_getchar(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  return dma_scanf_getc_blocking();
 80009e8:	f7ff ff74 	bl	80008d4 <dma_scanf_getc_blocking>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]

}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  dma_printf_send_it(huart);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fdf8 	bl	8000604 <dma_printf_send_it>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fe14 	bl	800164e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f855 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f000 f9fb 	bl	8000e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a2e:	f000 f9c3 	bl	8000db8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a32:	f000 f991 	bl	8000d58 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000a36:	f000 f8ad 	bl	8000b94 <MX_CAN1_Init>
  MX_IWDG_Init();
 8000a3a:	f000 f8e1 	bl	8000c00 <MX_IWDG_Init>
  MX_RTC_Init();
 8000a3e:	f000 f8fd 	bl	8000c3c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000a42:	f000 f959 	bl	8000cf8 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8000a46:	f000 f921 	bl	8000c8c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000a4a:	481c      	ldr	r0, [pc, #112]	; (8000abc <main+0xa0>)
 8000a4c:	f003 fa66 	bl	8003f1c <HAL_TIM_Base_Start_IT>

  setbuf(stdin, NULL);
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <main+0xa4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 fca5 	bl	80063a8 <setbuf>
  setbuf(stdout, NULL);
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <main+0xa4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 fc9e 	bl	80063a8 <setbuf>
  setbuf(stderr, NULL);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <main+0xa4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f005 fc97 	bl	80063a8 <setbuf>
  dma_printf_init(&huart2);
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <main+0xa8>)
 8000a7c:	f7ff fd76 	bl	800056c <dma_printf_init>
  dma_scanf_init(&huart2);
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <main+0xa8>)
 8000a82:	f7ff ff0b 	bl	800089c <dma_scanf_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int cnt = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  while (1)
  {
//    char tmp[100];
//	    scanf("%s",tmp);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <main+0xac>)
 8000a90:	f001 fe9c 	bl	80027cc <HAL_GPIO_WritePin>
	log_info("RESULT:%d\r", cnt++);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <main+0xb0>)
 8000a9e:	f7ff ff3f 	bl	8000920 <log_info>
	printf("RESULT:\t%d\r\n", cnt);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <main+0xb4>)
 8000aa6:	f005 fc39 	bl	800631c <iprintf>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2110      	movs	r1, #16
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <main+0xac>)
 8000ab0:	f001 fe8c 	bl	80027cc <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f000 fe3f 	bl	8001738 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000aba:	e7e6      	b.n	8000a8a <main+0x6e>
 8000abc:	20000900 	.word	0x20000900
 8000ac0:	20000064 	.word	0x20000064
 8000ac4:	20000a44 	.word	0x20000a44
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	08006c7c 	.word	0x08006c7c
 8000ad0:	08006c88 	.word	0x08006c88

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b096      	sub	sp, #88	; 0x58
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2244      	movs	r2, #68	; 0x44
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 fdee 	bl	80066c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000af6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000afa:	f001 ff17 	bl	800292c <HAL_PWREx_ControlVoltageScaling>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b04:	f000 f9d8 	bl	8000eb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b08:	f001 fef2 	bl	80028f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <SystemClock_Config+0xbc>)
 8000b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemClock_Config+0xbc>)
 8000b14:	f023 0318 	bic.w	r3, r3, #24
 8000b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000b1c:	230d      	movs	r3, #13
 8000b1e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	2303      	movs	r3, #3
 8000b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff42 	bl	80029d8 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b5a:	f000 f9ad 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2303      	movs	r3, #3
 8000b64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	2104      	movs	r1, #4
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fb42 	bl	8003200 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b82:	f000 f999 	bl	8000eb8 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3758      	adds	r7, #88	; 0x58
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_CAN1_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000ba0:	2228      	movs	r2, #40	; 0x28
 8000ba2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bb2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bb6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bbe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_CAN1_Init+0x64>)
 8000be6:	f000 fdcb 	bl	8001780 <HAL_CAN_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 f962 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200008a4 	.word	0x200008a4
 8000bfc:	40006400 	.word	0x40006400

08000c00 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_IWDG_Init+0x34>)
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <MX_IWDG_Init+0x38>)
 8000c08:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_IWDG_Init+0x34>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_IWDG_Init+0x34>)
 8000c12:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c16:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_IWDG_Init+0x34>)
 8000c1a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c1e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_IWDG_Init+0x34>)
 8000c22:	f001 fe05 	bl	8002830 <HAL_IWDG_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000c2c:	f000 f944 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200008cc 	.word	0x200008cc
 8000c38:	40003000 	.word	0x40003000

08000c3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <MX_RTC_Init+0x4c>)
 8000c44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c4e:	227f      	movs	r2, #127	; 0x7f
 8000c50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_RTC_Init+0x48>)
 8000c72:	f002 ffd1 	bl	8003c18 <HAL_RTC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c7c:	f000 f91c 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200008dc 	.word	0x200008dc
 8000c88:	40002800 	.word	0x40002800

08000c8c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <MX_TIM7_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000ca4:	224f      	movs	r2, #79	; 0x4f
 8000ca6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000cbe:	f003 f8c9 	bl	8003e54 <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000cc8:	f000 f8f6 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_TIM7_Init+0x64>)
 8000cda:	f003 fbb3 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ce4:	f000 f8e8 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000900 	.word	0x20000900
 8000cf4:	40001400 	.word	0x40001400

08000cf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <MX_USART1_UART_Init+0x5c>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART1_UART_Init+0x58>)
 8000d3c:	f003 fc10 	bl	8004560 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d46:	f000 f8b7 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200009bc 	.word	0x200009bc
 8000d54:	40013800 	.word	0x40013800

08000d58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_USART2_UART_Init+0x5c>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	f003 fbe0 	bl	8004560 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000da6:	f000 f887 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000a44 	.word	0x20000a44
 8000db4:	40004400 	.word	0x40004400

08000db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_DMA_Init+0x68>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc2:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <MX_DMA_Init+0x68>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6493      	str	r3, [r2, #72]	; 0x48
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_DMA_Init+0x68>)
 8000dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f001 f8df 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000de0:	200e      	movs	r0, #14
 8000de2:	f001 f8f8 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	200f      	movs	r0, #15
 8000dec:	f001 f8d7 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f001 f8f0 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2010      	movs	r0, #16
 8000dfc:	f001 f8cf 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e00:	2010      	movs	r0, #16
 8000e02:	f001 f8e8 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2011      	movs	r0, #17
 8000e0c:	f001 f8c7 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e10:	2011      	movs	r0, #17
 8000e12:	f001 f8e0 	bl	8001fd6 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2138      	movs	r1, #56	; 0x38
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0x90>)
 8000e88:	f001 fca0 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000e8c:	2338      	movs	r3, #56	; 0x38
 8000e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_GPIO_Init+0x90>)
 8000ea4:	f001 fb28 	bl	80024f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_CAN_MspInit+0xc0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d149      	bne.n	8000fc2 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <HAL_CAN_MspInit+0xc4>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_CAN_MspInit+0xc4>)
 8000f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_CAN_MspInit+0xc4>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <HAL_CAN_MspInit+0xc4>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_CAN_MspInit+0xc4>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_CAN_MspInit+0xc4>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f70:	2309      	movs	r3, #9
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 fabb 	bl	80024f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2013      	movs	r0, #19
 8000f88:	f001 f809 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f8c:	2013      	movs	r0, #19
 8000f8e:	f001 f822 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2014      	movs	r0, #20
 8000f98:	f001 f801 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f9c:	2014      	movs	r0, #20
 8000f9e:	f001 f81a 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2015      	movs	r0, #21
 8000fa8:	f000 fff9 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fac:	2015      	movs	r0, #21
 8000fae:	f001 f812 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2016      	movs	r0, #22
 8000fb8:	f000 fff1 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000fbc:	2016      	movs	r0, #22
 8000fbe:	f001 f80a 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40006400 	.word	0x40006400
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b098      	sub	sp, #96	; 0x60
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2254      	movs	r2, #84	; 0x54
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f005 fb6d 	bl	80066c4 <memset>
  if(hrtc->Instance==RTC)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_RTC_MspInit+0x58>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d117      	bne.n	8001024 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fb1f 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001010:	f7ff ff52 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_RTC_MspInit+0x5c>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <HAL_RTC_MspInit+0x5c>)
 800101c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3760      	adds	r7, #96	; 0x60
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40002800 	.word	0x40002800
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_TIM_Base_MspInit+0x44>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d113      	bne.n	800106e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_TIM_Base_MspInit+0x48>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2037      	movs	r0, #55	; 0x37
 8001064:	f000 ff9b 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001068:	2037      	movs	r0, #55	; 0x37
 800106a:	f000 ffb4 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001400 	.word	0x40001400
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0a0      	sub	sp, #128	; 0x80
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2254      	movs	r2, #84	; 0x54
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 fb0f 	bl	80066c4 <memset>
  if(huart->Instance==USART1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4aa2      	ldr	r2, [pc, #648]	; (8001334 <HAL_UART_MspInit+0x2b4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f040 8093 	bne.w	80011d8 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fac2 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ca:	f7ff fef5 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	4b9a      	ldr	r3, [pc, #616]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	4a99      	ldr	r2, [pc, #612]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6613      	str	r3, [r2, #96]	; 0x60
 80010da:	4b97      	ldr	r3, [pc, #604]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b94      	ldr	r3, [pc, #592]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a93      	ldr	r2, [pc, #588]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b91      	ldr	r3, [pc, #580]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001102:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001110:	2307      	movs	r3, #7
 8001112:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f001 f9eb 	bl	80024f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001122:	4b86      	ldr	r3, [pc, #536]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001124:	4a86      	ldr	r2, [pc, #536]	; (8001340 <HAL_UART_MspInit+0x2c0>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001128:	4b84      	ldr	r3, [pc, #528]	; (800133c <HAL_UART_MspInit+0x2bc>)
 800112a:	2202      	movs	r2, #2
 800112c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b83      	ldr	r3, [pc, #524]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b81      	ldr	r3, [pc, #516]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b80      	ldr	r3, [pc, #512]	; (800133c <HAL_UART_MspInit+0x2bc>)
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001140:	4b7e      	ldr	r3, [pc, #504]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001146:	4b7d      	ldr	r3, [pc, #500]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800114c:	4b7b      	ldr	r3, [pc, #492]	; (800133c <HAL_UART_MspInit+0x2bc>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b7a      	ldr	r3, [pc, #488]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001158:	4878      	ldr	r0, [pc, #480]	; (800133c <HAL_UART_MspInit+0x2bc>)
 800115a:	f000 ff57 	bl	800200c <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001164:	f7ff fea8 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a74      	ldr	r2, [pc, #464]	; (800133c <HAL_UART_MspInit+0x2bc>)
 800116c:	675a      	str	r2, [r3, #116]	; 0x74
 800116e:	4a73      	ldr	r2, [pc, #460]	; (800133c <HAL_UART_MspInit+0x2bc>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001174:	4b73      	ldr	r3, [pc, #460]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 8001176:	4a74      	ldr	r2, [pc, #464]	; (8001348 <HAL_UART_MspInit+0x2c8>)
 8001178:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800117a:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 800117c:	2202      	movs	r2, #2
 800117e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001180:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 8001182:	2210      	movs	r2, #16
 8001184:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001186:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001192:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001198:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011aa:	4866      	ldr	r0, [pc, #408]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 80011ac:	f000 ff2e 	bl	800200c <HAL_DMA_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80011b6:	f7ff fe7f 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a61      	ldr	r2, [pc, #388]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 80011be:	671a      	str	r2, [r3, #112]	; 0x70
 80011c0:	4a60      	ldr	r2, [pc, #384]	; (8001344 <HAL_UART_MspInit+0x2c4>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2025      	movs	r0, #37	; 0x25
 80011cc:	f000 fee7 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011d0:	2025      	movs	r0, #37	; 0x25
 80011d2:	f000 ff00 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d6:	e0a8      	b.n	800132a <HAL_UART_MspInit+0x2aa>
  else if(huart->Instance==USART2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a5b      	ldr	r2, [pc, #364]	; (800134c <HAL_UART_MspInit+0x2cc>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 80a3 	bne.w	800132a <HAL_UART_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fa29 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80011fc:	f7ff fe5c 	bl	8000eb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120a:	6593      	str	r3, [r2, #88]	; 0x58
 800120c:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b47      	ldr	r3, [pc, #284]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	4a46      	ldr	r2, [pc, #280]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001224:	4b44      	ldr	r3, [pc, #272]	; (8001338 <HAL_UART_MspInit+0x2b8>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001230:	2304      	movs	r3, #4
 8001232:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001240:	2307      	movs	r3, #7
 8001242:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f001 f953 	bl	80024f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001256:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001264:	2303      	movs	r3, #3
 8001266:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 f941 	bl	80024f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 8001278:	4a36      	ldr	r2, [pc, #216]	; (8001354 <HAL_UART_MspInit+0x2d4>)
 800127a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 800127e:	2202      	movs	r2, #2
 8001280:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012ac:	4828      	ldr	r0, [pc, #160]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 80012ae:	f000 fead 	bl	800200c <HAL_DMA_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_UART_MspInit+0x23c>
      Error_Handler();
 80012b8:	f7ff fdfe 	bl	8000eb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a24      	ldr	r2, [pc, #144]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 80012c0:	675a      	str	r2, [r3, #116]	; 0x74
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <HAL_UART_MspInit+0x2d0>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <HAL_UART_MspInit+0x2dc>)
 80012cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012fe:	4816      	ldr	r0, [pc, #88]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 8001300:	f000 fe84 	bl	800200c <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_UART_MspInit+0x28e>
      Error_Handler();
 800130a:	f7ff fdd5 	bl	8000eb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 8001312:	671a      	str	r2, [r3, #112]	; 0x70
 8001314:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_UART_MspInit+0x2d8>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2026      	movs	r0, #38	; 0x26
 8001320:	f000 fe3d 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001324:	2026      	movs	r0, #38	; 0x26
 8001326:	f000 fe56 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3780      	adds	r7, #128	; 0x80
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40013800 	.word	0x40013800
 8001338:	40021000 	.word	0x40021000
 800133c:	20000acc 	.word	0x20000acc
 8001340:	40020058 	.word	0x40020058
 8001344:	20000b14 	.word	0x20000b14
 8001348:	40020044 	.word	0x40020044
 800134c:	40004400 	.word	0x40004400
 8001350:	20000b5c 	.word	0x20000b5c
 8001354:	4002006c 	.word	0x4002006c
 8001358:	20000ba4 	.word	0x20000ba4
 800135c:	40020080 	.word	0x40020080

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f9a4 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <DMA1_Channel4_IRQHandler+0x10>)
 80013ba:	f000 ffbe 	bl	800233a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000b14 	.word	0x20000b14

080013c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA1_Channel5_IRQHandler+0x10>)
 80013ce:	f000 ffb4 	bl	800233a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000acc 	.word	0x20000acc

080013dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <DMA1_Channel6_IRQHandler+0x10>)
 80013e2:	f000 ffaa 	bl	800233a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000b5c 	.word	0x20000b5c

080013f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <DMA1_Channel7_IRQHandler+0x10>)
 80013f6:	f000 ffa0 	bl	800233a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000ba4 	.word	0x20000ba4

08001404 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <CAN1_TX_IRQHandler+0x10>)
 800140a:	f000 fab4 	bl	8001976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200008a4 	.word	0x200008a4

08001418 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <CAN1_RX0_IRQHandler+0x10>)
 800141e:	f000 faaa 	bl	8001976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200008a4 	.word	0x200008a4

0800142c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <CAN1_RX1_IRQHandler+0x10>)
 8001432:	f000 faa0 	bl	8001976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200008a4 	.word	0x200008a4

08001440 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <CAN1_SCE_IRQHandler+0x10>)
 8001446:	f000 fa96 	bl	8001976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200008a4 	.word	0x200008a4

08001454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USART1_IRQHandler+0x10>)
 800145a:	f003 f997 	bl	800478c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200009bc 	.word	0x200009bc

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART2_IRQHandler+0x10>)
 800146e:	f003 f98d 	bl	800478c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000a44 	.word	0x20000a44

0800147c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM7_IRQHandler+0x10>)
 8001482:	f002 fd9f 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000900 	.word	0x20000900

08001490 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a2:	f7ff fa9f 	bl	80009e4 <__io_getchar>
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
  }

  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fa6f 	bl	80009c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
  }
  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152a:	605a      	str	r2, [r3, #4]
  return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_isatty>:

int _isatty(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f005 f8e0 	bl	8006760 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20010000 	.word	0x20010000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	20000bf0 	.word	0x20000bf0
 80015d4:	20000d48 	.word	0x20000d48

080015d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001600:	f7ff ffea 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f005 f89f 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162e:	f7ff f9f5 	bl	8000a1c <main>

08001632 <LoopForever>:

LoopForever:
    b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001640:	08006d24 	.word	0x08006d24
  ldr r2, =_sbss
 8001644:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001648:	20000d44 	.word	0x20000d44

0800164c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_IRQHandler>

0800164e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 fc95 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f80e 	bl	8001680 <HAL_InitTick>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	e001      	b.n	8001674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001670:	f7ff fc28 	bl	8000ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001674:	79fb      	ldrb	r3, [r7, #7]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_InitTick+0x6c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_InitTick+0x70>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_InitTick+0x6c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fca1 	bl	8001ff2 <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d809      	bhi.n	80016d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 fc6b 	bl	8001f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_InitTick+0x74>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e004      	b.n	80016e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e001      	b.n	80016e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20000bf4 	.word	0x20000bf4

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000bf4 	.word	0x20000bf4

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ed      	b.n	800196e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fbb4 	bl	8000f0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff ffb4 	bl	8001720 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ba:	e012      	b.n	80017e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017bc:	f7ff ffb0 	bl	8001720 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b0a      	cmp	r3, #10
 80017c8:	d90b      	bls.n	80017e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2205      	movs	r2, #5
 80017da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0c5      	b.n	800196e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0e5      	beq.n	80017bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0202 	bic.w	r2, r2, #2
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001800:	f7ff ff8e 	bl	8001720 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001806:	e012      	b.n	800182e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001808:	f7ff ff8a 	bl	8001720 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d90b      	bls.n	800182e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e09f      	b.n	800196e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e5      	bne.n	8001808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e007      	b.n	8001866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7e5b      	ldrb	r3, [r3, #25]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e9b      	ldrb	r3, [r3, #26]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0220 	orr.w	r2, r2, #32
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0220 	bic.w	r2, r2, #32
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7edb      	ldrb	r3, [r3, #27]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0210 	bic.w	r2, r2, #16
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0210 	orr.w	r2, r2, #16
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7f1b      	ldrb	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0208 	orr.w	r2, r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0208 	bic.w	r2, r2, #8
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7f5b      	ldrb	r3, [r3, #29]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e007      	b.n	8001938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	ea42 0103 	orr.w	r1, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b08a      	sub	sp, #40	; 0x28
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d07c      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f983 	bl	8001ce4 <HAL_CAN_TxMailbox0CompleteCallback>
 80019de:	e016      	b.n	8001a0e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	e00c      	b.n	8001a0e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	e002      	b.n	8001a0e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f989 	bl	8001d20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d024      	beq.n	8001a62 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f963 	bl	8001cf8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a32:	e016      	b.n	8001a62 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	e00c      	b.n	8001a62 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	e002      	b.n	8001a62 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f969 	bl	8001d34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d024      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f943 	bl	8001d0c <HAL_CAN_TxMailbox2CompleteCallback>
 8001a86:	e016      	b.n	8001ab6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	e00c      	b.n	8001ab6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	e002      	b.n	8001ab6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f949 	bl	8001d48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2208      	movs	r2, #8
 8001af4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f93a 	bl	8001d70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f921 	bl	8001d5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00c      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2208      	movs	r2, #8
 8001b58:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f91c 	bl	8001d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f903 	bl	8001d84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2210      	movs	r2, #16
 8001b98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f906 	bl	8001dac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8ff 	bl	8001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d07b      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d072      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d043      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d03e      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c44:	2b60      	cmp	r3, #96	; 0x60
 8001c46:	d02b      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x32a>
 8001c48:	2b60      	cmp	r3, #96	; 0x60
 8001c4a:	d82e      	bhi.n	8001caa <HAL_CAN_IRQHandler+0x334>
 8001c4c:	2b50      	cmp	r3, #80	; 0x50
 8001c4e:	d022      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x320>
 8001c50:	2b50      	cmp	r3, #80	; 0x50
 8001c52:	d82a      	bhi.n	8001caa <HAL_CAN_IRQHandler+0x334>
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d019      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x316>
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	d826      	bhi.n	8001caa <HAL_CAN_IRQHandler+0x334>
 8001c5c:	2b30      	cmp	r3, #48	; 0x30
 8001c5e:	d010      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x30c>
 8001c60:	2b30      	cmp	r3, #48	; 0x30
 8001c62:	d822      	bhi.n	8001caa <HAL_CAN_IRQHandler+0x334>
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d002      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x2f8>
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d005      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c6c:	e01d      	b.n	8001caa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c76:	e019      	b.n	8001cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c80:	e014      	b.n	8001cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f043 0320 	orr.w	r3, r3, #32
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8a:	e00f      	b.n	8001cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c94:	e00a      	b.n	8001cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c9e:	e005      	b.n	8001cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca8:	e000      	b.n	8001cac <HAL_CAN_IRQHandler+0x336>
            break;
 8001caa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f87c 	bl	8001dd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff3e 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff8e 	bl	8001edc <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5d 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff31 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffa2 	bl	8001f44 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e098      	b.n	8002150 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_DMA_Init+0x150>)
 8002026:	429a      	cmp	r2, r3
 8002028:	d80f      	bhi.n	800204a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_DMA_Init+0x154>)
 8002032:	4413      	add	r3, r2
 8002034:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_DMA_Init+0x158>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_DMA_Init+0x15c>)
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
 8002048:	e00e      	b.n	8002068 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b46      	ldr	r3, [pc, #280]	; (800216c <HAL_DMA_Init+0x160>)
 8002052:	4413      	add	r3, r2
 8002054:	4a43      	ldr	r2, [pc, #268]	; (8002164 <HAL_DMA_Init+0x158>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	009a      	lsls	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_DMA_Init+0x164>)
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020c2:	d039      	beq.n	8002138 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <HAL_DMA_Init+0x15c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d11a      	bne.n	8002104 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_DMA_Init+0x168>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 031c 	and.w	r3, r3, #28
 80020da:	210f      	movs	r1, #15
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4924      	ldr	r1, [pc, #144]	; (8002174 <HAL_DMA_Init+0x168>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_DMA_Init+0x168>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f003 031c 	and.w	r3, r3, #28
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	491d      	ldr	r1, [pc, #116]	; (8002174 <HAL_DMA_Init+0x168>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
 8002102:	e019      	b.n	8002138 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_DMA_Init+0x16c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f003 031c 	and.w	r3, r3, #28
 8002110:	210f      	movs	r1, #15
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	4917      	ldr	r1, [pc, #92]	; (8002178 <HAL_DMA_Init+0x16c>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_DMA_Init+0x16c>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f003 031c 	and.w	r3, r3, #28
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	4911      	ldr	r1, [pc, #68]	; (8002178 <HAL_DMA_Init+0x16c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40020407 	.word	0x40020407
 8002160:	bffdfff8 	.word	0xbffdfff8
 8002164:	cccccccd 	.word	0xcccccccd
 8002168:	40020000 	.word	0x40020000
 800216c:	bffdfbf8 	.word	0xbffdfbf8
 8002170:	40020400 	.word	0x40020400
 8002174:	400200a8 	.word	0x400200a8
 8002178:	400204a8 	.word	0x400204a8

0800217c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_DMA_Start_IT+0x20>
 8002198:	2302      	movs	r3, #2
 800219a:	e04b      	b.n	8002234 <HAL_DMA_Start_IT+0xb8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d13a      	bne.n	8002226 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f95f 	bl	8002498 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 020e 	orr.w	r2, r2, #14
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e00f      	b.n	8002214 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 020a 	orr.w	r2, r2, #10
 8002212:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e005      	b.n	8002232 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d008      	beq.n	8002266 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e022      	b.n	80022ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020e 	bic.w	r2, r2, #14
 8002274:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f003 021c 	and.w	r2, r3, #28
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d005      	beq.n	80022dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2204      	movs	r2, #4
 80022d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e029      	b.n	8002330 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 020e 	bic.w	r2, r2, #14
 80022ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f003 021c 	and.w	r2, r3, #28
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
    }
  }
  return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 031c 	and.w	r3, r3, #28
 800235a:	2204      	movs	r2, #4
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d026      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x7a>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d021      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0204 	bic.w	r2, r2, #4
 800238c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f003 021c 	and.w	r2, r3, #28
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2104      	movs	r1, #4
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d071      	beq.n	800248e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023b2:	e06c      	b.n	800248e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	f003 031c 	and.w	r3, r3, #28
 80023bc:	2202      	movs	r2, #2
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02e      	beq.n	8002426 <HAL_DMA_IRQHandler+0xec>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d029      	beq.n	8002426 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 020a 	bic.w	r2, r2, #10
 80023ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f003 021c 	and.w	r2, r3, #28
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2102      	movs	r1, #2
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d038      	beq.n	800248e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002424:	e033      	b.n	800248e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f003 031c 	and.w	r3, r3, #28
 800242e:	2208      	movs	r2, #8
 8002430:	409a      	lsls	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x156>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d025      	beq.n	8002490 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 020e 	bic.w	r2, r2, #14
 8002452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f003 021c 	and.w	r2, r3, #28
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800248e:	bf00      	nop
 8002490:	bf00      	nop
}
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f003 021c 	and.w	r2, r3, #28
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d108      	bne.n	80024dc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024da:	e007      	b.n	80024ec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002506:	e148      	b.n	800279a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 813a 	beq.w	8002794 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d005      	beq.n	8002538 <HAL_GPIO_Init+0x40>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d130      	bne.n	800259a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	2201      	movs	r2, #1
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 0201 	and.w	r2, r3, #1
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d017      	beq.n	80025d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d123      	bne.n	800262a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	6939      	ldr	r1, [r7, #16]
 8002626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0203 	and.w	r2, r3, #3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8094 	beq.w	8002794 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266c:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_GPIO_Init+0x2c0>)
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <HAL_GPIO_Init+0x2c0>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6613      	str	r3, [r2, #96]	; 0x60
 8002678:	4b4f      	ldr	r3, [pc, #316]	; (80027b8 <HAL_GPIO_Init+0x2c0>)
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002684:	4a4d      	ldr	r2, [pc, #308]	; (80027bc <HAL_GPIO_Init+0x2c4>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ae:	d00d      	beq.n	80026cc <HAL_GPIO_Init+0x1d4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a43      	ldr	r2, [pc, #268]	; (80027c0 <HAL_GPIO_Init+0x2c8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <HAL_GPIO_Init+0x1d0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_GPIO_Init+0x2cc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_GPIO_Init+0x1cc>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e004      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026c4:	2307      	movs	r3, #7
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026cc:	2300      	movs	r3, #0
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	f002 0203 	and.w	r2, r2, #3
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	4093      	lsls	r3, r2
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026de:	4937      	ldr	r1, [pc, #220]	; (80027bc <HAL_GPIO_Init+0x2c4>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273a:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f47f aeaf 	bne.w	8002508 <HAL_GPIO_Init+0x10>
  }
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010000 	.word	0x40010000
 80027c0:	48000400 	.word	0x48000400
 80027c4:	48000800 	.word	0x48000800
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4013      	ands	r3, r2
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43d9      	mvns	r1, r3
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	400b      	ands	r3, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800284a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f245 5255 	movw	r2, #21845	; 0x5555
 8002854:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6852      	ldr	r2, [r2, #4]
 800285e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800286a:	f7fe ff59 	bl	8001720 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002870:	e00f      	b.n	8002892 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002872:	f7fe ff55 	bl	8001720 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b31      	cmp	r3, #49	; 0x31
 800287e:	d908      	bls.n	8002892 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e019      	b.n	80028c6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e8      	bne.n	8002872 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d005      	beq.n	80028ba <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	e004      	b.n	80028c4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80028de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_PWREx_GetVoltageRange+0x18>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d130      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d038      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002970:	e002      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d102      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f2      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d110      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d007      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000
 80029d0:	20000000 	.word	0x20000000
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f000 bc02 	b.w	80031f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ec:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f6:	4b94      	ldr	r3, [pc, #592]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80e4 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4c>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	f040 808b 	bne.w	8002b32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	f040 8087 	bne.w	8002b32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x64>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e3d9      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_RCC_OscConfig+0x7e>
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a54:	e005      	b.n	8002a62 <HAL_RCC_OscConfig+0x8a>
 8002a56:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d223      	bcs.n	8002aae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fd8c 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e3ba      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	496d      	ldr	r1, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a98:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	4968      	ldr	r1, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e025      	b.n	8002afa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	f043 0308 	orr.w	r3, r3, #8
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4960      	ldr	r1, [pc, #384]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002acc:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	495b      	ldr	r1, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fd4c 	bl	8003588 <RCC_SetFlashLatencyFromMSIRange>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e37a      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002afa:	f000 fc81 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4950      	ldr	r1, [pc, #320]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	4a4e      	ldr	r2, [pc, #312]	; (8002c50 <HAL_RCC_OscConfig+0x278>)
 8002b18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b1a:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fdae 	bl	8001680 <HAL_InitTick>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d052      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	e35e      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d032      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b3a:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b46:	f7fe fdeb 	bl	8001720 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fde7 	bl	8001720 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e347      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4930      	ldr	r1, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	492b      	ldr	r1, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
 8002b9e:	e01a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fdb8 	bl	8001720 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fdb4 	bl	8001720 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e314      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1dc>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d073      	beq.n	8002cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x21c>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d10e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d063      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d15f      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e2f1      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x24c>
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e025      	b.n	8002c70 <HAL_RCC_OscConfig+0x298>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d114      	bne.n	8002c58 <HAL_RCC_OscConfig+0x280>
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0x298>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08006c98 	.word	0x08006c98
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004
 8002c58:	4ba0      	ldr	r3, [pc, #640]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a9f      	ldr	r2, [pc, #636]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b9d      	ldr	r3, [pc, #628]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a9c      	ldr	r2, [pc, #624]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd52 	bl	8001720 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fd4e 	bl	8001720 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e2ae      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2a8>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fd3e 	bl	8001720 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fd3a 	bl	8001720 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e29a      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2d0>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d060      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x310>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d116      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x328>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e277      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4973      	ldr	r1, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d14:	e040      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d023      	beq.n	8002d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6e      	ldr	r2, [pc, #440]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fcf9 	bl	8001720 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fe fcf5 	bl	8001720 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e255      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b65      	ldr	r3, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b62      	ldr	r3, [pc, #392]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	495f      	ldr	r1, [pc, #380]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a5c      	ldr	r2, [pc, #368]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe fcd5 	bl	8001720 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fcd1 	bl	8001720 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e231      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fcb0 	bl	8001720 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fcac 	bl	8001720 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e20c      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ef      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x3ec>
 8002de4:	e01b      	b.n	8002e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fc93 	bl	8001720 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fc8f 	bl	8001720 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1ef      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ef      	bne.n	8002dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a6 	beq.w	8002f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	; 0x58
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d118      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fc56 	bl	8001720 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe fc52 	bl	8001720 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1b2      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4d8>
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eae:	e029      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d115      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x50c>
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a03      	ldr	r2, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	4a99      	ldr	r2, [pc, #612]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef4:	4b96      	ldr	r3, [pc, #600]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	4a95      	ldr	r2, [pc, #596]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fc08 	bl	8001720 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fc04 	bl	8001720 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e162      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ed      	beq.n	8002f14 <HAL_RCC_OscConfig+0x53c>
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fbf1 	bl	8001720 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fbed 	bl	8001720 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e14b      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ed      	bne.n	8002f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b78      	ldr	r3, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d03c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f92:	4a6f      	ldr	r2, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fbc0 	bl	8001720 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa4:	f7fe fbbc 	bl	8001720 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e11c      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x5cc>
 8002fc4:	e01b      	b.n	8002ffe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fc6:	4b62      	ldr	r3, [pc, #392]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fcc:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fba3 	bl	8001720 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fde:	f7fe fb9f 	bl	8001720 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0ff      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff0:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ef      	bne.n	8002fde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80f3 	beq.w	80031ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b02      	cmp	r3, #2
 800300e:	f040 80c9 	bne.w	80031a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003012:	4b4f      	ldr	r3, [pc, #316]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0203 	and.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	429a      	cmp	r2, r3
 8003024:	d12c      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	3b01      	subs	r3, #1
 8003032:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d123      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d11b      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d113      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d109      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d06b      	beq.n	8003158 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d062      	beq.n	800314c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003086:	4b32      	ldr	r3, [pc, #200]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0ac      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a2:	f7fe fb3d 	bl	8001720 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe fb39 	bl	8001720 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e099      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x77c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030d8:	3a01      	subs	r2, #1
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e2:	0212      	lsls	r2, r2, #8
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ea:	0852      	lsrs	r2, r2, #1
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0552      	lsls	r2, r2, #21
 80030f0:	4311      	orrs	r1, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030f6:	0852      	lsrs	r2, r2, #1
 80030f8:	3a01      	subs	r2, #1
 80030fa:	0652      	lsls	r2, r2, #25
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003102:	06d2      	lsls	r2, r2, #27
 8003104:	430a      	orrs	r2, r1
 8003106:	4912      	ldr	r1, [pc, #72]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003108:	4313      	orrs	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003124:	f7fe fafc 	bl	8001720 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe faf8 	bl	8001720 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e058      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800314a:	e050      	b.n	80031ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e04f      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
 8003150:	40021000 	.word	0x40021000
 8003154:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d144      	bne.n	80031ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800317c:	f7fe fad0 	bl	8001720 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe facc 	bl	8001720 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e02c      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x7ac>
 80031a2:	e024      	b.n	80031ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d01f      	beq.n	80031ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe fab3 	bl	8001720 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe faaf 	bl	8001720 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4905      	ldr	r1, [pc, #20]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_OscConfig+0x824>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	60cb      	str	r3, [r1, #12]
 80031e8:	e001      	b.n	80031ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	feeefffc 	.word	0xfeeefffc

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0e7      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d910      	bls.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b72      	ldr	r3, [pc, #456]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4970      	ldr	r1, [pc, #448]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cf      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4960      	ldr	r1, [pc, #384]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04c      	beq.n	8003318 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0a6      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d115      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e09a      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e08e      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e086      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4943      	ldr	r1, [pc, #268]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fe fa1a 	bl	8001720 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fa16 	bl	8001720 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e06e      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003330:	429a      	cmp	r2, r3
 8003332:	d208      	bcs.n	8003346 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	492b      	ldr	r1, [pc, #172]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d210      	bcs.n	8003376 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 0207 	bic.w	r2, r3, #7
 800335c:	4923      	ldr	r1, [pc, #140]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e036      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4918      	ldr	r1, [pc, #96]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4910      	ldr	r1, [pc, #64]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b4:	f000 f824 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	490b      	ldr	r1, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x1f4>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1f8>)
 80033d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1fc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe f951 	bl	8001680 <HAL_InitTick>
 80033de:	4603      	mov	r3, r0
 80033e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033e2:	7afb      	ldrb	r3, [r7, #11]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08006c98 	.word	0x08006c98
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d121      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11e      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800345c:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_RCC_GetSysClockFreq+0x10c>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d102      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e004      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d101      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_RCC_GetSysClockFreq+0x114>)
 8003486:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d134      	bne.n	80034f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d003      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0xac>
 80034a4:	e005      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a8:	617b      	str	r3, [r7, #20]
      break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ae:	617b      	str	r3, [r7, #20]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	617b      	str	r3, [r7, #20]
      break;
 80034b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	3301      	adds	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	fb03 f202 	mul.w	r2, r3, r2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	0e5b      	lsrs	r3, r3, #25
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3301      	adds	r3, #1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034f8:	69bb      	ldr	r3, [r7, #24]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	08006cb0 	.word	0x08006cb0
 8003510:	00f42400 	.word	0x00f42400
 8003514:	007a1200 	.word	0x007a1200

08003518 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003534:	f7ff fff0 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	08006ca8 	.word	0x08006ca8

0800355c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003560:	f7ff ffda 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0adb      	lsrs	r3, r3, #11
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4904      	ldr	r1, [pc, #16]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	08006ca8 	.word	0x08006ca8

08003588 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035a0:	f7ff f9b6 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 80035a4:	6178      	str	r0, [r7, #20]
 80035a6:	e014      	b.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4a24      	ldr	r2, [pc, #144]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035c0:	f7ff f9a6 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 80035c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d10b      	bne.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d919      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2ba0      	cmp	r3, #160	; 0xa0
 80035e4:	d902      	bls.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e6:	2302      	movs	r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e013      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035ec:	2301      	movs	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e010      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d902      	bls.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035f8:	2303      	movs	r3, #3
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e00a      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d102      	bne.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003604:	2302      	movs	r3, #2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e004      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b70      	cmp	r3, #112	; 0x70
 800360e:	d101      	bne.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003610:	2301      	movs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	4909      	ldr	r1, [pc, #36]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	40022000 	.word	0x40022000

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003650:	2300      	movs	r3, #0
 8003652:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003654:	2300      	movs	r3, #0
 8003656:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003660:	2b00      	cmp	r3, #0
 8003662:	d031      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800366c:	d01a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800366e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003672:	d814      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800367c:	d10f      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800367e:	4b5d      	ldr	r3, [pc, #372]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4a5c      	ldr	r2, [pc, #368]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f9ce 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	74fb      	strb	r3, [r7, #19]
      break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ac:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	494e      	ldr	r1, [pc, #312]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036c2:	e001      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 809e 	beq.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036da:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6593      	str	r3, [r2, #88]	; 0x58
 80036fc:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4b3a      	ldr	r3, [pc, #232]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003718:	f7fe f802 	bl	8001720 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fd fffe 	bl	8001720 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	74fb      	strb	r3, [r7, #19]
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15a      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	429a      	cmp	r2, r3
 8003760:	d019      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800378e:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd ffbe 	bl	8001720 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a6:	e00b      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fd ffba 	bl	8001720 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d902      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	74fb      	strb	r3, [r7, #19]
            break;
 80037be:	e006      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ec      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	4904      	ldr	r1, [pc, #16]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ea:	e009      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003800:	7c7b      	ldrb	r3, [r7, #17]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b8a      	ldr	r3, [pc, #552]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	4a89      	ldr	r2, [pc, #548]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800381e:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4980      	ldr	r1, [pc, #512]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003840:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 020c 	bic.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	4978      	ldr	r1, [pc, #480]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	496f      	ldr	r1, [pc, #444]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003884:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	4967      	ldr	r1, [pc, #412]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038a6:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	495e      	ldr	r1, [pc, #376]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	4956      	ldr	r1, [pc, #344]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d028      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390c:	4b48      	ldr	r3, [pc, #288]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4945      	ldr	r1, [pc, #276]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392a:	d106      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a3f      	ldr	r2, [pc, #252]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
 8003938:	e011      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003942:	d10c      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f872 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	492d      	ldr	r1, [pc, #180]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003988:	d106      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a28      	ldr	r2, [pc, #160]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003994:	60d3      	str	r3, [r2, #12]
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f843 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01c      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d6:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f820 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	4904      	ldr	r1, [pc, #16]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000

08003a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a42:	4b74      	ldr	r3, [pc, #464]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a4e:	4b71      	ldr	r3, [pc, #452]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
       ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a66:	4b6b      	ldr	r3, [pc, #428]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
       ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d047      	beq.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e044      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d018      	beq.n	8003aba <RCCEx_PLLSAI1_Config+0x86>
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d825      	bhi.n	8003ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x62>
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d009      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x74>
 8003a94:	e020      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11d      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa6:	e01a      	b.n	8003ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e013      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ad6:	e006      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      break;
 8003adc:	e004      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	430b      	orrs	r3, r1
 8003b04:	4943      	ldr	r1, [pc, #268]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d17c      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b10:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fe00 	bl	8001720 <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b22:	e009      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b24:	f7fd fdfc 	bl	8001720 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	73fb      	strb	r3, [r7, #15]
        break;
 8003b36:	e005      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b38:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ef      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d15f      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b50:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	06d2      	lsls	r2, r2, #27
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	492a      	ldr	r1, [pc, #168]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	610b      	str	r3, [r1, #16]
 8003b70:	e027      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d112      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6892      	ldr	r2, [r2, #8]
 8003b88:	0211      	lsls	r1, r2, #8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6912      	ldr	r2, [r2, #16]
 8003b8e:	0852      	lsrs	r2, r2, #1
 8003b90:	3a01      	subs	r2, #1
 8003b92:	0552      	lsls	r2, r2, #21
 8003b94:	430a      	orrs	r2, r1
 8003b96:	491f      	ldr	r1, [pc, #124]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	610b      	str	r3, [r1, #16]
 8003b9c:	e011      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ba6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6892      	ldr	r2, [r2, #8]
 8003bae:	0211      	lsls	r1, r2, #8
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6952      	ldr	r2, [r2, #20]
 8003bb4:	0852      	lsrs	r2, r2, #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0652      	lsls	r2, r2, #25
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	4915      	ldr	r1, [pc, #84]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fd fda7 	bl	8001720 <HAL_GetTick>
 8003bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd4:	e009      	b.n	8003bea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd6:	f7fd fda3 	bl	8001720 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	73fb      	strb	r3, [r7, #15]
          break;
 8003be8:	e005      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d079      	beq.n	8003d1e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd f9c8 	bl	8000fd4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d058      	beq.n	8003d0c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	22ca      	movs	r2, #202	; 0xca
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2253      	movs	r2, #83	; 0x53
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f880 	bl	8003d70 <RTC_EnterInitMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d127      	bne.n	8003cca <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6899      	ldr	r1, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68d2      	ldr	r2, [r2, #12]
 8003cb4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6919      	ldr	r1, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f884 	bl	8003dd8 <RTC_ExitInitMode>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d113      	bne.n	8003d02 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0203 	bic.w	r2, r2, #3
 8003ce8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	22ff      	movs	r2, #255	; 0xff
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
 8003d0a:	e001      	b.n	8003d10 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <HAL_RTC_WaitForSynchro+0x44>)
 8003d36:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003d38:	f7fd fcf2 	bl	8001720 <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d3e:	e009      	b.n	8003d54 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d40:	f7fd fcee 	bl	8001720 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d4e:	d901      	bls.n	8003d54 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e007      	b.n	8003d64 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ee      	beq.n	8003d40 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	0003ff5f 	.word	0x0003ff5f

08003d70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d120      	bne.n	8003dcc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d94:	f7fd fcc4 	bl	8001720 <HAL_GetTick>
 8003d98:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d9a:	e00d      	b.n	8003db8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d9c:	f7fd fcc0 	bl	8001720 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003daa:	d905      	bls.n	8003db8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2203      	movs	r2, #3
 8003db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <RTC_EnterInitMode+0x5c>
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d1e7      	bne.n	8003d9c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff93 	bl	8003d28 <HAL_RTC_WaitForSynchro>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01e      	beq.n	8003e46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e017      	b.n	8003e46 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003e1c:	f023 0320 	bic.w	r3, r3, #32
 8003e20:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ff80 	bl	8003d28 <HAL_RTC_WaitForSynchro>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <RTC_ExitInitMode+0x78>)
 8003e40:	f043 0320 	orr.w	r3, r3, #32
 8003e44:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40002800 	.word	0x40002800

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e054      	b.n	8003f10 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d111      	bne.n	8003e96 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa84 	bl	8004388 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_TIM_Base_Init+0xc4>)
 8003e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f000 fa09 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	08001035 	.word	0x08001035

08003f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e03b      	b.n	8003fac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x4e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d004      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x4e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_TIM_Base_Start_IT+0xa0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d115      	bne.n	8003f96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d015      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x8c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f82:	d011      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	e008      	b.n	8003fa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e000      	b.n	8003faa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	00010007 	.word	0x00010007

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d026      	beq.n	8004034 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d021      	beq.n	8004034 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
 8004018:	e009      	b.n	800402e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d026      	beq.n	800408c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d021      	beq.n	800408c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0204 	mvn.w	r2, #4
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
 8004070:	e009      	b.n	8004086 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d026      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d021      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0208 	mvn.w	r2, #8
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	e009      	b.n	80040de <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d026      	beq.n	800413c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d021      	beq.n	800413c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0210 	mvn.w	r2, #16
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2208      	movs	r2, #8
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	e009      	b.n	8004136 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0201 	mvn.w	r2, #1
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00e      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00e      	beq.n	8004204 <HAL_TIM_IRQHandler+0x240>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <HAL_TIM_IRQHandler+0x240>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0220 	mvn.w	r2, #32
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2a      	ldr	r2, [pc, #168]	; (800437c <TIM_Base_SetConfig+0xbc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0x20>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d108      	bne.n	80042f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a21      	ldr	r2, [pc, #132]	; (800437c <TIM_Base_SetConfig+0xbc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0x52>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0x52>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <TIM_Base_SetConfig+0xc0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0x52>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <TIM_Base_SetConfig+0xc4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0c      	ldr	r2, [pc, #48]	; (800437c <TIM_Base_SetConfig+0xbc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0xa0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <TIM_Base_SetConfig+0xc0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0xa0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <TIM_Base_SetConfig+0xc4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d103      	bne.n	8004368 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	615a      	str	r2, [r3, #20]
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40014000 	.word	0x40014000
 8004384:	40014400 	.word	0x40014400

08004388 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1e      	ldr	r2, [pc, #120]	; (800440c <TIM_ResetCallback+0x84>)
 8004394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <TIM_ResetCallback+0x88>)
 800439c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <TIM_ResetCallback+0x8c>)
 80043a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <TIM_ResetCallback+0x90>)
 80043ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a1a      	ldr	r2, [pc, #104]	; (800441c <TIM_ResetCallback+0x94>)
 80043b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a19      	ldr	r2, [pc, #100]	; (8004420 <TIM_ResetCallback+0x98>)
 80043bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <TIM_ResetCallback+0x9c>)
 80043c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <TIM_ResetCallback+0xa0>)
 80043cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <TIM_ResetCallback+0xa4>)
 80043d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a15      	ldr	r2, [pc, #84]	; (8004430 <TIM_ResetCallback+0xa8>)
 80043dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a14      	ldr	r2, [pc, #80]	; (8004434 <TIM_ResetCallback+0xac>)
 80043e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a13      	ldr	r2, [pc, #76]	; (8004438 <TIM_ResetCallback+0xb0>)
 80043ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <TIM_ResetCallback+0xb4>)
 80043f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a11      	ldr	r2, [pc, #68]	; (8004440 <TIM_ResetCallback+0xb8>)
 80043fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	08000975 	.word	0x08000975
 8004410:	0800420d 	.word	0x0800420d
 8004414:	08004285 	.word	0x08004285
 8004418:	08004299 	.word	0x08004299
 800441c:	08004235 	.word	0x08004235
 8004420:	08004249 	.word	0x08004249
 8004424:	08004221 	.word	0x08004221
 8004428:	0800425d 	.word	0x0800425d
 800442c:	08004271 	.word	0x08004271
 8004430:	080042ad 	.word	0x080042ad
 8004434:	08004511 	.word	0x08004511
 8004438:	08004525 	.word	0x08004525
 800443c:	08004539 	.word	0x08004539
 8004440:	0800454d 	.word	0x0800454d

08004444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e04f      	b.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a21      	ldr	r2, [pc, #132]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800448c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a14      	ldr	r2, [pc, #80]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d004      	beq.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a10      	ldr	r2, [pc, #64]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10c      	bne.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40014000 	.word	0x40014000

08004510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e040      	b.n	80045f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fd7c 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fe30 	bl	800520c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fc01 	bl	8004db4 <UART_SetConfig>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e01b      	b.n	80045f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 feaf 	bl	8005350 <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460e:	2b20      	cmp	r3, #32
 8004610:	d165      	bne.n	80046de <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_UART_Transmit_DMA+0x22>
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e05e      	b.n	80046e0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2221      	movs	r2, #33	; 0x21
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	2b00      	cmp	r3, #0
 800464c:	d027      	beq.n	800469e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <HAL_UART_Transmit_DMA+0xec>)
 8004654:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a24      	ldr	r2, [pc, #144]	; (80046ec <HAL_UART_Transmit_DMA+0xf0>)
 800465c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <HAL_UART_Transmit_DMA+0xf4>)
 8004664:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	2200      	movs	r2, #0
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	4619      	mov	r1, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3328      	adds	r3, #40	; 0x28
 800467e:	461a      	mov	r2, r3
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	f7fd fd7b 	bl	800217c <HAL_DMA_Start_IT>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2210      	movs	r2, #16
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e020      	b.n	80046e0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	613b      	str	r3, [r7, #16]
   return(result);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	623a      	str	r2, [r7, #32]
 80046c8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	69f9      	ldr	r1, [r7, #28]
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
  }
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	; 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	080057c5 	.word	0x080057c5
 80046ec:	0800585f 	.word	0x0800585f
 80046f0:	080059e5 	.word	0x080059e5

080046f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004708:	2b20      	cmp	r3, #32
 800470a:	d137      	bne.n	800477c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_UART_Receive_DMA+0x24>
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e030      	b.n	800477e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_UART_Receive_DMA+0x94>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01f      	beq.n	800476c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d018      	beq.n	800476c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	613b      	str	r3, [r7, #16]
   return(result);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	69f9      	ldr	r1, [r7, #28]
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	61bb      	str	r3, [r7, #24]
   return(result);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e6      	bne.n	800473a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	461a      	mov	r2, r3
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fefc 	bl	8005570 <UART_Start_Receive_DMA>
 8004778:	4603      	mov	r3, r0
 800477a:	e000      	b.n	800477e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3728      	adds	r7, #40	; 0x28
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40008000 	.word	0x40008000

0800478c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b0ba      	sub	sp, #232	; 0xe8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ba:	4013      	ands	r3, r2
 80047bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d115      	bne.n	80047f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 82ae 	beq.w	8004d46 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4798      	blx	r3
      }
      return;
 80047f2:	e2a8      	b.n	8004d46 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8117 	beq.w	8004a2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800480a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800480e:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_UART_IRQHandler+0x298>)
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 810a 	beq.w	8004a2c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d011      	beq.n	8004848 <HAL_UART_IRQHandler+0xbc>
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d011      	beq.n	8004878 <HAL_UART_IRQHandler+0xec>
 8004854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2202      	movs	r2, #2
 8004866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486e:	f043 0204 	orr.w	r2, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0x11c>
 8004884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2204      	movs	r2, #4
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2208      	movs	r2, #8
 80048d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048da:	f043 0208 	orr.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <HAL_UART_IRQHandler+0x18a>
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00c      	beq.n	8004916 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8214 	beq.w	8004d4a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800492e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004966:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04f      	beq.n	8004a0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fec4 	bl	80056fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d141      	bne.n	8004a06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800499c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d013      	beq.n	80049fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <HAL_UART_IRQHandler+0x29c>)
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd fc68 	bl	80022b8 <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d017      	beq.n	8004a1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049f8:	4610      	mov	r0, r2
 80049fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00f      	b.n	8004a1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9c2 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00b      	b.n	8004a1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9be 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e007      	b.n	8004a1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9ba 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a1c:	e195      	b.n	8004d4a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1e:	bf00      	nop
    return;
 8004a20:	e193      	b.n	8004d4a <HAL_UART_IRQHandler+0x5be>
 8004a22:	bf00      	nop
 8004a24:	04000120 	.word	0x04000120
 8004a28:	08005a63 	.word	0x08005a63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 814e 	bne.w	8004cd2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8147 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8140 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2210      	movs	r2, #16
 8004a58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	f040 80b8 	bne.w	8004bda <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8167 	beq.w	8004d4e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f080 815f 	bcs.w	8004d4e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 8086 	bne.w	8004bb8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ada:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1da      	bne.n	8004aac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e1      	bne.n	8004af6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e3      	bne.n	8004b32 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b88:	f023 0310 	bic.w	r3, r3, #16
 8004b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e4      	bne.n	8004b78 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd fb42 	bl	800223c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8e2 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bd8:	e0b9      	b.n	8004d4e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80ab 	beq.w	8004d52 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80a6 	beq.w	8004d52 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e4      	bne.n	8004c06 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c60:	633a      	str	r2, [r7, #48]	; 0x30
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e3      	bne.n	8004c3c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f023 0310 	bic.w	r3, r3, #16
 8004c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	69b9      	ldr	r1, [r7, #24]
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e4      	bne.n	8004c88 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f866 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cd0:	e03f      	b.n	8004d52 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <HAL_UART_IRQHandler+0x570>
 8004cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fef4 	bl	8005ae2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cfa:	e02d      	b.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00e      	beq.n	8004d26 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01c      	beq.n	8004d56 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
    }
    return;
 8004d24:	e017      	b.n	8004d56 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d012      	beq.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
 8004d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fea5 	bl	8005a8e <UART_EndTransmit_IT>
    return;
 8004d44:	e008      	b.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d46:	bf00      	nop
 8004d48:	e006      	b.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004d4a:	bf00      	nop
 8004d4c:	e004      	b.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004d56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d58:	37e8      	adds	r7, #232	; 0xe8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b08a      	sub	sp, #40	; 0x28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4bb4      	ldr	r3, [pc, #720]	; (80050b4 <UART_SetConfig+0x300>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4aa9      	ldr	r2, [pc, #676]	; (80050b8 <UART_SetConfig+0x304>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e30:	430a      	orrs	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4aa0      	ldr	r2, [pc, #640]	; (80050bc <UART_SetConfig+0x308>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d126      	bne.n	8004e8c <UART_SetConfig+0xd8>
 8004e3e:	4ba0      	ldr	r3, [pc, #640]	; (80050c0 <UART_SetConfig+0x30c>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d81b      	bhi.n	8004e84 <UART_SetConfig+0xd0>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0xa0>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	08004e6d 	.word	0x08004e6d
 8004e60:	08004e7d 	.word	0x08004e7d
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e080      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e07c      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004e74:	2304      	movs	r3, #4
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e078      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e074      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8a:	e070      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a8c      	ldr	r2, [pc, #560]	; (80050c4 <UART_SetConfig+0x310>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d138      	bne.n	8004f08 <UART_SetConfig+0x154>
 8004e96:	4b8a      	ldr	r3, [pc, #552]	; (80050c0 <UART_SetConfig+0x30c>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d82d      	bhi.n	8004f00 <UART_SetConfig+0x14c>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0xf8>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004f01 	.word	0x08004f01
 8004eb8:	08004f01 	.word	0x08004f01
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004f01 	.word	0x08004f01
 8004ec4:	08004f01 	.word	0x08004f01
 8004ec8:	08004f01 	.word	0x08004f01
 8004ecc:	08004ee9 	.word	0x08004ee9
 8004ed0:	08004f01 	.word	0x08004f01
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004ef9 	.word	0x08004ef9
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e042      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e03e      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e03a      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e036      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e032      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a6a      	ldr	r2, [pc, #424]	; (80050b8 <UART_SetConfig+0x304>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12a      	bne.n	8004f68 <UART_SetConfig+0x1b4>
 8004f12:	4b6b      	ldr	r3, [pc, #428]	; (80050c0 <UART_SetConfig+0x30c>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f20:	d01a      	beq.n	8004f58 <UART_SetConfig+0x1a4>
 8004f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0x1ac>
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2c:	d00c      	beq.n	8004f48 <UART_SetConfig+0x194>
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d815      	bhi.n	8004f60 <UART_SetConfig+0x1ac>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <UART_SetConfig+0x18c>
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d008      	beq.n	8004f50 <UART_SetConfig+0x19c>
 8004f3e:	e00f      	b.n	8004f60 <UART_SetConfig+0x1ac>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e012      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e00e      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e00a      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e006      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e002      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a51      	ldr	r2, [pc, #324]	; (80050b8 <UART_SetConfig+0x304>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d17a      	bne.n	800506e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d824      	bhi.n	8004fca <UART_SetConfig+0x216>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x1d4>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fcb 	.word	0x08004fcb
 8004f98:	08004fbb 	.word	0x08004fbb
 8004f9c:	08004fcb 	.word	0x08004fcb
 8004fa0:	08004fcb 	.word	0x08004fcb
 8004fa4:	08004fcb 	.word	0x08004fcb
 8004fa8:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe fac0 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61f8      	str	r0, [r7, #28]
        break;
 8004fb2:	e010      	b.n	8004fd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b44      	ldr	r3, [pc, #272]	; (80050c8 <UART_SetConfig+0x314>)
 8004fb6:	61fb      	str	r3, [r7, #28]
        break;
 8004fb8:	e00d      	b.n	8004fd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7fe fa21 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8004fbe:	61f8      	str	r0, [r7, #28]
        break;
 8004fc0:	e009      	b.n	8004fd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	61fb      	str	r3, [r7, #28]
        break;
 8004fc8:	e005      	b.n	8004fd6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8107 	beq.w	80051ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d305      	bcc.n	8004ffa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005000:	e0f4      	b.n	80051ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2200      	movs	r2, #0
 8005006:	461c      	mov	r4, r3
 8005008:	4615      	mov	r5, r2
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	022b      	lsls	r3, r5, #8
 8005014:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005018:	0222      	lsls	r2, r4, #8
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	6849      	ldr	r1, [r1, #4]
 800501e:	0849      	lsrs	r1, r1, #1
 8005020:	2000      	movs	r0, #0
 8005022:	4688      	mov	r8, r1
 8005024:	4681      	mov	r9, r0
 8005026:	eb12 0a08 	adds.w	sl, r2, r8
 800502a:	eb43 0b09 	adc.w	fp, r3, r9
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800503c:	4650      	mov	r0, sl
 800503e:	4659      	mov	r1, fp
 8005040:	f7fb f916 	bl	8000270 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4613      	mov	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005052:	d308      	bcc.n	8005066 <UART_SetConfig+0x2b2>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505a:	d204      	bcs.n	8005066 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	e0c2      	b.n	80051ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800506c:	e0be      	b.n	80051ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005076:	d16a      	bne.n	800514e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800507c:	2b08      	cmp	r3, #8
 800507e:	d834      	bhi.n	80050ea <UART_SetConfig+0x336>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x2d4>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050cd 	.word	0x080050cd
 8005090:	080050d5 	.word	0x080050d5
 8005094:	080050eb 	.word	0x080050eb
 8005098:	080050db 	.word	0x080050db
 800509c:	080050eb 	.word	0x080050eb
 80050a0:	080050eb 	.word	0x080050eb
 80050a4:	080050eb 	.word	0x080050eb
 80050a8:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fe fa40 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 80050b0:	61f8      	str	r0, [r7, #28]
        break;
 80050b2:	e020      	b.n	80050f6 <UART_SetConfig+0x342>
 80050b4:	efff69f3 	.word	0xefff69f3
 80050b8:	40008000 	.word	0x40008000
 80050bc:	40013800 	.word	0x40013800
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40004400 	.word	0x40004400
 80050c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7fe fa46 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 80050d0:	61f8      	str	r0, [r7, #28]
        break;
 80050d2:	e010      	b.n	80050f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b4c      	ldr	r3, [pc, #304]	; (8005208 <UART_SetConfig+0x454>)
 80050d6:	61fb      	str	r3, [r7, #28]
        break;
 80050d8:	e00d      	b.n	80050f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7fe f991 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80050de:	61f8      	str	r0, [r7, #28]
        break;
 80050e0:	e009      	b.n	80050f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	61fb      	str	r3, [r7, #28]
        break;
 80050e8:	e005      	b.n	80050f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d077      	beq.n	80051ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	005a      	lsls	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	441a      	add	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b0f      	cmp	r3, #15
 8005116:	d916      	bls.n	8005146 <UART_SetConfig+0x392>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511e:	d212      	bcs.n	8005146 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f023 030f 	bic.w	r3, r3, #15
 8005128:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	b29a      	uxth	r2, r3
 8005136:	8afb      	ldrh	r3, [r7, #22]
 8005138:	4313      	orrs	r3, r2
 800513a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	8afa      	ldrh	r2, [r7, #22]
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	e052      	b.n	80051ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800514c:	e04e      	b.n	80051ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800514e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005152:	2b08      	cmp	r3, #8
 8005154:	d827      	bhi.n	80051a6 <UART_SetConfig+0x3f2>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0x3a8>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005181 	.word	0x08005181
 8005160:	08005189 	.word	0x08005189
 8005164:	08005191 	.word	0x08005191
 8005168:	080051a7 	.word	0x080051a7
 800516c:	08005197 	.word	0x08005197
 8005170:	080051a7 	.word	0x080051a7
 8005174:	080051a7 	.word	0x080051a7
 8005178:	080051a7 	.word	0x080051a7
 800517c:	0800519f 	.word	0x0800519f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7fe f9d6 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8005184:	61f8      	str	r0, [r7, #28]
        break;
 8005186:	e014      	b.n	80051b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005188:	f7fe f9e8 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 800518c:	61f8      	str	r0, [r7, #28]
        break;
 800518e:	e010      	b.n	80051b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <UART_SetConfig+0x454>)
 8005192:	61fb      	str	r3, [r7, #28]
        break;
 8005194:	e00d      	b.n	80051b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005196:	f7fe f933 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 800519a:	61f8      	str	r0, [r7, #28]
        break;
 800519c:	e009      	b.n	80051b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a2:	61fb      	str	r3, [r7, #28]
        break;
 80051a4:	e005      	b.n	80051b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051b0:	bf00      	nop
    }

    if (pclk != 0U)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d019      	beq.n	80051ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	085a      	lsrs	r2, r3, #1
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	d909      	bls.n	80051e6 <UART_SetConfig+0x432>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d8:	d205      	bcs.n	80051e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
 80051e4:	e002      	b.n	80051ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005206:	bf00      	nop
 8005208:	00f42400 	.word	0x00f42400

0800520c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01a      	beq.n	8005322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530a:	d10a      	bne.n	8005322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b098      	sub	sp, #96	; 0x60
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005360:	f7fc f9de 	bl	8001720 <HAL_GetTick>
 8005364:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d12e      	bne.n	80053d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f88c 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d021      	beq.n	80053d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a2:	653b      	str	r3, [r7, #80]	; 0x50
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
 80053ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e062      	b.n	8005498 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d149      	bne.n	8005474 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f856 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03c      	beq.n	8005474 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	623b      	str	r3, [r7, #32]
   return(result);
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800541e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e6      	bne.n	80053fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	60fb      	str	r3, [r7, #12]
   return(result);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	; 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800544c:	61fa      	str	r2, [r7, #28]
 800544e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	617b      	str	r3, [r7, #20]
   return(result);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e011      	b.n	8005498 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3758      	adds	r7, #88	; 0x58
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e049      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d045      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc f931 	bl	8001720 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e048      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d031      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d110      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f8ff 	bl	80056fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2208      	movs	r2, #8
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e029      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005520:	d111      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800552a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f8e5 	bl	80056fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e00f      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d0a6      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b096      	sub	sp, #88	; 0x58
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2222      	movs	r2, #34	; 0x22
 8005598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d028      	beq.n	80055f6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a8:	4a3e      	ldr	r2, [pc, #248]	; (80056a4 <UART_Start_Receive_DMA+0x134>)
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	4a3d      	ldr	r2, [pc, #244]	; (80056a8 <UART_Start_Receive_DMA+0x138>)
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b8:	4a3c      	ldr	r2, [pc, #240]	; (80056ac <UART_Start_Receive_DMA+0x13c>)
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c0:	2200      	movs	r2, #0
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3324      	adds	r3, #36	; 0x24
 80055ce:	4619      	mov	r1, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	461a      	mov	r2, r3
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	f7fc fdd0 	bl	800217c <HAL_DMA_Start_IT>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2210      	movs	r2, #16
 80055e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e051      	b.n	800569a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800561c:	64bb      	str	r3, [r7, #72]	; 0x48
 800561e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800562a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	653b      	str	r3, [r7, #80]	; 0x50
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005650:	637a      	str	r2, [r7, #52]	; 0x34
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e5      	bne.n	8005630 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	613b      	str	r3, [r7, #16]
   return(result);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005684:	623a      	str	r2, [r7, #32]
 8005686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69f9      	ldr	r1, [r7, #28]
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	61bb      	str	r3, [r7, #24]
   return(result);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3758      	adds	r7, #88	; 0x58
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	0800587b 	.word	0x0800587b
 80056a8:	080059a7 	.word	0x080059a7
 80056ac:	080059e5 	.word	0x080059e5

080056b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6979      	ldr	r1, [r7, #20]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	613b      	str	r3, [r7, #16]
   return(result);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e6      	bne.n	80056b8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80056f0:	bf00      	nop
 80056f2:	3724      	adds	r7, #36	; 0x24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b095      	sub	sp, #84	; 0x54
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	643b      	str	r3, [r7, #64]	; 0x40
 8005724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e6      	bne.n	8005704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	61fb      	str	r3, [r7, #28]
   return(result);
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800575c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576e:	2b01      	cmp	r3, #1
 8005770:	d118      	bne.n	80057a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f023 0310 	bic.w	r3, r3, #16
 8005786:	647b      	str	r3, [r7, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6979      	ldr	r1, [r7, #20]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	613b      	str	r3, [r7, #16]
   return(result);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e6      	bne.n	8005772 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057b8:	bf00      	nop
 80057ba:	3754      	adds	r7, #84	; 0x54
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b090      	sub	sp, #64	; 0x40
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d137      	bne.n	8005850 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3308      	adds	r3, #8
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	623b      	str	r3, [r7, #32]
   return(result);
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005808:	633a      	str	r2, [r7, #48]	; 0x30
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	60fb      	str	r3, [r7, #12]
   return(result);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	617b      	str	r3, [r7, #20]
   return(result);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800584e:	e002      	b.n	8005856 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005852:	f7fb f8d8 	bl	8000a06 <HAL_UART_TxCpltCallback>
}
 8005856:	bf00      	nop
 8005858:	3740      	adds	r7, #64	; 0x40
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fa77 	bl	8004d60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b09c      	sub	sp, #112	; 0x70
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d171      	bne.n	800597a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	2200      	movs	r2, #0
 800589a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	667b      	str	r3, [r7, #100]	; 0x64
 80058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058f0:	647a      	str	r2, [r7, #68]	; 0x44
 80058f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3308      	adds	r3, #8
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	623b      	str	r3, [r7, #32]
   return(result);
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591a:	663b      	str	r3, [r7, #96]	; 0x60
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3308      	adds	r3, #8
 8005922:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005924:	633a      	str	r2, [r7, #48]	; 0x30
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800592a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593a:	2220      	movs	r2, #32
 800593c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005944:	2b01      	cmp	r3, #1
 8005946:	d118      	bne.n	800597a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	60fb      	str	r3, [r7, #12]
   return(result);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 0310 	bic.w	r3, r3, #16
 800595c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	69b9      	ldr	r1, [r7, #24]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	617b      	str	r3, [r7, #20]
   return(result);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800597a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597c:	2200      	movs	r2, #0
 800597e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	2b01      	cmp	r3, #1
 8005986:	d107      	bne.n	8005998 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800598e:	4619      	mov	r1, r3
 8005990:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005992:	f7ff fa03 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005996:	e002      	b.n	800599e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005998:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800599a:	f7fb f82a 	bl	80009f2 <HAL_UART_RxCpltCallback>
}
 800599e:	bf00      	nop
 80059a0:	3770      	adds	r7, #112	; 0x70
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d109      	bne.n	80059d6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff f9e4 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059d4:	e002      	b.n	80059dc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff f9cc 	bl	8004d74 <HAL_UART_RxHalfCpltCallback>
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d109      	bne.n	8005a22 <UART_DMAError+0x3e>
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b21      	cmp	r3, #33	; 0x21
 8005a12:	d106      	bne.n	8005a22 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005a1c:	6978      	ldr	r0, [r7, #20]
 8005a1e:	f7ff fe47 	bl	80056b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d109      	bne.n	8005a44 <UART_DMAError+0x60>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b22      	cmp	r3, #34	; 0x22
 8005a34:	d106      	bne.n	8005a44 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f7ff fe5c 	bl	80056fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4a:	f043 0210 	orr.w	r2, r3, #16
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a54:	6978      	ldr	r0, [r7, #20]
 8005a56:	f7ff f997 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff f981 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b088      	sub	sp, #32
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e6      	bne.n	8005a96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fa ff96 	bl	8000a06 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ada:	bf00      	nop
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <__sfputc_r>:
 8005af6:	6893      	ldr	r3, [r2, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	b410      	push	{r4}
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	da08      	bge.n	8005b14 <__sfputc_r+0x1e>
 8005b02:	6994      	ldr	r4, [r2, #24]
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	db01      	blt.n	8005b0c <__sfputc_r+0x16>
 8005b08:	290a      	cmp	r1, #10
 8005b0a:	d103      	bne.n	8005b14 <__sfputc_r+0x1e>
 8005b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b10:	f000 bd43 	b.w	800659a <__swbuf_r>
 8005b14:	6813      	ldr	r3, [r2, #0]
 8005b16:	1c58      	adds	r0, r3, #1
 8005b18:	6010      	str	r0, [r2, #0]
 8005b1a:	7019      	strb	r1, [r3, #0]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <__sfputs_r>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	18d5      	adds	r5, r2, r3
 8005b2e:	42ac      	cmp	r4, r5
 8005b30:	d101      	bne.n	8005b36 <__sfputs_r+0x12>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e007      	b.n	8005b46 <__sfputs_r+0x22>
 8005b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7ff ffda 	bl	8005af6 <__sfputc_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d1f3      	bne.n	8005b2e <__sfputs_r+0xa>
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b48 <_vfiprintf_r>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	b09d      	sub	sp, #116	; 0x74
 8005b50:	4614      	mov	r4, r2
 8005b52:	4698      	mov	r8, r3
 8005b54:	4606      	mov	r6, r0
 8005b56:	b118      	cbz	r0, 8005b60 <_vfiprintf_r+0x18>
 8005b58:	6a03      	ldr	r3, [r0, #32]
 8005b5a:	b90b      	cbnz	r3, 8005b60 <_vfiprintf_r+0x18>
 8005b5c:	f000 fb22 	bl	80061a4 <__sinit>
 8005b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b62:	07d9      	lsls	r1, r3, #31
 8005b64:	d405      	bmi.n	8005b72 <_vfiprintf_r+0x2a>
 8005b66:	89ab      	ldrh	r3, [r5, #12]
 8005b68:	059a      	lsls	r2, r3, #22
 8005b6a:	d402      	bmi.n	8005b72 <_vfiprintf_r+0x2a>
 8005b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b6e:	f000 fe21 	bl	80067b4 <__retarget_lock_acquire_recursive>
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	071b      	lsls	r3, r3, #28
 8005b76:	d501      	bpl.n	8005b7c <_vfiprintf_r+0x34>
 8005b78:	692b      	ldr	r3, [r5, #16]
 8005b7a:	b99b      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x5c>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 fd48 	bl	8006614 <__swsetup_r>
 8005b84:	b170      	cbz	r0, 8005ba4 <_vfiprintf_r+0x5c>
 8005b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b88:	07dc      	lsls	r4, r3, #31
 8005b8a:	d504      	bpl.n	8005b96 <_vfiprintf_r+0x4e>
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	b01d      	add	sp, #116	; 0x74
 8005b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	0598      	lsls	r0, r3, #22
 8005b9a:	d4f7      	bmi.n	8005b8c <_vfiprintf_r+0x44>
 8005b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b9e:	f000 fe0a 	bl	80067b6 <__retarget_lock_release_recursive>
 8005ba2:	e7f3      	b.n	8005b8c <_vfiprintf_r+0x44>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb2:	2330      	movs	r3, #48	; 0x30
 8005bb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005d68 <_vfiprintf_r+0x220>
 8005bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bbc:	f04f 0901 	mov.w	r9, #1
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc8:	b10a      	cbz	r2, 8005bce <_vfiprintf_r+0x86>
 8005bca:	2a25      	cmp	r2, #37	; 0x25
 8005bcc:	d1f9      	bne.n	8005bc2 <_vfiprintf_r+0x7a>
 8005bce:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd2:	d00b      	beq.n	8005bec <_vfiprintf_r+0xa4>
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ffa2 	bl	8005b24 <__sfputs_r>
 8005be0:	3001      	adds	r0, #1
 8005be2:	f000 80a9 	beq.w	8005d38 <_vfiprintf_r+0x1f0>
 8005be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be8:	445a      	add	r2, fp
 8005bea:	9209      	str	r2, [sp, #36]	; 0x24
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a1 	beq.w	8005d38 <_vfiprintf_r+0x1f0>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2205      	movs	r2, #5
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	4854      	ldr	r0, [pc, #336]	; (8005d68 <_vfiprintf_r+0x220>)
 8005c18:	f7fa fada 	bl	80001d0 <memchr>
 8005c1c:	9a04      	ldr	r2, [sp, #16]
 8005c1e:	b9d8      	cbnz	r0, 8005c58 <_vfiprintf_r+0x110>
 8005c20:	06d1      	lsls	r1, r2, #27
 8005c22:	bf44      	itt	mi
 8005c24:	2320      	movmi	r3, #32
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2a:	0713      	lsls	r3, r2, #28
 8005c2c:	bf44      	itt	mi
 8005c2e:	232b      	movmi	r3, #43	; 0x2b
 8005c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c34:	f89a 3000 	ldrb.w	r3, [sl]
 8005c38:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3a:	d015      	beq.n	8005c68 <_vfiprintf_r+0x120>
 8005c3c:	9a07      	ldr	r2, [sp, #28]
 8005c3e:	4654      	mov	r4, sl
 8005c40:	2000      	movs	r0, #0
 8005c42:	f04f 0c0a 	mov.w	ip, #10
 8005c46:	4621      	mov	r1, r4
 8005c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4c:	3b30      	subs	r3, #48	; 0x30
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	d94d      	bls.n	8005cee <_vfiprintf_r+0x1a6>
 8005c52:	b1b0      	cbz	r0, 8005c82 <_vfiprintf_r+0x13a>
 8005c54:	9207      	str	r2, [sp, #28]
 8005c56:	e014      	b.n	8005c82 <_vfiprintf_r+0x13a>
 8005c58:	eba0 0308 	sub.w	r3, r0, r8
 8005c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	46a2      	mov	sl, r4
 8005c66:	e7d2      	b.n	8005c0e <_vfiprintf_r+0xc6>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	9103      	str	r1, [sp, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfbb      	ittet	lt
 8005c74:	425b      	neglt	r3, r3
 8005c76:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7a:	9307      	strge	r3, [sp, #28]
 8005c7c:	9307      	strlt	r3, [sp, #28]
 8005c7e:	bfb8      	it	lt
 8005c80:	9204      	strlt	r2, [sp, #16]
 8005c82:	7823      	ldrb	r3, [r4, #0]
 8005c84:	2b2e      	cmp	r3, #46	; 0x2e
 8005c86:	d10c      	bne.n	8005ca2 <_vfiprintf_r+0x15a>
 8005c88:	7863      	ldrb	r3, [r4, #1]
 8005c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8c:	d134      	bne.n	8005cf8 <_vfiprintf_r+0x1b0>
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	9203      	str	r2, [sp, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bfb8      	it	lt
 8005c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c9e:	3402      	adds	r4, #2
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d78 <_vfiprintf_r+0x230>
 8005ca6:	7821      	ldrb	r1, [r4, #0]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	4650      	mov	r0, sl
 8005cac:	f7fa fa90 	bl	80001d0 <memchr>
 8005cb0:	b138      	cbz	r0, 8005cc2 <_vfiprintf_r+0x17a>
 8005cb2:	9b04      	ldr	r3, [sp, #16]
 8005cb4:	eba0 000a 	sub.w	r0, r0, sl
 8005cb8:	2240      	movs	r2, #64	; 0x40
 8005cba:	4082      	lsls	r2, r0
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	9304      	str	r3, [sp, #16]
 8005cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc6:	4829      	ldr	r0, [pc, #164]	; (8005d6c <_vfiprintf_r+0x224>)
 8005cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ccc:	2206      	movs	r2, #6
 8005cce:	f7fa fa7f 	bl	80001d0 <memchr>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d03f      	beq.n	8005d56 <_vfiprintf_r+0x20e>
 8005cd6:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <_vfiprintf_r+0x228>)
 8005cd8:	bb1b      	cbnz	r3, 8005d22 <_vfiprintf_r+0x1da>
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	3307      	adds	r3, #7
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce8:	443b      	add	r3, r7
 8005cea:	9309      	str	r3, [sp, #36]	; 0x24
 8005cec:	e768      	b.n	8005bc0 <_vfiprintf_r+0x78>
 8005cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	e7a6      	b.n	8005c46 <_vfiprintf_r+0xfe>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	3401      	adds	r4, #1
 8005cfc:	9305      	str	r3, [sp, #20]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f04f 0c0a 	mov.w	ip, #10
 8005d04:	4620      	mov	r0, r4
 8005d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0a:	3a30      	subs	r2, #48	; 0x30
 8005d0c:	2a09      	cmp	r2, #9
 8005d0e:	d903      	bls.n	8005d18 <_vfiprintf_r+0x1d0>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0c6      	beq.n	8005ca2 <_vfiprintf_r+0x15a>
 8005d14:	9105      	str	r1, [sp, #20]
 8005d16:	e7c4      	b.n	8005ca2 <_vfiprintf_r+0x15a>
 8005d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7f0      	b.n	8005d04 <_vfiprintf_r+0x1bc>
 8005d22:	ab03      	add	r3, sp, #12
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	462a      	mov	r2, r5
 8005d28:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <_vfiprintf_r+0x22c>)
 8005d2a:	a904      	add	r1, sp, #16
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f3af 8000 	nop.w
 8005d32:	4607      	mov	r7, r0
 8005d34:	1c78      	adds	r0, r7, #1
 8005d36:	d1d6      	bne.n	8005ce6 <_vfiprintf_r+0x19e>
 8005d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x202>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x202>
 8005d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d46:	f000 fd36 	bl	80067b6 <__retarget_lock_release_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	065b      	lsls	r3, r3, #25
 8005d4e:	f53f af1d 	bmi.w	8005b8c <_vfiprintf_r+0x44>
 8005d52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d54:	e71c      	b.n	8005b90 <_vfiprintf_r+0x48>
 8005d56:	ab03      	add	r3, sp, #12
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <_vfiprintf_r+0x22c>)
 8005d5e:	a904      	add	r1, sp, #16
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 f883 	bl	8005e6c <_printf_i>
 8005d66:	e7e4      	b.n	8005d32 <_vfiprintf_r+0x1ea>
 8005d68:	08006ce0 	.word	0x08006ce0
 8005d6c:	08006cea 	.word	0x08006cea
 8005d70:	00000000 	.word	0x00000000
 8005d74:	08005b25 	.word	0x08005b25
 8005d78:	08006ce6 	.word	0x08006ce6

08005d7c <vfiprintf>:
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	460a      	mov	r2, r1
 8005d80:	4601      	mov	r1, r0
 8005d82:	4802      	ldr	r0, [pc, #8]	; (8005d8c <vfiprintf+0x10>)
 8005d84:	6800      	ldr	r0, [r0, #0]
 8005d86:	f7ff bedf 	b.w	8005b48 <_vfiprintf_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000064 	.word	0x20000064

08005d90 <_printf_common>:
 8005d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	4616      	mov	r6, r2
 8005d96:	4699      	mov	r9, r3
 8005d98:	688a      	ldr	r2, [r1, #8]
 8005d9a:	690b      	ldr	r3, [r1, #16]
 8005d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	bfb8      	it	lt
 8005da4:	4613      	movlt	r3, r2
 8005da6:	6033      	str	r3, [r6, #0]
 8005da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dac:	4607      	mov	r7, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	b10a      	cbz	r2, 8005db6 <_printf_common+0x26>
 8005db2:	3301      	adds	r3, #1
 8005db4:	6033      	str	r3, [r6, #0]
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	0699      	lsls	r1, r3, #26
 8005dba:	bf42      	ittt	mi
 8005dbc:	6833      	ldrmi	r3, [r6, #0]
 8005dbe:	3302      	addmi	r3, #2
 8005dc0:	6033      	strmi	r3, [r6, #0]
 8005dc2:	6825      	ldr	r5, [r4, #0]
 8005dc4:	f015 0506 	ands.w	r5, r5, #6
 8005dc8:	d106      	bne.n	8005dd8 <_printf_common+0x48>
 8005dca:	f104 0a19 	add.w	sl, r4, #25
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	6832      	ldr	r2, [r6, #0]
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	42ab      	cmp	r3, r5
 8005dd6:	dc26      	bgt.n	8005e26 <_printf_common+0x96>
 8005dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ddc:	1e13      	subs	r3, r2, #0
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	bf18      	it	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	0692      	lsls	r2, r2, #26
 8005de6:	d42b      	bmi.n	8005e40 <_printf_common+0xb0>
 8005de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dec:	4649      	mov	r1, r9
 8005dee:	4638      	mov	r0, r7
 8005df0:	47c0      	blx	r8
 8005df2:	3001      	adds	r0, #1
 8005df4:	d01e      	beq.n	8005e34 <_printf_common+0xa4>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	6922      	ldr	r2, [r4, #16]
 8005dfa:	f003 0306 	and.w	r3, r3, #6
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	bf02      	ittt	eq
 8005e02:	68e5      	ldreq	r5, [r4, #12]
 8005e04:	6833      	ldreq	r3, [r6, #0]
 8005e06:	1aed      	subeq	r5, r5, r3
 8005e08:	68a3      	ldr	r3, [r4, #8]
 8005e0a:	bf0c      	ite	eq
 8005e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e10:	2500      	movne	r5, #0
 8005e12:	4293      	cmp	r3, r2
 8005e14:	bfc4      	itt	gt
 8005e16:	1a9b      	subgt	r3, r3, r2
 8005e18:	18ed      	addgt	r5, r5, r3
 8005e1a:	2600      	movs	r6, #0
 8005e1c:	341a      	adds	r4, #26
 8005e1e:	42b5      	cmp	r5, r6
 8005e20:	d11a      	bne.n	8005e58 <_printf_common+0xc8>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e008      	b.n	8005e38 <_printf_common+0xa8>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4652      	mov	r2, sl
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	47c0      	blx	r8
 8005e30:	3001      	adds	r0, #1
 8005e32:	d103      	bne.n	8005e3c <_printf_common+0xac>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	e7c6      	b.n	8005dce <_printf_common+0x3e>
 8005e40:	18e1      	adds	r1, r4, r3
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	2030      	movs	r0, #48	; 0x30
 8005e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e4a:	4422      	add	r2, r4
 8005e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e54:	3302      	adds	r3, #2
 8005e56:	e7c7      	b.n	8005de8 <_printf_common+0x58>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4638      	mov	r0, r7
 8005e60:	47c0      	blx	r8
 8005e62:	3001      	adds	r0, #1
 8005e64:	d0e6      	beq.n	8005e34 <_printf_common+0xa4>
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7d9      	b.n	8005e1e <_printf_common+0x8e>
	...

08005e6c <_printf_i>:
 8005e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e70:	7e0f      	ldrb	r7, [r1, #24]
 8005e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e74:	2f78      	cmp	r7, #120	; 0x78
 8005e76:	4691      	mov	r9, r2
 8005e78:	4680      	mov	r8, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e82:	d807      	bhi.n	8005e94 <_printf_i+0x28>
 8005e84:	2f62      	cmp	r7, #98	; 0x62
 8005e86:	d80a      	bhi.n	8005e9e <_printf_i+0x32>
 8005e88:	2f00      	cmp	r7, #0
 8005e8a:	f000 80d4 	beq.w	8006036 <_printf_i+0x1ca>
 8005e8e:	2f58      	cmp	r7, #88	; 0x58
 8005e90:	f000 80c0 	beq.w	8006014 <_printf_i+0x1a8>
 8005e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e9c:	e03a      	b.n	8005f14 <_printf_i+0xa8>
 8005e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ea2:	2b15      	cmp	r3, #21
 8005ea4:	d8f6      	bhi.n	8005e94 <_printf_i+0x28>
 8005ea6:	a101      	add	r1, pc, #4	; (adr r1, 8005eac <_printf_i+0x40>)
 8005ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eac:	08005f05 	.word	0x08005f05
 8005eb0:	08005f19 	.word	0x08005f19
 8005eb4:	08005e95 	.word	0x08005e95
 8005eb8:	08005e95 	.word	0x08005e95
 8005ebc:	08005e95 	.word	0x08005e95
 8005ec0:	08005e95 	.word	0x08005e95
 8005ec4:	08005f19 	.word	0x08005f19
 8005ec8:	08005e95 	.word	0x08005e95
 8005ecc:	08005e95 	.word	0x08005e95
 8005ed0:	08005e95 	.word	0x08005e95
 8005ed4:	08005e95 	.word	0x08005e95
 8005ed8:	0800601d 	.word	0x0800601d
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005fd7 	.word	0x08005fd7
 8005ee4:	08005e95 	.word	0x08005e95
 8005ee8:	08005e95 	.word	0x08005e95
 8005eec:	0800603f 	.word	0x0800603f
 8005ef0:	08005e95 	.word	0x08005e95
 8005ef4:	08005f45 	.word	0x08005f45
 8005ef8:	08005e95 	.word	0x08005e95
 8005efc:	08005e95 	.word	0x08005e95
 8005f00:	08005fdf 	.word	0x08005fdf
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	1d1a      	adds	r2, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f14:	2301      	movs	r3, #1
 8005f16:	e09f      	b.n	8006058 <_printf_i+0x1ec>
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	0607      	lsls	r7, r0, #24
 8005f1e:	f103 0104 	add.w	r1, r3, #4
 8005f22:	6029      	str	r1, [r5, #0]
 8005f24:	d501      	bpl.n	8005f2a <_printf_i+0xbe>
 8005f26:	681e      	ldr	r6, [r3, #0]
 8005f28:	e003      	b.n	8005f32 <_printf_i+0xc6>
 8005f2a:	0646      	lsls	r6, r0, #25
 8005f2c:	d5fb      	bpl.n	8005f26 <_printf_i+0xba>
 8005f2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	da03      	bge.n	8005f3e <_printf_i+0xd2>
 8005f36:	232d      	movs	r3, #45	; 0x2d
 8005f38:	4276      	negs	r6, r6
 8005f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3e:	485a      	ldr	r0, [pc, #360]	; (80060a8 <_printf_i+0x23c>)
 8005f40:	230a      	movs	r3, #10
 8005f42:	e012      	b.n	8005f6a <_printf_i+0xfe>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	6820      	ldr	r0, [r4, #0]
 8005f48:	1d19      	adds	r1, r3, #4
 8005f4a:	6029      	str	r1, [r5, #0]
 8005f4c:	0605      	lsls	r5, r0, #24
 8005f4e:	d501      	bpl.n	8005f54 <_printf_i+0xe8>
 8005f50:	681e      	ldr	r6, [r3, #0]
 8005f52:	e002      	b.n	8005f5a <_printf_i+0xee>
 8005f54:	0641      	lsls	r1, r0, #25
 8005f56:	d5fb      	bpl.n	8005f50 <_printf_i+0xe4>
 8005f58:	881e      	ldrh	r6, [r3, #0]
 8005f5a:	4853      	ldr	r0, [pc, #332]	; (80060a8 <_printf_i+0x23c>)
 8005f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f5e:	bf0c      	ite	eq
 8005f60:	2308      	moveq	r3, #8
 8005f62:	230a      	movne	r3, #10
 8005f64:	2100      	movs	r1, #0
 8005f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f6a:	6865      	ldr	r5, [r4, #4]
 8005f6c:	60a5      	str	r5, [r4, #8]
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	bfa2      	ittt	ge
 8005f72:	6821      	ldrge	r1, [r4, #0]
 8005f74:	f021 0104 	bicge.w	r1, r1, #4
 8005f78:	6021      	strge	r1, [r4, #0]
 8005f7a:	b90e      	cbnz	r6, 8005f80 <_printf_i+0x114>
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	d04b      	beq.n	8006018 <_printf_i+0x1ac>
 8005f80:	4615      	mov	r5, r2
 8005f82:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f86:	fb03 6711 	mls	r7, r3, r1, r6
 8005f8a:	5dc7      	ldrb	r7, [r0, r7]
 8005f8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f90:	4637      	mov	r7, r6
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	460e      	mov	r6, r1
 8005f96:	d9f4      	bls.n	8005f82 <_printf_i+0x116>
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d10b      	bne.n	8005fb4 <_printf_i+0x148>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	07de      	lsls	r6, r3, #31
 8005fa0:	d508      	bpl.n	8005fb4 <_printf_i+0x148>
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	6861      	ldr	r1, [r4, #4]
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	bfde      	ittt	le
 8005faa:	2330      	movle	r3, #48	; 0x30
 8005fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fb4:	1b52      	subs	r2, r2, r5
 8005fb6:	6122      	str	r2, [r4, #16]
 8005fb8:	f8cd a000 	str.w	sl, [sp]
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	aa03      	add	r2, sp, #12
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fee4 	bl	8005d90 <_printf_common>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d14a      	bne.n	8006062 <_printf_i+0x1f6>
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	b004      	add	sp, #16
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f043 0320 	orr.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	4833      	ldr	r0, [pc, #204]	; (80060ac <_printf_i+0x240>)
 8005fe0:	2778      	movs	r7, #120	; 0x78
 8005fe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	6829      	ldr	r1, [r5, #0]
 8005fea:	061f      	lsls	r7, r3, #24
 8005fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ff0:	d402      	bmi.n	8005ff8 <_printf_i+0x18c>
 8005ff2:	065f      	lsls	r7, r3, #25
 8005ff4:	bf48      	it	mi
 8005ff6:	b2b6      	uxthmi	r6, r6
 8005ff8:	07df      	lsls	r7, r3, #31
 8005ffa:	bf48      	it	mi
 8005ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8006000:	6029      	str	r1, [r5, #0]
 8006002:	bf48      	it	mi
 8006004:	6023      	strmi	r3, [r4, #0]
 8006006:	b91e      	cbnz	r6, 8006010 <_printf_i+0x1a4>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f023 0320 	bic.w	r3, r3, #32
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	2310      	movs	r3, #16
 8006012:	e7a7      	b.n	8005f64 <_printf_i+0xf8>
 8006014:	4824      	ldr	r0, [pc, #144]	; (80060a8 <_printf_i+0x23c>)
 8006016:	e7e4      	b.n	8005fe2 <_printf_i+0x176>
 8006018:	4615      	mov	r5, r2
 800601a:	e7bd      	b.n	8005f98 <_printf_i+0x12c>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	6826      	ldr	r6, [r4, #0]
 8006020:	6961      	ldr	r1, [r4, #20]
 8006022:	1d18      	adds	r0, r3, #4
 8006024:	6028      	str	r0, [r5, #0]
 8006026:	0635      	lsls	r5, r6, #24
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	d501      	bpl.n	8006030 <_printf_i+0x1c4>
 800602c:	6019      	str	r1, [r3, #0]
 800602e:	e002      	b.n	8006036 <_printf_i+0x1ca>
 8006030:	0670      	lsls	r0, r6, #25
 8006032:	d5fb      	bpl.n	800602c <_printf_i+0x1c0>
 8006034:	8019      	strh	r1, [r3, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	4615      	mov	r5, r2
 800603c:	e7bc      	b.n	8005fb8 <_printf_i+0x14c>
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	602a      	str	r2, [r5, #0]
 8006044:	681d      	ldr	r5, [r3, #0]
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	2100      	movs	r1, #0
 800604a:	4628      	mov	r0, r5
 800604c:	f7fa f8c0 	bl	80001d0 <memchr>
 8006050:	b108      	cbz	r0, 8006056 <_printf_i+0x1ea>
 8006052:	1b40      	subs	r0, r0, r5
 8006054:	6060      	str	r0, [r4, #4]
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	2300      	movs	r3, #0
 800605c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006060:	e7aa      	b.n	8005fb8 <_printf_i+0x14c>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	462a      	mov	r2, r5
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	47d0      	blx	sl
 800606c:	3001      	adds	r0, #1
 800606e:	d0ad      	beq.n	8005fcc <_printf_i+0x160>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	079b      	lsls	r3, r3, #30
 8006074:	d413      	bmi.n	800609e <_printf_i+0x232>
 8006076:	68e0      	ldr	r0, [r4, #12]
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	4298      	cmp	r0, r3
 800607c:	bfb8      	it	lt
 800607e:	4618      	movlt	r0, r3
 8006080:	e7a6      	b.n	8005fd0 <_printf_i+0x164>
 8006082:	2301      	movs	r3, #1
 8006084:	4632      	mov	r2, r6
 8006086:	4649      	mov	r1, r9
 8006088:	4640      	mov	r0, r8
 800608a:	47d0      	blx	sl
 800608c:	3001      	adds	r0, #1
 800608e:	d09d      	beq.n	8005fcc <_printf_i+0x160>
 8006090:	3501      	adds	r5, #1
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	9903      	ldr	r1, [sp, #12]
 8006096:	1a5b      	subs	r3, r3, r1
 8006098:	42ab      	cmp	r3, r5
 800609a:	dcf2      	bgt.n	8006082 <_printf_i+0x216>
 800609c:	e7eb      	b.n	8006076 <_printf_i+0x20a>
 800609e:	2500      	movs	r5, #0
 80060a0:	f104 0619 	add.w	r6, r4, #25
 80060a4:	e7f5      	b.n	8006092 <_printf_i+0x226>
 80060a6:	bf00      	nop
 80060a8:	08006cf1 	.word	0x08006cf1
 80060ac:	08006d02 	.word	0x08006d02

080060b0 <std>:
 80060b0:	2300      	movs	r3, #0
 80060b2:	b510      	push	{r4, lr}
 80060b4:	4604      	mov	r4, r0
 80060b6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060be:	6083      	str	r3, [r0, #8]
 80060c0:	8181      	strh	r1, [r0, #12]
 80060c2:	6643      	str	r3, [r0, #100]	; 0x64
 80060c4:	81c2      	strh	r2, [r0, #14]
 80060c6:	6183      	str	r3, [r0, #24]
 80060c8:	4619      	mov	r1, r3
 80060ca:	2208      	movs	r2, #8
 80060cc:	305c      	adds	r0, #92	; 0x5c
 80060ce:	f000 faf9 	bl	80066c4 <memset>
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <std+0x38>)
 80060d4:	6263      	str	r3, [r4, #36]	; 0x24
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <std+0x3c>)
 80060d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <std+0x40>)
 80060dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <std+0x44>)
 80060e0:	6224      	str	r4, [r4, #32]
 80060e2:	6323      	str	r3, [r4, #48]	; 0x30
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	bf00      	nop
 80060e8:	08006515 	.word	0x08006515
 80060ec:	08006537 	.word	0x08006537
 80060f0:	0800656f 	.word	0x0800656f
 80060f4:	08006593 	.word	0x08006593

080060f8 <stdio_exit_handler>:
 80060f8:	4a02      	ldr	r2, [pc, #8]	; (8006104 <stdio_exit_handler+0xc>)
 80060fa:	4903      	ldr	r1, [pc, #12]	; (8006108 <stdio_exit_handler+0x10>)
 80060fc:	4803      	ldr	r0, [pc, #12]	; (800610c <stdio_exit_handler+0x14>)
 80060fe:	f000 b895 	b.w	800622c <_fwalk_sglue>
 8006102:	bf00      	nop
 8006104:	2000000c 	.word	0x2000000c
 8006108:	08006ac5 	.word	0x08006ac5
 800610c:	20000018 	.word	0x20000018

08006110 <cleanup_stdio>:
 8006110:	6841      	ldr	r1, [r0, #4]
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <cleanup_stdio+0x34>)
 8006114:	4299      	cmp	r1, r3
 8006116:	b510      	push	{r4, lr}
 8006118:	4604      	mov	r4, r0
 800611a:	d001      	beq.n	8006120 <cleanup_stdio+0x10>
 800611c:	f000 fcd2 	bl	8006ac4 <_fflush_r>
 8006120:	68a1      	ldr	r1, [r4, #8]
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <cleanup_stdio+0x38>)
 8006124:	4299      	cmp	r1, r3
 8006126:	d002      	beq.n	800612e <cleanup_stdio+0x1e>
 8006128:	4620      	mov	r0, r4
 800612a:	f000 fccb 	bl	8006ac4 <_fflush_r>
 800612e:	68e1      	ldr	r1, [r4, #12]
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <cleanup_stdio+0x3c>)
 8006132:	4299      	cmp	r1, r3
 8006134:	d004      	beq.n	8006140 <cleanup_stdio+0x30>
 8006136:	4620      	mov	r0, r4
 8006138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800613c:	f000 bcc2 	b.w	8006ac4 <_fflush_r>
 8006140:	bd10      	pop	{r4, pc}
 8006142:	bf00      	nop
 8006144:	20000bf8 	.word	0x20000bf8
 8006148:	20000c60 	.word	0x20000c60
 800614c:	20000cc8 	.word	0x20000cc8

08006150 <global_stdio_init.part.0>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <global_stdio_init.part.0+0x30>)
 8006154:	4c0b      	ldr	r4, [pc, #44]	; (8006184 <global_stdio_init.part.0+0x34>)
 8006156:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <global_stdio_init.part.0+0x38>)
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	4620      	mov	r0, r4
 800615c:	2200      	movs	r2, #0
 800615e:	2104      	movs	r1, #4
 8006160:	f7ff ffa6 	bl	80060b0 <std>
 8006164:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006168:	2201      	movs	r2, #1
 800616a:	2109      	movs	r1, #9
 800616c:	f7ff ffa0 	bl	80060b0 <std>
 8006170:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006174:	2202      	movs	r2, #2
 8006176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800617a:	2112      	movs	r1, #18
 800617c:	f7ff bf98 	b.w	80060b0 <std>
 8006180:	20000d30 	.word	0x20000d30
 8006184:	20000bf8 	.word	0x20000bf8
 8006188:	080060f9 	.word	0x080060f9

0800618c <__sfp_lock_acquire>:
 800618c:	4801      	ldr	r0, [pc, #4]	; (8006194 <__sfp_lock_acquire+0x8>)
 800618e:	f000 bb11 	b.w	80067b4 <__retarget_lock_acquire_recursive>
 8006192:	bf00      	nop
 8006194:	20000d39 	.word	0x20000d39

08006198 <__sfp_lock_release>:
 8006198:	4801      	ldr	r0, [pc, #4]	; (80061a0 <__sfp_lock_release+0x8>)
 800619a:	f000 bb0c 	b.w	80067b6 <__retarget_lock_release_recursive>
 800619e:	bf00      	nop
 80061a0:	20000d39 	.word	0x20000d39

080061a4 <__sinit>:
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4604      	mov	r4, r0
 80061a8:	f7ff fff0 	bl	800618c <__sfp_lock_acquire>
 80061ac:	6a23      	ldr	r3, [r4, #32]
 80061ae:	b11b      	cbz	r3, 80061b8 <__sinit+0x14>
 80061b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b4:	f7ff bff0 	b.w	8006198 <__sfp_lock_release>
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <__sinit+0x28>)
 80061ba:	6223      	str	r3, [r4, #32]
 80061bc:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <__sinit+0x2c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f5      	bne.n	80061b0 <__sinit+0xc>
 80061c4:	f7ff ffc4 	bl	8006150 <global_stdio_init.part.0>
 80061c8:	e7f2      	b.n	80061b0 <__sinit+0xc>
 80061ca:	bf00      	nop
 80061cc:	08006111 	.word	0x08006111
 80061d0:	20000d30 	.word	0x20000d30

080061d4 <_fputc_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	460e      	mov	r6, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	4605      	mov	r5, r0
 80061dc:	b118      	cbz	r0, 80061e6 <_fputc_r+0x12>
 80061de:	6a03      	ldr	r3, [r0, #32]
 80061e0:	b90b      	cbnz	r3, 80061e6 <_fputc_r+0x12>
 80061e2:	f7ff ffdf 	bl	80061a4 <__sinit>
 80061e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e8:	07d8      	lsls	r0, r3, #31
 80061ea:	d405      	bmi.n	80061f8 <_fputc_r+0x24>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	0599      	lsls	r1, r3, #22
 80061f0:	d402      	bmi.n	80061f8 <_fputc_r+0x24>
 80061f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f4:	f000 fade 	bl	80067b4 <__retarget_lock_acquire_recursive>
 80061f8:	4622      	mov	r2, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	4631      	mov	r1, r6
 80061fe:	f000 f89f 	bl	8006340 <_putc_r>
 8006202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006204:	07da      	lsls	r2, r3, #31
 8006206:	4605      	mov	r5, r0
 8006208:	d405      	bmi.n	8006216 <_fputc_r+0x42>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	059b      	lsls	r3, r3, #22
 800620e:	d402      	bmi.n	8006216 <_fputc_r+0x42>
 8006210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006212:	f000 fad0 	bl	80067b6 <__retarget_lock_release_recursive>
 8006216:	4628      	mov	r0, r5
 8006218:	bd70      	pop	{r4, r5, r6, pc}
	...

0800621c <fputc>:
 800621c:	4b02      	ldr	r3, [pc, #8]	; (8006228 <fputc+0xc>)
 800621e:	460a      	mov	r2, r1
 8006220:	4601      	mov	r1, r0
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	f7ff bfd6 	b.w	80061d4 <_fputc_r>
 8006228:	20000064 	.word	0x20000064

0800622c <_fwalk_sglue>:
 800622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006230:	4607      	mov	r7, r0
 8006232:	4688      	mov	r8, r1
 8006234:	4614      	mov	r4, r2
 8006236:	2600      	movs	r6, #0
 8006238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800623c:	f1b9 0901 	subs.w	r9, r9, #1
 8006240:	d505      	bpl.n	800624e <_fwalk_sglue+0x22>
 8006242:	6824      	ldr	r4, [r4, #0]
 8006244:	2c00      	cmp	r4, #0
 8006246:	d1f7      	bne.n	8006238 <_fwalk_sglue+0xc>
 8006248:	4630      	mov	r0, r6
 800624a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d907      	bls.n	8006264 <_fwalk_sglue+0x38>
 8006254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006258:	3301      	adds	r3, #1
 800625a:	d003      	beq.n	8006264 <_fwalk_sglue+0x38>
 800625c:	4629      	mov	r1, r5
 800625e:	4638      	mov	r0, r7
 8006260:	47c0      	blx	r8
 8006262:	4306      	orrs	r6, r0
 8006264:	3568      	adds	r5, #104	; 0x68
 8006266:	e7e9      	b.n	800623c <_fwalk_sglue+0x10>

08006268 <_fwrite_r>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	9c08      	ldr	r4, [sp, #32]
 800626e:	468a      	mov	sl, r1
 8006270:	4690      	mov	r8, r2
 8006272:	fb02 f903 	mul.w	r9, r2, r3
 8006276:	4606      	mov	r6, r0
 8006278:	b118      	cbz	r0, 8006282 <_fwrite_r+0x1a>
 800627a:	6a03      	ldr	r3, [r0, #32]
 800627c:	b90b      	cbnz	r3, 8006282 <_fwrite_r+0x1a>
 800627e:	f7ff ff91 	bl	80061a4 <__sinit>
 8006282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006284:	07dd      	lsls	r5, r3, #31
 8006286:	d405      	bmi.n	8006294 <_fwrite_r+0x2c>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	0598      	lsls	r0, r3, #22
 800628c:	d402      	bmi.n	8006294 <_fwrite_r+0x2c>
 800628e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006290:	f000 fa90 	bl	80067b4 <__retarget_lock_acquire_recursive>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	0719      	lsls	r1, r3, #28
 8006298:	d516      	bpl.n	80062c8 <_fwrite_r+0x60>
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	b1a3      	cbz	r3, 80062c8 <_fwrite_r+0x60>
 800629e:	2500      	movs	r5, #0
 80062a0:	454d      	cmp	r5, r9
 80062a2:	d01f      	beq.n	80062e4 <_fwrite_r+0x7c>
 80062a4:	68a7      	ldr	r7, [r4, #8]
 80062a6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80062aa:	3f01      	subs	r7, #1
 80062ac:	2f00      	cmp	r7, #0
 80062ae:	60a7      	str	r7, [r4, #8]
 80062b0:	da04      	bge.n	80062bc <_fwrite_r+0x54>
 80062b2:	69a3      	ldr	r3, [r4, #24]
 80062b4:	429f      	cmp	r7, r3
 80062b6:	db0f      	blt.n	80062d8 <_fwrite_r+0x70>
 80062b8:	290a      	cmp	r1, #10
 80062ba:	d00d      	beq.n	80062d8 <_fwrite_r+0x70>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	6022      	str	r2, [r4, #0]
 80062c2:	7019      	strb	r1, [r3, #0]
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7eb      	b.n	80062a0 <_fwrite_r+0x38>
 80062c8:	4621      	mov	r1, r4
 80062ca:	4630      	mov	r0, r6
 80062cc:	f000 f9a2 	bl	8006614 <__swsetup_r>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d0e4      	beq.n	800629e <_fwrite_r+0x36>
 80062d4:	2500      	movs	r5, #0
 80062d6:	e005      	b.n	80062e4 <_fwrite_r+0x7c>
 80062d8:	4622      	mov	r2, r4
 80062da:	4630      	mov	r0, r6
 80062dc:	f000 f95d 	bl	800659a <__swbuf_r>
 80062e0:	3001      	adds	r0, #1
 80062e2:	d1ef      	bne.n	80062c4 <_fwrite_r+0x5c>
 80062e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e6:	07da      	lsls	r2, r3, #31
 80062e8:	d405      	bmi.n	80062f6 <_fwrite_r+0x8e>
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	059b      	lsls	r3, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_fwrite_r+0x8e>
 80062f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f2:	f000 fa60 	bl	80067b6 <__retarget_lock_release_recursive>
 80062f6:	fbb5 f0f8 	udiv	r0, r5, r8
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006300 <fwrite>:
 8006300:	b507      	push	{r0, r1, r2, lr}
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	460a      	mov	r2, r1
 8006308:	4601      	mov	r1, r0
 800630a:	4803      	ldr	r0, [pc, #12]	; (8006318 <fwrite+0x18>)
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f7ff ffab 	bl	8006268 <_fwrite_r>
 8006312:	b003      	add	sp, #12
 8006314:	f85d fb04 	ldr.w	pc, [sp], #4
 8006318:	20000064 	.word	0x20000064

0800631c <iprintf>:
 800631c:	b40f      	push	{r0, r1, r2, r3}
 800631e:	b507      	push	{r0, r1, r2, lr}
 8006320:	4906      	ldr	r1, [pc, #24]	; (800633c <iprintf+0x20>)
 8006322:	ab04      	add	r3, sp, #16
 8006324:	6808      	ldr	r0, [r1, #0]
 8006326:	f853 2b04 	ldr.w	r2, [r3], #4
 800632a:	6881      	ldr	r1, [r0, #8]
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	f7ff fc0b 	bl	8005b48 <_vfiprintf_r>
 8006332:	b003      	add	sp, #12
 8006334:	f85d eb04 	ldr.w	lr, [sp], #4
 8006338:	b004      	add	sp, #16
 800633a:	4770      	bx	lr
 800633c:	20000064 	.word	0x20000064

08006340 <_putc_r>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	460d      	mov	r5, r1
 8006344:	4614      	mov	r4, r2
 8006346:	4606      	mov	r6, r0
 8006348:	b118      	cbz	r0, 8006352 <_putc_r+0x12>
 800634a:	6a03      	ldr	r3, [r0, #32]
 800634c:	b90b      	cbnz	r3, 8006352 <_putc_r+0x12>
 800634e:	f7ff ff29 	bl	80061a4 <__sinit>
 8006352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006354:	07d8      	lsls	r0, r3, #31
 8006356:	d405      	bmi.n	8006364 <_putc_r+0x24>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	0599      	lsls	r1, r3, #22
 800635c:	d402      	bmi.n	8006364 <_putc_r+0x24>
 800635e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006360:	f000 fa28 	bl	80067b4 <__retarget_lock_acquire_recursive>
 8006364:	68a3      	ldr	r3, [r4, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	60a3      	str	r3, [r4, #8]
 800636c:	da05      	bge.n	800637a <_putc_r+0x3a>
 800636e:	69a2      	ldr	r2, [r4, #24]
 8006370:	4293      	cmp	r3, r2
 8006372:	db12      	blt.n	800639a <_putc_r+0x5a>
 8006374:	b2eb      	uxtb	r3, r5
 8006376:	2b0a      	cmp	r3, #10
 8006378:	d00f      	beq.n	800639a <_putc_r+0x5a>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	701d      	strb	r5, [r3, #0]
 8006382:	b2ed      	uxtb	r5, r5
 8006384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006386:	07da      	lsls	r2, r3, #31
 8006388:	d405      	bmi.n	8006396 <_putc_r+0x56>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	059b      	lsls	r3, r3, #22
 800638e:	d402      	bmi.n	8006396 <_putc_r+0x56>
 8006390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006392:	f000 fa10 	bl	80067b6 <__retarget_lock_release_recursive>
 8006396:	4628      	mov	r0, r5
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	4629      	mov	r1, r5
 800639c:	4622      	mov	r2, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f8fb 	bl	800659a <__swbuf_r>
 80063a4:	4605      	mov	r5, r0
 80063a6:	e7ed      	b.n	8006384 <_putc_r+0x44>

080063a8 <setbuf>:
 80063a8:	fab1 f281 	clz	r2, r1
 80063ac:	0952      	lsrs	r2, r2, #5
 80063ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b2:	0052      	lsls	r2, r2, #1
 80063b4:	f000 b800 	b.w	80063b8 <setvbuf>

080063b8 <setvbuf>:
 80063b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063bc:	461d      	mov	r5, r3
 80063be:	4b54      	ldr	r3, [pc, #336]	; (8006510 <setvbuf+0x158>)
 80063c0:	681f      	ldr	r7, [r3, #0]
 80063c2:	4604      	mov	r4, r0
 80063c4:	460e      	mov	r6, r1
 80063c6:	4690      	mov	r8, r2
 80063c8:	b127      	cbz	r7, 80063d4 <setvbuf+0x1c>
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	b913      	cbnz	r3, 80063d4 <setvbuf+0x1c>
 80063ce:	4638      	mov	r0, r7
 80063d0:	f7ff fee8 	bl	80061a4 <__sinit>
 80063d4:	f1b8 0f02 	cmp.w	r8, #2
 80063d8:	d006      	beq.n	80063e8 <setvbuf+0x30>
 80063da:	f1b8 0f01 	cmp.w	r8, #1
 80063de:	f200 8094 	bhi.w	800650a <setvbuf+0x152>
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	f2c0 8091 	blt.w	800650a <setvbuf+0x152>
 80063e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063ea:	07da      	lsls	r2, r3, #31
 80063ec:	d405      	bmi.n	80063fa <setvbuf+0x42>
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	059b      	lsls	r3, r3, #22
 80063f2:	d402      	bmi.n	80063fa <setvbuf+0x42>
 80063f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063f6:	f000 f9dd 	bl	80067b4 <__retarget_lock_acquire_recursive>
 80063fa:	4621      	mov	r1, r4
 80063fc:	4638      	mov	r0, r7
 80063fe:	f000 fb61 	bl	8006ac4 <_fflush_r>
 8006402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006404:	b141      	cbz	r1, 8006418 <setvbuf+0x60>
 8006406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800640a:	4299      	cmp	r1, r3
 800640c:	d002      	beq.n	8006414 <setvbuf+0x5c>
 800640e:	4638      	mov	r0, r7
 8006410:	f000 f9d2 	bl	80067b8 <_free_r>
 8006414:	2300      	movs	r3, #0
 8006416:	6363      	str	r3, [r4, #52]	; 0x34
 8006418:	2300      	movs	r3, #0
 800641a:	61a3      	str	r3, [r4, #24]
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	0618      	lsls	r0, r3, #24
 8006422:	d503      	bpl.n	800642c <setvbuf+0x74>
 8006424:	6921      	ldr	r1, [r4, #16]
 8006426:	4638      	mov	r0, r7
 8006428:	f000 f9c6 	bl	80067b8 <_free_r>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	f1b8 0f02 	cmp.w	r8, #2
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	d05f      	beq.n	80064fe <setvbuf+0x146>
 800643e:	ab01      	add	r3, sp, #4
 8006440:	466a      	mov	r2, sp
 8006442:	4621      	mov	r1, r4
 8006444:	4638      	mov	r0, r7
 8006446:	f000 fb65 	bl	8006b14 <__swhatbuf_r>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	4318      	orrs	r0, r3
 800644e:	81a0      	strh	r0, [r4, #12]
 8006450:	bb2d      	cbnz	r5, 800649e <setvbuf+0xe6>
 8006452:	9d00      	ldr	r5, [sp, #0]
 8006454:	4628      	mov	r0, r5
 8006456:	f000 f9fb 	bl	8006850 <malloc>
 800645a:	4606      	mov	r6, r0
 800645c:	2800      	cmp	r0, #0
 800645e:	d150      	bne.n	8006502 <setvbuf+0x14a>
 8006460:	f8dd 9000 	ldr.w	r9, [sp]
 8006464:	45a9      	cmp	r9, r5
 8006466:	d13e      	bne.n	80064e6 <setvbuf+0x12e>
 8006468:	f04f 35ff 	mov.w	r5, #4294967295
 800646c:	2200      	movs	r2, #0
 800646e:	60a2      	str	r2, [r4, #8]
 8006470:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006474:	6022      	str	r2, [r4, #0]
 8006476:	6122      	str	r2, [r4, #16]
 8006478:	2201      	movs	r2, #1
 800647a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647e:	6162      	str	r2, [r4, #20]
 8006480:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006482:	f043 0302 	orr.w	r3, r3, #2
 8006486:	07d1      	lsls	r1, r2, #31
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	d404      	bmi.n	8006496 <setvbuf+0xde>
 800648c:	059b      	lsls	r3, r3, #22
 800648e:	d402      	bmi.n	8006496 <setvbuf+0xde>
 8006490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006492:	f000 f990 	bl	80067b6 <__retarget_lock_release_recursive>
 8006496:	4628      	mov	r0, r5
 8006498:	b003      	add	sp, #12
 800649a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d0d8      	beq.n	8006454 <setvbuf+0x9c>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	b913      	cbnz	r3, 80064ac <setvbuf+0xf4>
 80064a6:	4638      	mov	r0, r7
 80064a8:	f7ff fe7c 	bl	80061a4 <__sinit>
 80064ac:	f1b8 0f01 	cmp.w	r8, #1
 80064b0:	bf08      	it	eq
 80064b2:	89a3      	ldrheq	r3, [r4, #12]
 80064b4:	6026      	str	r6, [r4, #0]
 80064b6:	bf04      	itt	eq
 80064b8:	f043 0301 	orreq.w	r3, r3, #1
 80064bc:	81a3      	strheq	r3, [r4, #12]
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f013 0208 	ands.w	r2, r3, #8
 80064c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80064c8:	d01d      	beq.n	8006506 <setvbuf+0x14e>
 80064ca:	07da      	lsls	r2, r3, #31
 80064cc:	bf41      	itttt	mi
 80064ce:	2200      	movmi	r2, #0
 80064d0:	426d      	negmi	r5, r5
 80064d2:	60a2      	strmi	r2, [r4, #8]
 80064d4:	61a5      	strmi	r5, [r4, #24]
 80064d6:	bf58      	it	pl
 80064d8:	60a5      	strpl	r5, [r4, #8]
 80064da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80064dc:	f015 0501 	ands.w	r5, r5, #1
 80064e0:	d0d4      	beq.n	800648c <setvbuf+0xd4>
 80064e2:	2500      	movs	r5, #0
 80064e4:	e7d7      	b.n	8006496 <setvbuf+0xde>
 80064e6:	4648      	mov	r0, r9
 80064e8:	f000 f9b2 	bl	8006850 <malloc>
 80064ec:	4606      	mov	r6, r0
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d0ba      	beq.n	8006468 <setvbuf+0xb0>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	464d      	mov	r5, r9
 80064fc:	e7d1      	b.n	80064a2 <setvbuf+0xea>
 80064fe:	2500      	movs	r5, #0
 8006500:	e7b4      	b.n	800646c <setvbuf+0xb4>
 8006502:	46a9      	mov	r9, r5
 8006504:	e7f5      	b.n	80064f2 <setvbuf+0x13a>
 8006506:	60a2      	str	r2, [r4, #8]
 8006508:	e7e7      	b.n	80064da <setvbuf+0x122>
 800650a:	f04f 35ff 	mov.w	r5, #4294967295
 800650e:	e7c2      	b.n	8006496 <setvbuf+0xde>
 8006510:	20000064 	.word	0x20000064

08006514 <__sread>:
 8006514:	b510      	push	{r4, lr}
 8006516:	460c      	mov	r4, r1
 8006518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651c:	f000 f8fc 	bl	8006718 <_read_r>
 8006520:	2800      	cmp	r0, #0
 8006522:	bfab      	itete	ge
 8006524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006526:	89a3      	ldrhlt	r3, [r4, #12]
 8006528:	181b      	addge	r3, r3, r0
 800652a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800652e:	bfac      	ite	ge
 8006530:	6563      	strge	r3, [r4, #84]	; 0x54
 8006532:	81a3      	strhlt	r3, [r4, #12]
 8006534:	bd10      	pop	{r4, pc}

08006536 <__swrite>:
 8006536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	461f      	mov	r7, r3
 800653c:	898b      	ldrh	r3, [r1, #12]
 800653e:	05db      	lsls	r3, r3, #23
 8006540:	4605      	mov	r5, r0
 8006542:	460c      	mov	r4, r1
 8006544:	4616      	mov	r6, r2
 8006546:	d505      	bpl.n	8006554 <__swrite+0x1e>
 8006548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654c:	2302      	movs	r3, #2
 800654e:	2200      	movs	r2, #0
 8006550:	f000 f8d0 	bl	80066f4 <_lseek_r>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800655a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	4632      	mov	r2, r6
 8006562:	463b      	mov	r3, r7
 8006564:	4628      	mov	r0, r5
 8006566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800656a:	f000 b8e7 	b.w	800673c <_write_r>

0800656e <__sseek>:
 800656e:	b510      	push	{r4, lr}
 8006570:	460c      	mov	r4, r1
 8006572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006576:	f000 f8bd 	bl	80066f4 <_lseek_r>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	bf15      	itete	ne
 8006580:	6560      	strne	r0, [r4, #84]	; 0x54
 8006582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800658a:	81a3      	strheq	r3, [r4, #12]
 800658c:	bf18      	it	ne
 800658e:	81a3      	strhne	r3, [r4, #12]
 8006590:	bd10      	pop	{r4, pc}

08006592 <__sclose>:
 8006592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006596:	f000 b89d 	b.w	80066d4 <_close_r>

0800659a <__swbuf_r>:
 800659a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659c:	460e      	mov	r6, r1
 800659e:	4614      	mov	r4, r2
 80065a0:	4605      	mov	r5, r0
 80065a2:	b118      	cbz	r0, 80065ac <__swbuf_r+0x12>
 80065a4:	6a03      	ldr	r3, [r0, #32]
 80065a6:	b90b      	cbnz	r3, 80065ac <__swbuf_r+0x12>
 80065a8:	f7ff fdfc 	bl	80061a4 <__sinit>
 80065ac:	69a3      	ldr	r3, [r4, #24]
 80065ae:	60a3      	str	r3, [r4, #8]
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	071a      	lsls	r2, r3, #28
 80065b4:	d525      	bpl.n	8006602 <__swbuf_r+0x68>
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	b31b      	cbz	r3, 8006602 <__swbuf_r+0x68>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	6922      	ldr	r2, [r4, #16]
 80065be:	1a98      	subs	r0, r3, r2
 80065c0:	6963      	ldr	r3, [r4, #20]
 80065c2:	b2f6      	uxtb	r6, r6
 80065c4:	4283      	cmp	r3, r0
 80065c6:	4637      	mov	r7, r6
 80065c8:	dc04      	bgt.n	80065d4 <__swbuf_r+0x3a>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 fa79 	bl	8006ac4 <_fflush_r>
 80065d2:	b9e0      	cbnz	r0, 800660e <__swbuf_r+0x74>
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	60a3      	str	r3, [r4, #8]
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	701e      	strb	r6, [r3, #0]
 80065e2:	6962      	ldr	r2, [r4, #20]
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d004      	beq.n	80065f4 <__swbuf_r+0x5a>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d506      	bpl.n	80065fe <__swbuf_r+0x64>
 80065f0:	2e0a      	cmp	r6, #10
 80065f2:	d104      	bne.n	80065fe <__swbuf_r+0x64>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 fa64 	bl	8006ac4 <_fflush_r>
 80065fc:	b938      	cbnz	r0, 800660e <__swbuf_r+0x74>
 80065fe:	4638      	mov	r0, r7
 8006600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f805 	bl	8006614 <__swsetup_r>
 800660a:	2800      	cmp	r0, #0
 800660c:	d0d5      	beq.n	80065ba <__swbuf_r+0x20>
 800660e:	f04f 37ff 	mov.w	r7, #4294967295
 8006612:	e7f4      	b.n	80065fe <__swbuf_r+0x64>

08006614 <__swsetup_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4b2a      	ldr	r3, [pc, #168]	; (80066c0 <__swsetup_r+0xac>)
 8006618:	4605      	mov	r5, r0
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	460c      	mov	r4, r1
 800661e:	b118      	cbz	r0, 8006628 <__swsetup_r+0x14>
 8006620:	6a03      	ldr	r3, [r0, #32]
 8006622:	b90b      	cbnz	r3, 8006628 <__swsetup_r+0x14>
 8006624:	f7ff fdbe 	bl	80061a4 <__sinit>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800662e:	0718      	lsls	r0, r3, #28
 8006630:	d422      	bmi.n	8006678 <__swsetup_r+0x64>
 8006632:	06d9      	lsls	r1, r3, #27
 8006634:	d407      	bmi.n	8006646 <__swsetup_r+0x32>
 8006636:	2309      	movs	r3, #9
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e034      	b.n	80066b0 <__swsetup_r+0x9c>
 8006646:	0758      	lsls	r0, r3, #29
 8006648:	d512      	bpl.n	8006670 <__swsetup_r+0x5c>
 800664a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800664c:	b141      	cbz	r1, 8006660 <__swsetup_r+0x4c>
 800664e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006652:	4299      	cmp	r1, r3
 8006654:	d002      	beq.n	800665c <__swsetup_r+0x48>
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f8ae 	bl	80067b8 <_free_r>
 800665c:	2300      	movs	r3, #0
 800665e:	6363      	str	r3, [r4, #52]	; 0x34
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	2300      	movs	r3, #0
 800666a:	6063      	str	r3, [r4, #4]
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f043 0308 	orr.w	r3, r3, #8
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	b94b      	cbnz	r3, 8006690 <__swsetup_r+0x7c>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006686:	d003      	beq.n	8006690 <__swsetup_r+0x7c>
 8006688:	4621      	mov	r1, r4
 800668a:	4628      	mov	r0, r5
 800668c:	f000 fa68 	bl	8006b60 <__smakebuf_r>
 8006690:	89a0      	ldrh	r0, [r4, #12]
 8006692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006696:	f010 0301 	ands.w	r3, r0, #1
 800669a:	d00a      	beq.n	80066b2 <__swsetup_r+0x9e>
 800669c:	2300      	movs	r3, #0
 800669e:	60a3      	str	r3, [r4, #8]
 80066a0:	6963      	ldr	r3, [r4, #20]
 80066a2:	425b      	negs	r3, r3
 80066a4:	61a3      	str	r3, [r4, #24]
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	b943      	cbnz	r3, 80066bc <__swsetup_r+0xa8>
 80066aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066ae:	d1c4      	bne.n	800663a <__swsetup_r+0x26>
 80066b0:	bd38      	pop	{r3, r4, r5, pc}
 80066b2:	0781      	lsls	r1, r0, #30
 80066b4:	bf58      	it	pl
 80066b6:	6963      	ldrpl	r3, [r4, #20]
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	e7f4      	b.n	80066a6 <__swsetup_r+0x92>
 80066bc:	2000      	movs	r0, #0
 80066be:	e7f7      	b.n	80066b0 <__swsetup_r+0x9c>
 80066c0:	20000064 	.word	0x20000064

080066c4 <memset>:
 80066c4:	4402      	add	r2, r0
 80066c6:	4603      	mov	r3, r0
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d100      	bne.n	80066ce <memset+0xa>
 80066cc:	4770      	bx	lr
 80066ce:	f803 1b01 	strb.w	r1, [r3], #1
 80066d2:	e7f9      	b.n	80066c8 <memset+0x4>

080066d4 <_close_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d06      	ldr	r5, [pc, #24]	; (80066f0 <_close_r+0x1c>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fa ff0f 	bl	8001502 <_close>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_close_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_close_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000d34 	.word	0x20000d34

080066f4 <_lseek_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d07      	ldr	r5, [pc, #28]	; (8006714 <_lseek_r+0x20>)
 80066f8:	4604      	mov	r4, r0
 80066fa:	4608      	mov	r0, r1
 80066fc:	4611      	mov	r1, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	602a      	str	r2, [r5, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f7fa ff24 	bl	8001550 <_lseek>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_lseek_r+0x1e>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_lseek_r+0x1e>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	20000d34 	.word	0x20000d34

08006718 <_read_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	; (8006738 <_read_r+0x20>)
 800671c:	4604      	mov	r4, r0
 800671e:	4608      	mov	r0, r1
 8006720:	4611      	mov	r1, r2
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f7fa feb2 	bl	8001490 <_read>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_read_r+0x1e>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_read_r+0x1e>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20000d34 	.word	0x20000d34

0800673c <_write_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	; (800675c <_write_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7fa febd 	bl	80014ca <_write>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_write_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_write_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000d34 	.word	0x20000d34

08006760 <__errno>:
 8006760:	4b01      	ldr	r3, [pc, #4]	; (8006768 <__errno+0x8>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000064 	.word	0x20000064

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f000 fa5c 	bl	8006c3c <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	08006d1c 	.word	0x08006d1c
 80067a8:	08006d1c 	.word	0x08006d1c
 80067ac:	08006d1c 	.word	0x08006d1c
 80067b0:	08006d20 	.word	0x08006d20

080067b4 <__retarget_lock_acquire_recursive>:
 80067b4:	4770      	bx	lr

080067b6 <__retarget_lock_release_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <_free_r>:
 80067b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ba:	2900      	cmp	r1, #0
 80067bc:	d044      	beq.n	8006848 <_free_r+0x90>
 80067be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c2:	9001      	str	r0, [sp, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f1a1 0404 	sub.w	r4, r1, #4
 80067ca:	bfb8      	it	lt
 80067cc:	18e4      	addlt	r4, r4, r3
 80067ce:	f000 f8e7 	bl	80069a0 <__malloc_lock>
 80067d2:	4a1e      	ldr	r2, [pc, #120]	; (800684c <_free_r+0x94>)
 80067d4:	9801      	ldr	r0, [sp, #4]
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	b933      	cbnz	r3, 80067e8 <_free_r+0x30>
 80067da:	6063      	str	r3, [r4, #4]
 80067dc:	6014      	str	r4, [r2, #0]
 80067de:	b003      	add	sp, #12
 80067e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067e4:	f000 b8e2 	b.w	80069ac <__malloc_unlock>
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d908      	bls.n	80067fe <_free_r+0x46>
 80067ec:	6825      	ldr	r5, [r4, #0]
 80067ee:	1961      	adds	r1, r4, r5
 80067f0:	428b      	cmp	r3, r1
 80067f2:	bf01      	itttt	eq
 80067f4:	6819      	ldreq	r1, [r3, #0]
 80067f6:	685b      	ldreq	r3, [r3, #4]
 80067f8:	1949      	addeq	r1, r1, r5
 80067fa:	6021      	streq	r1, [r4, #0]
 80067fc:	e7ed      	b.n	80067da <_free_r+0x22>
 80067fe:	461a      	mov	r2, r3
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	b10b      	cbz	r3, 8006808 <_free_r+0x50>
 8006804:	42a3      	cmp	r3, r4
 8006806:	d9fa      	bls.n	80067fe <_free_r+0x46>
 8006808:	6811      	ldr	r1, [r2, #0]
 800680a:	1855      	adds	r5, r2, r1
 800680c:	42a5      	cmp	r5, r4
 800680e:	d10b      	bne.n	8006828 <_free_r+0x70>
 8006810:	6824      	ldr	r4, [r4, #0]
 8006812:	4421      	add	r1, r4
 8006814:	1854      	adds	r4, r2, r1
 8006816:	42a3      	cmp	r3, r4
 8006818:	6011      	str	r1, [r2, #0]
 800681a:	d1e0      	bne.n	80067de <_free_r+0x26>
 800681c:	681c      	ldr	r4, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	6053      	str	r3, [r2, #4]
 8006822:	440c      	add	r4, r1
 8006824:	6014      	str	r4, [r2, #0]
 8006826:	e7da      	b.n	80067de <_free_r+0x26>
 8006828:	d902      	bls.n	8006830 <_free_r+0x78>
 800682a:	230c      	movs	r3, #12
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	e7d6      	b.n	80067de <_free_r+0x26>
 8006830:	6825      	ldr	r5, [r4, #0]
 8006832:	1961      	adds	r1, r4, r5
 8006834:	428b      	cmp	r3, r1
 8006836:	bf04      	itt	eq
 8006838:	6819      	ldreq	r1, [r3, #0]
 800683a:	685b      	ldreq	r3, [r3, #4]
 800683c:	6063      	str	r3, [r4, #4]
 800683e:	bf04      	itt	eq
 8006840:	1949      	addeq	r1, r1, r5
 8006842:	6021      	streq	r1, [r4, #0]
 8006844:	6054      	str	r4, [r2, #4]
 8006846:	e7ca      	b.n	80067de <_free_r+0x26>
 8006848:	b003      	add	sp, #12
 800684a:	bd30      	pop	{r4, r5, pc}
 800684c:	20000d3c 	.word	0x20000d3c

08006850 <malloc>:
 8006850:	4b02      	ldr	r3, [pc, #8]	; (800685c <malloc+0xc>)
 8006852:	4601      	mov	r1, r0
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	f000 b823 	b.w	80068a0 <_malloc_r>
 800685a:	bf00      	nop
 800685c:	20000064 	.word	0x20000064

08006860 <sbrk_aligned>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4e0e      	ldr	r6, [pc, #56]	; (800689c <sbrk_aligned+0x3c>)
 8006864:	460c      	mov	r4, r1
 8006866:	6831      	ldr	r1, [r6, #0]
 8006868:	4605      	mov	r5, r0
 800686a:	b911      	cbnz	r1, 8006872 <sbrk_aligned+0x12>
 800686c:	f000 f9d6 	bl	8006c1c <_sbrk_r>
 8006870:	6030      	str	r0, [r6, #0]
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 f9d1 	bl	8006c1c <_sbrk_r>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d00a      	beq.n	8006894 <sbrk_aligned+0x34>
 800687e:	1cc4      	adds	r4, r0, #3
 8006880:	f024 0403 	bic.w	r4, r4, #3
 8006884:	42a0      	cmp	r0, r4
 8006886:	d007      	beq.n	8006898 <sbrk_aligned+0x38>
 8006888:	1a21      	subs	r1, r4, r0
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f9c6 	bl	8006c1c <_sbrk_r>
 8006890:	3001      	adds	r0, #1
 8006892:	d101      	bne.n	8006898 <sbrk_aligned+0x38>
 8006894:	f04f 34ff 	mov.w	r4, #4294967295
 8006898:	4620      	mov	r0, r4
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	20000d40 	.word	0x20000d40

080068a0 <_malloc_r>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	1ccd      	adds	r5, r1, #3
 80068a6:	f025 0503 	bic.w	r5, r5, #3
 80068aa:	3508      	adds	r5, #8
 80068ac:	2d0c      	cmp	r5, #12
 80068ae:	bf38      	it	cc
 80068b0:	250c      	movcc	r5, #12
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	4607      	mov	r7, r0
 80068b6:	db01      	blt.n	80068bc <_malloc_r+0x1c>
 80068b8:	42a9      	cmp	r1, r5
 80068ba:	d905      	bls.n	80068c8 <_malloc_r+0x28>
 80068bc:	230c      	movs	r3, #12
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	2600      	movs	r6, #0
 80068c2:	4630      	mov	r0, r6
 80068c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800699c <_malloc_r+0xfc>
 80068cc:	f000 f868 	bl	80069a0 <__malloc_lock>
 80068d0:	f8d8 3000 	ldr.w	r3, [r8]
 80068d4:	461c      	mov	r4, r3
 80068d6:	bb5c      	cbnz	r4, 8006930 <_malloc_r+0x90>
 80068d8:	4629      	mov	r1, r5
 80068da:	4638      	mov	r0, r7
 80068dc:	f7ff ffc0 	bl	8006860 <sbrk_aligned>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	4604      	mov	r4, r0
 80068e4:	d155      	bne.n	8006992 <_malloc_r+0xf2>
 80068e6:	f8d8 4000 	ldr.w	r4, [r8]
 80068ea:	4626      	mov	r6, r4
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	d145      	bne.n	800697c <_malloc_r+0xdc>
 80068f0:	2c00      	cmp	r4, #0
 80068f2:	d048      	beq.n	8006986 <_malloc_r+0xe6>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	4631      	mov	r1, r6
 80068f8:	4638      	mov	r0, r7
 80068fa:	eb04 0903 	add.w	r9, r4, r3
 80068fe:	f000 f98d 	bl	8006c1c <_sbrk_r>
 8006902:	4581      	cmp	r9, r0
 8006904:	d13f      	bne.n	8006986 <_malloc_r+0xe6>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	1a6d      	subs	r5, r5, r1
 800690a:	4629      	mov	r1, r5
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff ffa7 	bl	8006860 <sbrk_aligned>
 8006912:	3001      	adds	r0, #1
 8006914:	d037      	beq.n	8006986 <_malloc_r+0xe6>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	442b      	add	r3, r5
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	f8d8 3000 	ldr.w	r3, [r8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d038      	beq.n	8006996 <_malloc_r+0xf6>
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	42a2      	cmp	r2, r4
 8006928:	d12b      	bne.n	8006982 <_malloc_r+0xe2>
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	e00f      	b.n	8006950 <_malloc_r+0xb0>
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	1b52      	subs	r2, r2, r5
 8006934:	d41f      	bmi.n	8006976 <_malloc_r+0xd6>
 8006936:	2a0b      	cmp	r2, #11
 8006938:	d917      	bls.n	800696a <_malloc_r+0xca>
 800693a:	1961      	adds	r1, r4, r5
 800693c:	42a3      	cmp	r3, r4
 800693e:	6025      	str	r5, [r4, #0]
 8006940:	bf18      	it	ne
 8006942:	6059      	strne	r1, [r3, #4]
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	bf08      	it	eq
 8006948:	f8c8 1000 	streq.w	r1, [r8]
 800694c:	5162      	str	r2, [r4, r5]
 800694e:	604b      	str	r3, [r1, #4]
 8006950:	4638      	mov	r0, r7
 8006952:	f104 060b 	add.w	r6, r4, #11
 8006956:	f000 f829 	bl	80069ac <__malloc_unlock>
 800695a:	f026 0607 	bic.w	r6, r6, #7
 800695e:	1d23      	adds	r3, r4, #4
 8006960:	1af2      	subs	r2, r6, r3
 8006962:	d0ae      	beq.n	80068c2 <_malloc_r+0x22>
 8006964:	1b9b      	subs	r3, r3, r6
 8006966:	50a3      	str	r3, [r4, r2]
 8006968:	e7ab      	b.n	80068c2 <_malloc_r+0x22>
 800696a:	42a3      	cmp	r3, r4
 800696c:	6862      	ldr	r2, [r4, #4]
 800696e:	d1dd      	bne.n	800692c <_malloc_r+0x8c>
 8006970:	f8c8 2000 	str.w	r2, [r8]
 8006974:	e7ec      	b.n	8006950 <_malloc_r+0xb0>
 8006976:	4623      	mov	r3, r4
 8006978:	6864      	ldr	r4, [r4, #4]
 800697a:	e7ac      	b.n	80068d6 <_malloc_r+0x36>
 800697c:	4634      	mov	r4, r6
 800697e:	6876      	ldr	r6, [r6, #4]
 8006980:	e7b4      	b.n	80068ec <_malloc_r+0x4c>
 8006982:	4613      	mov	r3, r2
 8006984:	e7cc      	b.n	8006920 <_malloc_r+0x80>
 8006986:	230c      	movs	r3, #12
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	4638      	mov	r0, r7
 800698c:	f000 f80e 	bl	80069ac <__malloc_unlock>
 8006990:	e797      	b.n	80068c2 <_malloc_r+0x22>
 8006992:	6025      	str	r5, [r4, #0]
 8006994:	e7dc      	b.n	8006950 <_malloc_r+0xb0>
 8006996:	605b      	str	r3, [r3, #4]
 8006998:	deff      	udf	#255	; 0xff
 800699a:	bf00      	nop
 800699c:	20000d3c 	.word	0x20000d3c

080069a0 <__malloc_lock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_lock+0x8>)
 80069a2:	f7ff bf07 	b.w	80067b4 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	20000d38 	.word	0x20000d38

080069ac <__malloc_unlock>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__malloc_unlock+0x8>)
 80069ae:	f7ff bf02 	b.w	80067b6 <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	20000d38 	.word	0x20000d38

080069b8 <__sflush_r>:
 80069b8:	898a      	ldrh	r2, [r1, #12]
 80069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	0710      	lsls	r0, r2, #28
 80069c2:	460c      	mov	r4, r1
 80069c4:	d458      	bmi.n	8006a78 <__sflush_r+0xc0>
 80069c6:	684b      	ldr	r3, [r1, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dc05      	bgt.n	80069d8 <__sflush_r+0x20>
 80069cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dc02      	bgt.n	80069d8 <__sflush_r+0x20>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d0f9      	beq.n	80069d2 <__sflush_r+0x1a>
 80069de:	2300      	movs	r3, #0
 80069e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069e4:	682f      	ldr	r7, [r5, #0]
 80069e6:	6a21      	ldr	r1, [r4, #32]
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	d032      	beq.n	8006a52 <__sflush_r+0x9a>
 80069ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	075a      	lsls	r2, r3, #29
 80069f2:	d505      	bpl.n	8006a00 <__sflush_r+0x48>
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	1ac0      	subs	r0, r0, r3
 80069f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069fa:	b10b      	cbz	r3, 8006a00 <__sflush_r+0x48>
 80069fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069fe:	1ac0      	subs	r0, r0, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	4602      	mov	r2, r0
 8006a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a06:	6a21      	ldr	r1, [r4, #32]
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b0      	blx	r6
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	d106      	bne.n	8006a20 <__sflush_r+0x68>
 8006a12:	6829      	ldr	r1, [r5, #0]
 8006a14:	291d      	cmp	r1, #29
 8006a16:	d82b      	bhi.n	8006a70 <__sflush_r+0xb8>
 8006a18:	4a29      	ldr	r2, [pc, #164]	; (8006ac0 <__sflush_r+0x108>)
 8006a1a:	410a      	asrs	r2, r1
 8006a1c:	07d6      	lsls	r6, r2, #31
 8006a1e:	d427      	bmi.n	8006a70 <__sflush_r+0xb8>
 8006a20:	2200      	movs	r2, #0
 8006a22:	6062      	str	r2, [r4, #4]
 8006a24:	04d9      	lsls	r1, r3, #19
 8006a26:	6922      	ldr	r2, [r4, #16]
 8006a28:	6022      	str	r2, [r4, #0]
 8006a2a:	d504      	bpl.n	8006a36 <__sflush_r+0x7e>
 8006a2c:	1c42      	adds	r2, r0, #1
 8006a2e:	d101      	bne.n	8006a34 <__sflush_r+0x7c>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b903      	cbnz	r3, 8006a36 <__sflush_r+0x7e>
 8006a34:	6560      	str	r0, [r4, #84]	; 0x54
 8006a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a38:	602f      	str	r7, [r5, #0]
 8006a3a:	2900      	cmp	r1, #0
 8006a3c:	d0c9      	beq.n	80069d2 <__sflush_r+0x1a>
 8006a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a42:	4299      	cmp	r1, r3
 8006a44:	d002      	beq.n	8006a4c <__sflush_r+0x94>
 8006a46:	4628      	mov	r0, r5
 8006a48:	f7ff feb6 	bl	80067b8 <_free_r>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8006a50:	e7c0      	b.n	80069d4 <__sflush_r+0x1c>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b0      	blx	r6
 8006a58:	1c41      	adds	r1, r0, #1
 8006a5a:	d1c8      	bne.n	80069ee <__sflush_r+0x36>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0c5      	beq.n	80069ee <__sflush_r+0x36>
 8006a62:	2b1d      	cmp	r3, #29
 8006a64:	d001      	beq.n	8006a6a <__sflush_r+0xb2>
 8006a66:	2b16      	cmp	r3, #22
 8006a68:	d101      	bne.n	8006a6e <__sflush_r+0xb6>
 8006a6a:	602f      	str	r7, [r5, #0]
 8006a6c:	e7b1      	b.n	80069d2 <__sflush_r+0x1a>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	e7ad      	b.n	80069d4 <__sflush_r+0x1c>
 8006a78:	690f      	ldr	r7, [r1, #16]
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	d0a9      	beq.n	80069d2 <__sflush_r+0x1a>
 8006a7e:	0793      	lsls	r3, r2, #30
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	bf08      	it	eq
 8006a84:	694b      	ldreq	r3, [r1, #20]
 8006a86:	600f      	str	r7, [r1, #0]
 8006a88:	bf18      	it	ne
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	eba6 0807 	sub.w	r8, r6, r7
 8006a90:	608b      	str	r3, [r1, #8]
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	dd9c      	ble.n	80069d2 <__sflush_r+0x1a>
 8006a98:	6a21      	ldr	r1, [r4, #32]
 8006a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a9c:	4643      	mov	r3, r8
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b0      	blx	r6
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dc06      	bgt.n	8006ab6 <__sflush_r+0xfe>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e78e      	b.n	80069d4 <__sflush_r+0x1c>
 8006ab6:	4407      	add	r7, r0
 8006ab8:	eba8 0800 	sub.w	r8, r8, r0
 8006abc:	e7e9      	b.n	8006a92 <__sflush_r+0xda>
 8006abe:	bf00      	nop
 8006ac0:	dfbffffe 	.word	0xdfbffffe

08006ac4 <_fflush_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b913      	cbnz	r3, 8006ad4 <_fflush_r+0x10>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	b118      	cbz	r0, 8006ade <_fflush_r+0x1a>
 8006ad6:	6a03      	ldr	r3, [r0, #32]
 8006ad8:	b90b      	cbnz	r3, 8006ade <_fflush_r+0x1a>
 8006ada:	f7ff fb63 	bl	80061a4 <__sinit>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f3      	beq.n	8006ace <_fflush_r+0xa>
 8006ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae8:	07d0      	lsls	r0, r2, #31
 8006aea:	d404      	bmi.n	8006af6 <_fflush_r+0x32>
 8006aec:	0599      	lsls	r1, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_fflush_r+0x32>
 8006af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af2:	f7ff fe5f 	bl	80067b4 <__retarget_lock_acquire_recursive>
 8006af6:	4628      	mov	r0, r5
 8006af8:	4621      	mov	r1, r4
 8006afa:	f7ff ff5d 	bl	80069b8 <__sflush_r>
 8006afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b00:	07da      	lsls	r2, r3, #31
 8006b02:	4605      	mov	r5, r0
 8006b04:	d4e4      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	059b      	lsls	r3, r3, #22
 8006b0a:	d4e1      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0e:	f7ff fe52 	bl	80067b6 <__retarget_lock_release_recursive>
 8006b12:	e7dd      	b.n	8006ad0 <_fflush_r+0xc>

08006b14 <__swhatbuf_r>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	460c      	mov	r4, r1
 8006b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	b096      	sub	sp, #88	; 0x58
 8006b20:	4615      	mov	r5, r2
 8006b22:	461e      	mov	r6, r3
 8006b24:	da0d      	bge.n	8006b42 <__swhatbuf_r+0x2e>
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b2c:	f04f 0100 	mov.w	r1, #0
 8006b30:	bf0c      	ite	eq
 8006b32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b36:	2340      	movne	r3, #64	; 0x40
 8006b38:	2000      	movs	r0, #0
 8006b3a:	6031      	str	r1, [r6, #0]
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	b016      	add	sp, #88	; 0x58
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
 8006b42:	466a      	mov	r2, sp
 8006b44:	f000 f848 	bl	8006bd8 <_fstat_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dbec      	blt.n	8006b26 <__swhatbuf_r+0x12>
 8006b4c:	9901      	ldr	r1, [sp, #4]
 8006b4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b56:	4259      	negs	r1, r3
 8006b58:	4159      	adcs	r1, r3
 8006b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b5e:	e7eb      	b.n	8006b38 <__swhatbuf_r+0x24>

08006b60 <__smakebuf_r>:
 8006b60:	898b      	ldrh	r3, [r1, #12]
 8006b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b64:	079d      	lsls	r5, r3, #30
 8006b66:	4606      	mov	r6, r0
 8006b68:	460c      	mov	r4, r1
 8006b6a:	d507      	bpl.n	8006b7c <__smakebuf_r+0x1c>
 8006b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	2301      	movs	r3, #1
 8006b76:	6163      	str	r3, [r4, #20]
 8006b78:	b002      	add	sp, #8
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	ab01      	add	r3, sp, #4
 8006b7e:	466a      	mov	r2, sp
 8006b80:	f7ff ffc8 	bl	8006b14 <__swhatbuf_r>
 8006b84:	9900      	ldr	r1, [sp, #0]
 8006b86:	4605      	mov	r5, r0
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7ff fe89 	bl	80068a0 <_malloc_r>
 8006b8e:	b948      	cbnz	r0, 8006ba4 <__smakebuf_r+0x44>
 8006b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b94:	059a      	lsls	r2, r3, #22
 8006b96:	d4ef      	bmi.n	8006b78 <__smakebuf_r+0x18>
 8006b98:	f023 0303 	bic.w	r3, r3, #3
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	e7e3      	b.n	8006b6c <__smakebuf_r+0xc>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	6020      	str	r0, [r4, #0]
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	9b00      	ldr	r3, [sp, #0]
 8006bb0:	6163      	str	r3, [r4, #20]
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	6120      	str	r0, [r4, #16]
 8006bb6:	b15b      	cbz	r3, 8006bd0 <__smakebuf_r+0x70>
 8006bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 f81d 	bl	8006bfc <_isatty_r>
 8006bc2:	b128      	cbz	r0, 8006bd0 <__smakebuf_r+0x70>
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	431d      	orrs	r5, r3
 8006bd4:	81a5      	strh	r5, [r4, #12]
 8006bd6:	e7cf      	b.n	8006b78 <__smakebuf_r+0x18>

08006bd8 <_fstat_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d07      	ldr	r5, [pc, #28]	; (8006bf8 <_fstat_r+0x20>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	f7fa fc98 	bl	800151a <_fstat>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	d102      	bne.n	8006bf4 <_fstat_r+0x1c>
 8006bee:	682b      	ldr	r3, [r5, #0]
 8006bf0:	b103      	cbz	r3, 8006bf4 <_fstat_r+0x1c>
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000d34 	.word	0x20000d34

08006bfc <_isatty_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d06      	ldr	r5, [pc, #24]	; (8006c18 <_isatty_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fa fc97 	bl	800153a <_isatty>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_isatty_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_isatty_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000d34 	.word	0x20000d34

08006c1c <_sbrk_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d06      	ldr	r5, [pc, #24]	; (8006c38 <_sbrk_r+0x1c>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fa fca0 	bl	800156c <_sbrk>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_sbrk_r+0x1a>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_sbrk_r+0x1a>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	20000d34 	.word	0x20000d34

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
