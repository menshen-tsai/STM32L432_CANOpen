
STM32L432_Blink_DMA_printf_CANOpenNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  0800e850  0800e850  0001e850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1f0  0800f1f0  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1f0  0800f1f0  0001f1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1f8  0800f1f8  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1f8  0800f1f8  0001f1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  0800f200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d2c  20000438  0800f638  00020438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  0800f638  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c5f3  00000000  00000000  000204ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005eea  00000000  00000000  0004ca9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  00052988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001494  00000000  00000000  000543b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002754b  00000000  00000000  0005584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002688b  00000000  00000000  0007cd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dce65  00000000  00000000  000a3622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074e4  00000000  00000000  00180488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0018796c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000438 	.word	0x20000438
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e838 	.word	0x0800e838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000043c 	.word	0x2000043c
 80001cc:	0800e838 	.word	0x0800e838

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfb      	ldrb	r3, [r7, #15]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	2304      	movs	r3, #4
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <OD_getIndex+0x14>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	e000      	b.n	80005ec <OD_getIndex+0x16>
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <OD_extension_init+0x14>
 8000608:	2305      	movs	r3, #5
 800060a:	e003      	b.n	8000614 <OD_extension_init+0x1c>
    entry->extension = extension;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	460b      	mov	r3, r1
 800062e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000630:	7af9      	ldrb	r1, [r7, #11]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2304      	movs	r3, #4
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f001 fb56 	bl	8001cec <OD_get_value>
 8000640:	4603      	mov	r3, r0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00c      	beq.n	8000678 <OD_read_1014_default+0x2e>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	7c5b      	ldrb	r3, [r3, #17]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d108      	bne.n	8000678 <OD_read_1014_default+0x2e>
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d005      	beq.n	8000678 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d902      	bls.n	8000678 <OD_read_1014_default+0x2e>
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000678:	2309      	movs	r3, #9
 800067a:	e01b      	b.n	80006b4 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <OD_read_1014_default+0x44>
 800068a:	2300      	movs	r3, #0
 800068c:	e001      	b.n	8000692 <OD_read_1014_default+0x48>
 800068e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000692:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800069a:	3380      	adds	r3, #128	; 0x80
 800069c:	461a      	mov	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80006a4:	6939      	ldr	r1, [r7, #16]
 80006a6:	68b8      	ldr	r0, [r7, #8]
 80006a8:	f7ff ff86 	bl	80005b8 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	2204      	movs	r2, #4
 80006b0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00f      	beq.n	80006f0 <OD_read_1003+0x34>
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00c      	beq.n	80006f0 <OD_read_1003+0x34>
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d009      	beq.n	80006f0 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d803      	bhi.n	80006ea <OD_read_1003+0x2e>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	7c5b      	ldrb	r3, [r3, #17]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <OD_read_1003+0x34>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 80006f0:	2309      	movs	r3, #9
 80006f2:	e04d      	b.n	8000790 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	7f1b      	ldrb	r3, [r3, #28]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d801      	bhi.n	8000706 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000702:	2309      	movs	r3, #9
 8000704:	e044      	b.n	8000790 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	7c5b      	ldrb	r3, [r3, #17]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10b      	bne.n	8000726 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000714:	4619      	mov	r1, r3
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f7ff ff3e 	bl	8000598 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e034      	b.n	8000790 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	7c5a      	ldrb	r2, [r3, #17]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000730:	429a      	cmp	r2, r3
 8000732:	d82c      	bhi.n	800078e <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	7f5b      	ldrb	r3, [r3, #29]
 8000738:	b29a      	uxth	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	7c5b      	ldrb	r3, [r3, #17]
 800073e:	b29b      	uxth	r3, r3
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	b29b      	uxth	r3, r3
 8000744:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000746:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da07      	bge.n	800075e <OD_read_1003+0xa2>
            index += em->fifoSize;
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	7f1b      	ldrb	r3, [r3, #28]
 8000752:	b29a      	uxth	r2, r3
 8000754:	8afb      	ldrh	r3, [r7, #22]
 8000756:	4413      	add	r3, r2
 8000758:	b29b      	uxth	r3, r3
 800075a:	82fb      	strh	r3, [r7, #22]
 800075c:	e007      	b.n	800076e <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 800075e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	7f12      	ldrb	r2, [r2, #28]
 8000766:	4293      	cmp	r3, r2
 8000768:	db01      	blt.n	800076e <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800076a:	2309      	movs	r3, #9
 800076c:	e010      	b.n	8000790 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	68b8      	ldr	r0, [r7, #8]
 8000780:	f7ff ff1a 	bl	80005b8 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2204      	movs	r2, #4
 8000788:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 800078e:	2319      	movs	r3, #25
    }
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00c      	beq.n	80007c6 <OD_write_1003+0x2e>
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	7c5b      	ldrb	r3, [r3, #17]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <OD_write_1003+0x2e>
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <OD_write_1003+0x2e>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d102      	bne.n	80007c6 <OD_write_1003+0x2e>
        || countWritten == NULL)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80007c6:	2309      	movs	r3, #9
 80007c8:	e012      	b.n	80007f0 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f7ff fed6 	bl	800057c <CO_getUint8>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80007d6:	230f      	movs	r3, #15
 80007d8:	e00a      	b.n	80007f0 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000806:	2300      	movs	r3, #0
 8000808:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d01a      	beq.n	8000846 <CO_EM_init+0x4e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d017      	beq.n	8000846 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d103      	bne.n	8000824 <CO_EM_init+0x2c>
 800081c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d810      	bhi.n	8000846 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00d      	beq.n	8000846 <CO_EM_init+0x4e>
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00a      	beq.n	8000846 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000830:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <CO_EM_init+0x4e>
 8000838:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800083c:	2b00      	cmp	r3, #0
 800083e:	db02      	blt.n	8000846 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	2b00      	cmp	r3, #0
 8000844:	d102      	bne.n	800084c <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e0a7      	b.n	800099c <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 800084c:	2250      	movs	r2, #80	; 0x50
 800084e:	2100      	movs	r1, #0
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f00d fe89 	bl	800e568 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800085c:	2300      	movs	r3, #0
 800085e:	2201      	movs	r2, #1
 8000860:	2100      	movs	r1, #0
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f001 faa9 	bl	8001dba <OD_getPtr>
 8000868:	4602      	mov	r2, r0
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10c      	bne.n	8000890 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 8000876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <CO_EM_init+0x92>
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff feaa 	bl	80005d6 <OD_getIndex>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800088a:	f06f 030b 	mvn.w	r3, #11
 800088e:	e085      	b.n	800099c <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008a4:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008a6:	f107 0210 	add.w	r2, r7, #16
 80008aa:	2301      	movs	r3, #1
 80008ac:	2100      	movs	r1, #0
 80008ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008b0:	f7ff feb6 	bl	8000620 <OD_get_u32>
 80008b4:	4603      	mov	r3, r0
 80008b6:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80008b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <CO_EM_init+0xd2>
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <CO_EM_init+0x1ac>)
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d010      	beq.n	80008ec <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80008ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <CO_EM_init+0xe6>
 80008d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008d2:	f7ff fe80 	bl	80005d6 <OD_getIndex>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008dc:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 80008de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80008e6:	f06f 030b 	mvn.w	r3, #11
 80008ea:	e057      	b.n	800099c <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 80008ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3380      	adds	r3, #128	; 0x80
 80008f4:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	0fdb      	lsrs	r3, r3, #31
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <CO_EM_init+0x1b0>)
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a26      	ldr	r2, [pc, #152]	; (80009ac <CO_EM_init+0x1b4>)
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3330      	adds	r3, #48	; 0x30
 800091a:	4619      	mov	r1, r3
 800091c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800091e:	f7ff fe6b 	bl	80005f8 <OD_extension_init>
 8000922:	4603      	mov	r3, r0
 8000924:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000926:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00c      	beq.n	8000948 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <CO_EM_init+0x14a>
 8000934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000936:	f7ff fe4e 	bl	80005d6 <OD_getIndex>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000942:	f06f 030b 	mvn.w	r3, #11
 8000946:	e029      	b.n	800099c <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800094e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000952:	8aba      	ldrh	r2, [r7, #20]
 8000954:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000956:	2300      	movs	r3, #0
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	2308      	movs	r3, #8
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	68b8      	ldr	r0, [r7, #8]
 8000962:	f006 fd1f 	bl	80073a4 <CO_CANtxBufferInit>
 8000966:	4602      	mov	r2, r0
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	e010      	b.n	800099c <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <CO_EM_init+0x1b8>)
 8000984:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <CO_EM_init+0x1bc>)
 800098a:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3340      	adds	r3, #64	; 0x40
 8000990:	4619      	mov	r1, r3
 8000992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000994:	f7ff fe30 	bl	80005f8 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8000998:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	7ffff800 	.word	0x7ffff800
 80009a8:	0800064b 	.word	0x0800064b
 80009ac:	08001921 	.word	0x08001921
 80009b0:	080006bd 	.word	0x080006bd
 80009b4:	08000799 	.word	0x08000799

080009b8 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	8a5b      	ldrh	r3, [r3, #18]
 80009cc:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	8a1b      	ldrh	r3, [r3, #16]
 80009d2:	8aba      	ldrh	r2, [r7, #20]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f000 80a2 	beq.w	8000b1e <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	8a1a      	ldrh	r2, [r3, #16]
 80009de:	8abb      	ldrh	r3, [r7, #20]
 80009e0:	4053      	eors	r3, r2
 80009e2:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	8aba      	ldrh	r2, [r7, #20]
 80009e8:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 80009ea:	8a7a      	ldrh	r2, [r7, #18]
 80009ec:	f240 1301 	movw	r3, #257	; 0x101
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d010      	beq.n	8000a18 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 80009f6:	8aba      	ldrh	r2, [r7, #20]
 80009f8:	f240 1301 	movw	r3, #257	; 0x101
 80009fc:	4013      	ands	r3, r2
            CO_error(em,
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2201      	movs	r2, #1
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f91a 	bl	8000c4c <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 8000a18:	8a7b      	ldrh	r3, [r7, #18]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d010      	beq.n	8000a44 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000a22:	8abb      	ldrh	r3, [r7, #20]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	f248 1320 	movw	r3, #33056	; 0x8120
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f904 	bl	8000c4c <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000a44:	8a7b      	ldrh	r3, [r7, #18]
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d010      	beq.n	8000a70 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000a4e:	8abb      	ldrh	r3, [r7, #20]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	f248 1340 	movw	r3, #33088	; 0x8140
 8000a68:	2212      	movs	r2, #18
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f8ee 	bl	8000c4c <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 8000a70:	8a7b      	ldrh	r3, [r7, #18]
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d010      	beq.n	8000a9c <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8000a7a:	8abb      	ldrh	r3, [r7, #20]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	f248 1310 	movw	r3, #33040	; 0x8110
 8000a94:	2214      	movs	r2, #20
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f8d8 	bl	8000c4c <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8000a9c:	8a7b      	ldrh	r3, [r7, #18]
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d010      	beq.n	8000ac8 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8000aa6:	8abb      	ldrh	r3, [r7, #20]
 8000aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf14      	ite	ne
 8000ab0:	2301      	movne	r3, #1
 8000ab2:	2300      	moveq	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ac0:	2215      	movs	r2, #21
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f000 f8c2 	bl	8000c4c <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8000ac8:	8a7b      	ldrh	r3, [r7, #18]
 8000aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d010      	beq.n	8000af4 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000ad2:	8abb      	ldrh	r3, [r7, #20]
 8000ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	f248 1320 	movw	r3, #33056	; 0x8120
 8000aec:	2206      	movs	r2, #6
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f000 f8ac 	bl	8000c4c <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000af4:	8a7b      	ldrh	r3, [r7, #18]
 8000af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00f      	beq.n	8000b1e <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000afe:	8abb      	ldrh	r3, [r7, #20]
 8000b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2313      	movs	r3, #19
 8000b16:	2213      	movs	r2, #19
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f897 	bl	8000c4c <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <CO_EM_process+0x18a>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	7a1b      	ldrb	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <CO_EM_process+0x1a2>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b60:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	7dfa      	ldrb	r2, [r7, #23]
 8000b68:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d067      	beq.n	8000c40 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	7f1b      	ldrb	r3, [r3, #28]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d965      	bls.n	8000c44 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	7f9b      	ldrb	r3, [r3, #30]
 8000b7c:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	7f5b      	ldrb	r3, [r3, #29]
 8000b82:	7c7a      	ldrb	r2, [r7, #17]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d05d      	beq.n	8000c44 <CO_EM_process+0x28c>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d158      	bne.n	8000c44 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	699a      	ldr	r2, [r3, #24]
 8000b96:	7c7b      	ldrb	r3, [r7, #17]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	6819      	ldr	r1, [r3, #0]
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	041a      	lsls	r2, r3, #16
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6998      	ldr	r0, [r3, #24]
 8000ba6:	7c7b      	ldrb	r3, [r7, #17]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4403      	add	r3, r0
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	1d58      	adds	r0, r3, #5
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	7c7b      	ldrb	r3, [r7, #17]
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00d fd5a 	bl	800e67c <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f006 fc60 	bl	8007498 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000bd8:	7c7b      	ldrb	r3, [r7, #17]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	747b      	strb	r3, [r7, #17]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	7f1b      	ldrb	r3, [r3, #28]
 8000be2:	7c7a      	ldrb	r2, [r7, #17]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d201      	bcs.n	8000bec <CO_EM_process+0x234>
 8000be8:	7c7a      	ldrb	r2, [r7, #17]
 8000bea:	e000      	b.n	8000bee <CO_EM_process+0x236>
 8000bec:	2200      	movs	r2, #0
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	7fdb      	ldrb	r3, [r3, #31]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10c      	bne.n	8000c14 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	2220      	movs	r2, #32
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f000 f81d 	bl	8000c4c <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c12:	e017      	b.n	8000c44 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	7fdb      	ldrb	r3, [r3, #31]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d113      	bne.n	8000c44 <CO_EM_process+0x28c>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	7f9a      	ldrb	r2, [r3, #30]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	7f5b      	ldrb	r3, [r3, #29]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d10d      	bne.n	8000c44 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	2220      	movs	r2, #32
 8000c36:	2100      	movs	r1, #0
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f807 	bl	8000c4c <CO_error>
    return;
 8000c3e:	e001      	b.n	8000c44 <CO_EM_process+0x28c>
        return;
 8000c40:	bf00      	nop
 8000c42:	e000      	b.n	8000c46 <CO_EM_process+0x28e>
    return;
 8000c44:	bf00      	nop
}
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08d      	sub	sp, #52	; 0x34
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80a6 	beq.w	8000db6 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	2201      	movs	r2, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d90a      	bls.n	8000ca0 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000c96:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000c9a:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <CO_error+0x88>
            return;
 8000cc6:	e079      	b.n	8000dbc <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d074      	beq.n	8000dba <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	061a      	lsls	r2, r3, #24
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce0:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ce6:	f3ef 8210 	mrs	r2, PRIMASK
 8000cea:	617a      	str	r2, [r7, #20]
  return(result);
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <CO_error+0xc0>
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e00b      	b.n	8000d24 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000d16:	43db      	mvns	r3, r3
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	7f1b      	ldrb	r3, [r3, #28]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d93c      	bls.n	8000da6 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7f5b      	ldrb	r3, [r3, #29]
 8000d30:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000d32:	7efb      	ldrb	r3, [r7, #27]
 8000d34:	3301      	adds	r3, #1
 8000d36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	7f1b      	ldrb	r3, [r3, #28]
 8000d3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d302      	bcc.n	8000d4c <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	7f9b      	ldrb	r3, [r3, #30]
 8000d50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d103      	bne.n	8000d60 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	77da      	strb	r2, [r3, #31]
 8000d5e:	e022      	b.n	8000da6 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	7efb      	ldrb	r3, [r7, #27]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	6a3a      	ldr	r2, [r7, #32]
 8000d6c:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	699a      	ldr	r2, [r3, #24]
 8000d72:	7efb      	ldrb	r3, [r7, #27]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d82:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	7f1b      	ldrb	r3, [r3, #28]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	da07      	bge.n	8000da6 <CO_error+0x15a>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	f383 8810 	msr	PRIMASK, r3
}
 8000db4:	e002      	b.n	8000dbc <CO_error+0x170>
    if (em == NULL) return;
 8000db6:	bf00      	nop
 8000db8:	e000      	b.n	8000dbc <CO_error+0x170>
            return;
 8000dba:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000dbc:	3734      	adds	r7, #52	; 0x34
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <OD_getIndex+0x14>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	e000      	b.n	8000df8 <OD_getIndex+0x16>
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <OD_extension_init>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <OD_extension_init+0x14>
 8000e14:	2305      	movs	r3, #5
 8000e16:	e003      	b.n	8000e20 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <OD_get_u32>:
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e3c:	7af9      	ldrb	r1, [r7, #11]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2304      	movs	r3, #4
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 ff50 	bl	8001cec <OD_get_value>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000e56:	b480      	push	{r7}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	791b      	ldrb	r3, [r3, #4]
 8000e68:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3305      	adds	r3, #5
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d107      	bne.n	8000e86 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2201      	movs	r2, #1
 8000e84:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000e86:	bf00      	nop
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b088      	sub	sp, #32
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d012      	beq.n	8000ed2 <OD_write_1016+0x40>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00f      	beq.n	8000ed2 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	7c5b      	ldrb	r3, [r3, #17]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	7c5a      	ldrb	r2, [r3, #17]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	7a1b      	ldrb	r3, [r3, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d805      	bhi.n	8000ed2 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d102      	bne.n	8000ed2 <OD_write_1016+0x40>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	e020      	b.n	8000f18 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	f7ff ff75 	bl	8000dc6 <CO_getUint32>
 8000edc:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	7c5b      	ldrb	r3, [r3, #17]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b2d9      	uxtb	r1, r3
 8000ef0:	8abb      	ldrh	r3, [r7, #20]
 8000ef2:	7dfa      	ldrb	r2, [r7, #23]
 8000ef4:	69f8      	ldr	r0, [r7, #28]
 8000ef6:	f000 f8bf 	bl	8001078 <CO_HBconsumer_initEntry>
 8000efa:	4603      	mov	r3, r0
 8000efc:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000efe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f06:	2308      	movs	r3, #8
 8000f08:	e006      	b.n	8000f18 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 fd05 	bl	8001920 <OD_writeOriginal>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d008      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e08a      	b.n	8001068 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f00d fb06 	bl	800e568 <memset>
    HBcons->em = em;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6c:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f72:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d304      	bcc.n	8000f88 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e000      	b.n	8000f8a <CO_HBconsumer_init+0x6a>
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	77fb      	strb	r3, [r7, #31]
 8000f92:	e041      	b.n	8001018 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	f107 0214 	add.w	r2, r7, #20
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fa2:	f7ff ff43 	bl	8000e2c <OD_get_u32>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000faa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00c      	beq.n	8000fcc <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <CO_HBconsumer_init+0xa6>
 8000fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fba:	f7ff ff12 	bl	8000de2 <OD_getIndex>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc4:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000fc6:	f06f 030b 	mvn.w	r3, #11
 8000fca:	e04d      	b.n	8001068 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	7f7a      	ldrb	r2, [r7, #29]
 8000fda:	7ff9      	ldrb	r1, [r7, #31]
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f84b 	bl	8001078 <CO_HBconsumer_initEntry>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000fe6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d011      	beq.n	8001012 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <CO_HBconsumer_init+0xe2>
 8000ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ff6:	f7ff fef4 	bl	8000de2 <OD_getIndex>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8001002:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001006:	f113 0f0c 	cmn.w	r3, #12
 800100a:	d002      	beq.n	8001012 <CO_HBconsumer_init+0xf2>
                return ret;
 800100c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001010:	e02a      	b.n	8001068 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001012:	7ffb      	ldrb	r3, [r7, #31]
 8001014:	3301      	adds	r3, #1
 8001016:	77fb      	strb	r3, [r7, #31]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7a1b      	ldrb	r3, [r3, #8]
 800101c:	7ffa      	ldrb	r2, [r7, #31]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3b8      	bcc.n	8000f94 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <CO_HBconsumer_init+0x150>)
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <CO_HBconsumer_init+0x154>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3320      	adds	r3, #32
 8001038:	4619      	mov	r1, r3
 800103a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800103c:	f7ff fee2 	bl	8000e04 <OD_extension_init>
 8001040:	4603      	mov	r3, r0
 8001042:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001044:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <CO_HBconsumer_init+0x140>
 8001052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001054:	f7ff fec5 	bl	8000de2 <OD_getIndex>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001060:	f06f 030b 	mvn.w	r3, #11
 8001064:	e000      	b.n	8001068 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08001871 	.word	0x08001871
 8001074:	08000e93 	.word	0x08000e93

08001078 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08d      	sub	sp, #52	; 0x34
 800107c:	af04      	add	r7, sp, #16
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4608      	mov	r0, r1
 8001082:	4611      	mov	r1, r2
 8001084:	461a      	mov	r2, r3
 8001086:	4603      	mov	r3, r0
 8001088:	70fb      	strb	r3, [r7, #3]
 800108a:	460b      	mov	r3, r1
 800108c:	70bb      	strb	r3, [r7, #2]
 800108e:	4613      	mov	r3, r2
 8001090:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001092:	2300      	movs	r3, #0
 8001094:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <CO_HBconsumer_initEntry+0x2e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a1b      	ldrb	r3, [r3, #8]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d302      	bcc.n	80010ac <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e077      	b.n	800119c <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 80010ac:	883b      	ldrh	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d024      	beq.n	80010fc <CO_HBconsumer_initEntry+0x84>
 80010b2:	78bb      	ldrb	r3, [r7, #2]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	77bb      	strb	r3, [r7, #30]
 80010bc:	e019      	b.n	80010f2 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	7fbb      	ldrb	r3, [r7, #30]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	f107 0408 	add.w	r4, r7, #8
 80010cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 80010d2:	78fa      	ldrb	r2, [r7, #3]
 80010d4:	7fbb      	ldrb	r3, [r7, #30]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d008      	beq.n	80010ec <CO_HBconsumer_initEntry+0x74>
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <CO_HBconsumer_initEntry+0x74>
 80010e0:	7a3b      	ldrb	r3, [r7, #8]
 80010e2:	78ba      	ldrb	r2, [r7, #2]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d101      	bne.n	80010ec <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80010e8:	23f4      	movs	r3, #244	; 0xf4
 80010ea:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010ec:	7fbb      	ldrb	r3, [r7, #30]
 80010ee:	3301      	adds	r3, #1
 80010f0:	77bb      	strb	r3, [r7, #30]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a1b      	ldrb	r3, [r3, #8]
 80010f6:	7fba      	ldrb	r2, [r7, #30]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3e0      	bcc.n	80010be <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 80010fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d149      	bne.n	8001198 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	78ba      	ldrb	r2, [r7, #2]
 8001114:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	461a      	mov	r2, r3
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00d      	beq.n	8001156 <CO_HBconsumer_initEntry+0xde>
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800114c:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2201      	movs	r2, #1
 8001152:	709a      	strb	r2, [r3, #2]
 8001154:	e007      	b.n	8001166 <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2200      	movs	r2, #0
 8001164:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001180:	8bba      	ldrh	r2, [r7, #28]
 8001182:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <CO_HBconsumer_initEntry+0x12c>)
 8001184:	9402      	str	r4, [sp, #8]
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	2300      	movs	r3, #0
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001190:	f006 f8aa 	bl	80072e8 <CO_CANrxBufferInit>
 8001194:	4603      	mov	r3, r0
 8001196:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001198:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	08000e57 	.word	0x08000e57

080011a8 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	; 0x38
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d077      	beq.n	80012b4 <CO_HBconsumer_process+0x10c>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d073      	beq.n	80012b4 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011d2:	e068      	b.n	80012a6 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d055      	beq.n	800129a <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d022      	beq.n	800123c <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d112      	bne.n	8001226 <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d10a      	bne.n	800121e <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	f248 1330 	movw	r3, #33072	; 0x8130
 8001216:	221c      	movs	r2, #28
 8001218:	2101      	movs	r1, #1
 800121a:	f7ff fd17 	bl	8000c4c <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2201      	movs	r2, #1
 8001222:	709a      	strb	r2, [r3, #2]
 8001224:	e007      	b.n	8001236 <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2202      	movs	r2, #2
 800122a:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d11c      	bne.n	800127e <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	441a      	add	r2, r3
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	429a      	cmp	r2, r3
 800125a:	d310      	bcc.n	800127e <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	f248 1330 	movw	r3, #33072	; 0x8130
 800126a:	221b      	movs	r2, #27
 800126c:	2101      	movs	r1, #1
 800126e:	f7ff fced 	bl	8000c4c <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	22ff      	movs	r2, #255	; 0xff
 8001276:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2203      	movs	r2, #3
 800127c:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d001      	beq.n	800128a <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d003      	beq.n	800129c <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
 8001298:	e000      	b.n	800129c <CO_HBconsumer_process+0xf4>
                continue;
 800129a:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800129c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a0:	3301      	adds	r3, #1
 80012a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	7a1b      	ldrb	r3, [r3, #8]
 80012aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d390      	bcc.n	80011d4 <CO_HBconsumer_process+0x2c>
 80012b2:	e028      	b.n	8001306 <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <CO_HBconsumer_process+0x11a>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d021      	beq.n	8001306 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	77fb      	strb	r3, [r7, #31]
 80012c6:	e015      	b.n	80012f4 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	789b      	ldrb	r3, [r3, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
 80012f0:	3301      	adds	r3, #1
 80012f2:	77fb      	strb	r3, [r7, #31]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7a1b      	ldrb	r3, [r3, #8]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3e4      	bcc.n	80012c8 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d114      	bne.n	8001338 <CO_HBconsumer_process+0x190>
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d011      	beq.n	8001338 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	221b      	movs	r2, #27
 8001320:	2100      	movs	r1, #0
 8001322:	f7ff fc93 	bl	8000c4c <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	221c      	movs	r2, #28
 8001332:	2100      	movs	r1, #0
 8001334:	f7ff fc8a 	bl	8000c4c <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133c:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001342:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	615a      	str	r2, [r3, #20]
}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001360:	81fb      	strh	r3, [r7, #14]
 8001362:	89fb      	ldrh	r3, [r7, #14]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <OD_getIndex+0x14>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	e000      	b.n	8001386 <OD_getIndex+0x16>
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <OD_extension_init>:
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <OD_extension_init+0x14>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e003      	b.n	80013ae <OD_extension_init+0x1c>
    entry->extension = extension;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <OD_get_u16>:
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af02      	add	r7, sp, #8
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	460b      	mov	r3, r1
 80013c8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2302      	movs	r3, #2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fc89 	bl	8001cec <OD_get_value>
 80013da:	4603      	mov	r3, r0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	2201      	movs	r2, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d807      	bhi.n	8001420 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	5cd2      	ldrb	r2, [r2, r3]
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	4013      	ands	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <CO_isError+0x40>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <CO_isError+0x42>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <CO_getErrorRegister+0x1e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <CO_getErrorRegister+0x1e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	e000      	b.n	8001452 <CO_getErrorRegister+0x20>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3305      	adds	r3, #5
 8001472:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d10a      	bne.n	80014a0 <CO_NMT_receive+0x42>
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <CO_NMT_receive+0x3c>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	78db      	ldrb	r3, [r3, #3]
 8001494:	7bba      	ldrb	r2, [r7, #14]
 8001496:	429a      	cmp	r2, r3
 8001498:	d102      	bne.n	80014a0 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <OD_write_1017+0x2e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	7c5b      	ldrb	r3, [r3, #17]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <OD_write_1017+0x2e>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d102      	bne.n	80014da <OD_write_1017+0x2e>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80014da:	2309      	movs	r3, #9
 80014dc:	e017      	b.n	800150e <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f7ff ff34 	bl	8001352 <CO_getUint16>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fb03 f202 	mul.w	r2, r3, r2
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fa0a 	bl	8001920 <OD_writeOriginal>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af04      	add	r7, sp, #16
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <CO_NMT_init+0x30>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <CO_NMT_init+0x30>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <CO_NMT_init+0x30>
 8001542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	e098      	b.n	8001680 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 800154e:	222c      	movs	r2, #44	; 0x2c
 8001550:	2100      	movs	r1, #0
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f00d f808 	bl	800e568 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8c3a      	ldrh	r2, [r7, #32]
 800156e:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001586:	f107 0214 	add.w	r2, r7, #20
 800158a:	2301      	movs	r3, #1
 800158c:	2100      	movs	r1, #0
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f7ff ff13 	bl	80013ba <OD_get_u16>
 8001594:	4603      	mov	r3, r0
 8001596:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001598:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <CO_NMT_init+0x9c>
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff fee2 	bl	8001370 <OD_getIndex>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b2:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80015b4:	f06f 030b 	mvn.w	r3, #11
 80015b8:	e062      	b.n	8001680 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80015ba:	8abb      	ldrh	r3, [r7, #20]
 80015bc:	461a      	mov	r2, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <CO_NMT_init+0x170>)
 80015d4:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <CO_NMT_init+0x174>)
 80015da:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3310      	adds	r3, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f7ff fed5 	bl	8001392 <OD_extension_init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00c      	beq.n	800160e <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <CO_NMT_init+0xf0>
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f7ff feb8 	bl	8001370 <OD_getIndex>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001606:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001608:	f06f 030b 	mvn.w	r3, #11
 800160c:	e038      	b.n	8001680 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	429a      	cmp	r2, r3
 8001618:	d903      	bls.n	8001622 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001622:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001624:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <CO_NMT_init+0x178>)
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001638:	f005 fe56 	bl	80072e8 <CO_CANrxBufferInit>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <CO_NMT_init+0x136>
        return ret;
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164c:	e018      	b.n	8001680 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001654:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001656:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001658:	2300      	movs	r3, #0
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2301      	movs	r3, #1
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001664:	f005 fe9e 	bl	80073a4 <CO_CANtxBufferInit>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e001      	b.n	8001680 <CO_NMT_init+0x168>
    }

    return ret;
 800167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08001871 	.word	0x08001871
 800168c:	080014ad 	.word	0x080014ad
 8001690:	0800145f 	.word	0x0800145f

08001694 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80016ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d204      	bcs.n	80016d0 <CO_NMT_process+0x3c>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	e000      	b.n	80016d2 <CO_NMT_process+0x3e>
 80016d0:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10e      	bne.n	80016fa <CO_NMT_process+0x66>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d029      	beq.n	8001738 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016f2:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d01e      	beq.n	8001738 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	7ffa      	ldrb	r2, [r7, #31]
 8001700:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f005 fec3 	bl	8007498 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001712:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	889b      	ldrh	r3, [r3, #4]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <CO_NMT_process+0x96>
 8001726:	2305      	movs	r3, #5
 8001728:	e000      	b.n	800172c <CO_NMT_process+0x98>
 800172a:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800172c:	77fb      	strb	r3, [r7, #31]
 800172e:	e003      	b.n	8001738 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	7ffa      	ldrb	r2, [r7, #31]
 800173c:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	789b      	ldrb	r3, [r3, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	2b82      	cmp	r3, #130	; 0x82
 800174c:	d01a      	beq.n	8001784 <CO_NMT_process+0xf0>
 800174e:	2b82      	cmp	r3, #130	; 0x82
 8001750:	dc1b      	bgt.n	800178a <CO_NMT_process+0xf6>
 8001752:	2b81      	cmp	r3, #129	; 0x81
 8001754:	d013      	beq.n	800177e <CO_NMT_process+0xea>
 8001756:	2b81      	cmp	r3, #129	; 0x81
 8001758:	dc17      	bgt.n	800178a <CO_NMT_process+0xf6>
 800175a:	2b80      	cmp	r3, #128	; 0x80
 800175c:	d00c      	beq.n	8001778 <CO_NMT_process+0xe4>
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	dc13      	bgt.n	800178a <CO_NMT_process+0xf6>
 8001762:	2b01      	cmp	r3, #1
 8001764:	d002      	beq.n	800176c <CO_NMT_process+0xd8>
 8001766:	2b02      	cmp	r3, #2
 8001768:	d003      	beq.n	8001772 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 800176a:	e00e      	b.n	800178a <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 800176c:	2305      	movs	r3, #5
 800176e:	77fb      	strb	r3, [r7, #31]
                break;
 8001770:	e00c      	b.n	800178c <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 8001772:	2304      	movs	r3, #4
 8001774:	77fb      	strb	r3, [r7, #31]
                break;
 8001776:	e009      	b.n	800178c <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8001778:	237f      	movs	r3, #127	; 0x7f
 800177a:	77fb      	strb	r3, [r7, #31]
                break;
 800177c:	e006      	b.n	800178c <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 800177e:	2302      	movs	r3, #2
 8001780:	77bb      	strb	r3, [r7, #30]
                break;
 8001782:	e003      	b.n	800178c <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 8001784:	2301      	movs	r3, #1
 8001786:	77bb      	strb	r3, [r7, #30]
                break;
 8001788:	e000      	b.n	800178c <CO_NMT_process+0xf8>
                break;
 800178a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 800179a:	2b00      	cmp	r3, #0
 800179c:	d01c      	beq.n	80017d8 <CO_NMT_process+0x144>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2112      	movs	r1, #18
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe1d 	bl	80013e4 <CO_isError>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	211b      	movs	r1, #27
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe14 	bl	80013e4 <CO_isError>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	211c      	movs	r1, #28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe0b 	bl	80013e4 <CO_isError>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <CO_NMT_process+0x146>
 80017d8:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80017da:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	889b      	ldrh	r3, [r3, #4]
 80017e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <CO_NMT_process+0x170>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fe20 	bl	8001432 <CO_getErrorRegister>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <CO_NMT_process+0x170>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <CO_NMT_process+0x172>
 8001804:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001806:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8001808:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d110      	bne.n	8001832 <CO_NMT_process+0x19e>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <CO_NMT_process+0x188>
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00a      	beq.n	8001832 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	889b      	ldrh	r3, [r3, #4]
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <CO_NMT_process+0x198>
 8001828:	2304      	movs	r3, #4
 800182a:	e000      	b.n	800182e <CO_NMT_process+0x19a>
 800182c:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800182e:	77fb      	strb	r3, [r7, #31]
 8001830:	e010      	b.n	8001854 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	b21b      	sxth	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	da0b      	bge.n	8001854 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 800183c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001840:	2b7f      	cmp	r3, #127	; 0x7f
 8001842:	d107      	bne.n	8001854 <CO_NMT_process+0x1c0>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <CO_NMT_process+0x1c0>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001850:	2305      	movs	r3, #5
 8001852:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	7ffa      	ldrb	r2, [r7, #31]
 8001858:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <CO_NMT_process+0x1d2>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	7ffa      	ldrb	r2, [r7, #31]
 8001864:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 8001866:	7fbb      	ldrb	r3, [r7, #30]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <OD_readOriginal+0x20>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <OD_readOriginal+0x20>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001890:	2309      	movs	r3, #9
 8001892:	e041      	b.n	8001918 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018a6:	230e      	movs	r3, #14
 80018a8:	e036      	b.n	8001918 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <OD_readOriginal+0x4e>
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d922      	bls.n	8001904 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d801      	bhi.n	80018cc <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80018c8:	2309      	movs	r3, #9
 80018ca:	e025      	b.n	8001918 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4413      	add	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d90a      	bls.n	80018fe <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	441a      	add	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80018f8:	23ff      	movs	r3, #255	; 0xff
 80018fa:	75fb      	strb	r3, [r7, #23]
 80018fc:	e002      	b.n	8001904 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f00c feb7 	bl	800e67c <memcpy>

    *countRead = dataLenToCopy;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <OD_writeOriginal+0x20>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <OD_writeOriginal+0x20>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001940:	2309      	movs	r3, #9
 8001942:	e047      	b.n	80019d4 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001956:	230e      	movs	r3, #14
 8001958:	e03c      	b.n	80019d4 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <OD_writeOriginal+0x4e>
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d922      	bls.n	80019b4 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	d801      	bhi.n	800197c <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001978:	2309      	movs	r3, #9
 800197a:	e02b      	b.n	80019d4 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4413      	add	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d90a      	bls.n	80019ae <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	441a      	add	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	75fb      	strb	r3, [r7, #23]
 80019ac:	e002      	b.n	80019b4 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d201      	bcs.n	80019c0 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80019bc:	230c      	movs	r3, #12
 80019be:	e009      	b.n	80019d4 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	69b8      	ldr	r0, [r7, #24]
 80019c6:	f00c fe59 	bl	800e67c <memcpy>

    *countWritten = dataLenToCopy;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	601a      	str	r2, [r3, #0]
    return returnCode;
 80019d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 80019ea:	2302      	movs	r3, #2
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a06:	2302      	movs	r3, #2
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <OD_find+0x1a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <OD_find+0x1e>
        return NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e046      	b.n	8001ac0 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001a3e:	e026      	b.n	8001a8e <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a40:	8afa      	ldrh	r2, [r7, #22]
 8001a42:	8abb      	ldrh	r3, [r7, #20]
 8001a44:	4413      	add	r3, r2
 8001a46:	105b      	asrs	r3, r3, #1
 8001a48:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	89fa      	ldrh	r2, [r7, #14]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d101      	bne.n	8001a6a <OD_find+0x56>
            return entry;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	e02a      	b.n	8001ac0 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d209      	bcs.n	8001a88 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <OD_find+0x6e>
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	e000      	b.n	8001a84 <OD_find+0x70>
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	82bb      	strh	r3, [r7, #20]
 8001a86:	e002      	b.n	8001a8e <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001a8e:	8afa      	ldrh	r2, [r7, #22]
 8001a90:	8abb      	ldrh	r3, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3d4      	bcc.n	8001a40 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001a96:	8afa      	ldrh	r2, [r7, #22]
 8001a98:	8abb      	ldrh	r3, [r7, #20]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10f      	bne.n	8001abe <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6859      	ldr	r1, [r3, #4]
 8001aa2:	8afa      	ldrh	r2, [r7, #22]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d101      	bne.n	8001abe <OD_find+0xaa>
            return entry;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	e000      	b.n	8001ac0 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08d      	sub	sp, #52	; 0x34
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <OD_getSub+0x1e>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <OD_getSub+0x22>
 8001aea:	2305      	movs	r3, #5
 8001aec:	e0d2      	b.n	8001c94 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <OD_getSub+0x2c>
 8001af4:	2309      	movs	r3, #9
 8001af6:	e0cd      	b.n	8001c94 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d050      	beq.n	8001baa <OD_getSub+0xde>
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	f300 808c 	bgt.w	8001c26 <OD_getSub+0x15a>
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d002      	beq.n	8001b18 <OD_getSub+0x4c>
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d015      	beq.n	8001b42 <OD_getSub+0x76>
 8001b16:	e086      	b.n	8001c26 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <OD_getSub+0x56>
 8001b1e:	230e      	movs	r3, #14
 8001b20:	e0b8      	b.n	8001c94 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	791a      	ldrb	r2, [r3, #4]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	609a      	str	r2, [r3, #8]
        break;
 8001b40:	e073      	b.n	8001c2a <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	7afa      	ldrb	r2, [r7, #11]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d301      	bcc.n	8001b50 <OD_getSub+0x84>
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	e0a1      	b.n	8001c94 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	7a1a      	ldrb	r2, [r3, #8]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	2201      	movs	r2, #1
 8001b70:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001b72:	e05a      	b.n	8001c2a <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	7a5a      	ldrb	r2, [r3, #9]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	7afa      	ldrb	r2, [r7, #11]
 8001b8e:	3a01      	subs	r2, #1
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4413      	add	r3, r2
 8001b98:	e000      	b.n	8001b9c <OD_getSub+0xd0>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	609a      	str	r2, [r3, #8]
        break;
 8001ba8:	e03f      	b.n	8001c2a <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bba:	e01c      	b.n	8001bf6 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001bbc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	4413      	add	r3, r2
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	7afa      	ldrb	r2, [r7, #11]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d10a      	bne.n	8001bec <OD_getSub+0x120>
                odo = &odoArr[i];
 8001bd6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	461a      	mov	r2, r3
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	4413      	add	r3, r2
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001bea:	e00a      	b.n	8001c02 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3dc      	bcc.n	8001bbc <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <OD_getSub+0x140>
 8001c08:	230e      	movs	r3, #14
 8001c0a:	e043      	b.n	8001c94 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	795a      	ldrb	r2, [r3, #5]
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	609a      	str	r2, [r3, #8]
        break;
 8001c24:	e001      	b.n	8001c2a <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001c26:	2309      	movs	r3, #9
 8001c28:	e034      	b.n	8001c94 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <OD_getSub+0x16c>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <OD_getSub+0x1d4>)
 8001c3c:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <OD_getSub+0x1d8>)
 8001c42:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	e01c      	b.n	8001c86 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <OD_getSub+0x192>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	e000      	b.n	8001c60 <OD_getSub+0x194>
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <OD_getSub+0x1aa>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	e000      	b.n	8001c78 <OD_getSub+0x1ac>
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	7afa      	ldrb	r2, [r7, #11]
 8001c90:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3734      	adds	r7, #52	; 0x34
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	08001871 	.word	0x08001871
 8001ca4:	08001921 	.word	0x08001921
 8001ca8:	080019dd 	.word	0x080019dd
 8001cac:	080019f9 	.word	0x080019f9

08001cb0 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db03      	blt.n	8001cca <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b19      	cmp	r3, #25
 8001cc8:	dd02      	ble.n	8001cd0 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <OD_getSDOabCode+0x38>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	e004      	b.n	8001cda <OD_getSDOabCode+0x2a>
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <OD_getSDOabCode+0x38>)
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	0800ea60 	.word	0x0800ea60

08001cec <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b08f      	sub	sp, #60	; 0x3c
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <OD_get_value+0x1a>
 8001d02:	2309      	movs	r3, #9
 8001d04:	e024      	b.n	8001d50 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d10:	f107 0214 	add.w	r2, r7, #20
 8001d14:	7af9      	ldrb	r1, [r7, #11]
 8001d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fed7 	bl	8001acc <OD_getSub>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001d24:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <OD_get_value+0x46>
 8001d2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d30:	e00e      	b.n	8001d50 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <OD_get_value+0x54>
 8001d3c:	230b      	movs	r3, #11
 8001d3e:	e007      	b.n	8001d50 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001d40:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d4c:	47a0      	blx	r4
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	373c      	adds	r7, #60	; 0x3c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}

08001d58 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08f      	sub	sp, #60	; 0x3c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	460b      	mov	r3, r1
 8001d66:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d72:	f107 0214 	add.w	r2, r7, #20
 8001d76:	7af9      	ldrb	r1, [r7, #11]
 8001d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff fea6 	bl	8001acc <OD_getSub>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001d86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <OD_set_value+0x3c>
 8001d8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d92:	e00e      	b.n	8001db2 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <OD_set_value+0x4a>
 8001d9e:	230b      	movs	r3, #11
 8001da0:	e007      	b.n	8001db2 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001da2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dae:	47a0      	blx	r4
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	373c      	adds	r7, #60	; 0x3c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}

08001dba <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b08e      	sub	sp, #56	; 0x38
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001dd0:	f107 0214 	add.w	r2, r7, #20
 8001dd4:	7af9      	ldrb	r1, [r7, #11]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff fe77 	bl	8001acc <OD_getSub>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001de4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d116      	bne.n	8001e1a <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <OD_getPtr+0x42>
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001dfc:	2309      	movs	r3, #9
 8001dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e02:	e00a      	b.n	8001e1a <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <OD_getPtr+0x60>
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d002      	beq.n	8001e1a <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001e14:	230b      	movs	r3, #11
 8001e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <OD_getPtr+0x6e>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001e26:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001e28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <OD_getPtr+0x7c>
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	e000      	b.n	8001e38 <OD_getPtr+0x7e>
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3738      	adds	r7, #56	; 0x38
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e6a:	81fb      	strh	r3, [r7, #14]
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	2304      	movs	r3, #4
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <OD_getIndex+0x14>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	e000      	b.n	8001eca <OD_getIndex+0x16>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <OD_extension_init>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <OD_extension_init+0x14>
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	e003      	b.n	8001ef2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <OD_get_u8>:
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f0e:	7af9      	ldrb	r1, [r7, #11]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff fee7 	bl	8001cec <OD_get_value>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <OD_get_u16>:
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f38:	7af9      	ldrb	r1, [r7, #11]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2302      	movs	r3, #2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fed2 	bl	8001cec <OD_get_value>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <OD_get_u32>:
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f62:	7af9      	ldrb	r1, [r7, #11]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff febd 	bl	8001cec <OD_get_value>
 8001f72:	4603      	mov	r3, r0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <OD_write_dummy+0x1a>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <OD_read_dummy+0x20>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <OD_read_dummy+0x20>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	e010      	b.n	8001fea <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d902      	bls.n	8001fd8 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	68b8      	ldr	r0, [r7, #8]
 8001fde:	f00c fac3 	bl	800e568 <memset>

    *countRead = count;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b092      	sub	sp, #72	; 0x48
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 800201a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3310      	adds	r3, #16
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800203a:	2b08      	cmp	r3, #8
 800203c:	d901      	bls.n	8002042 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 800203e:	2307      	movs	r3, #7
 8002040:	e090      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002042:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002046:	2b1f      	cmp	r3, #31
 8002048:	d81a      	bhi.n	8002080 <PDOconfigMap+0x8c>
 800204a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002056:	2214      	movs	r2, #20
 8002058:	2100      	movs	r1, #0
 800205a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800205c:	f00c fa84 	bl	800e568 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002060:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	4a3e      	ldr	r2, [pc, #248]	; (800216c <PDOconfigMap+0x178>)
 8002074:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <PDOconfigMap+0x17c>)
 800207a:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e071      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002084:	4619      	mov	r1, r3
 8002086:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002088:	f7ff fcc4 	bl	8001a14 <OD_find>
 800208c:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 800208e:	f107 0214 	add.w	r2, r7, #20
 8002092:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8002096:	2300      	movs	r3, #0
 8002098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800209a:	f7ff fd17 	bl	8001acc <OD_getSub>
 800209e:	4603      	mov	r3, r0
 80020a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 80020a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <PDOconfigMap+0xbe>
        return odRet;
 80020ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020b0:	e058      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <PDOconfigMap+0xc8>
 80020b8:	2308      	movs	r3, #8
 80020ba:	e000      	b.n	80020be <PDOconfigMap+0xca>
 80020bc:	2304      	movs	r3, #4
 80020be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 80020c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020ca:	4013      	ands	r3, r2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 80020d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d201      	bcs.n	80020ec <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80020e8:	2306      	movs	r3, #6
 80020ea:	e03b      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	461d      	mov	r5, r3
 80020f0:	f107 0414 	add.w	r4, r7, #20
 80020f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002100:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002106:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d129      	bne.n	8002162 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 800210e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002112:	2b1f      	cmp	r3, #31
 8002114:	d81f      	bhi.n	8002156 <PDOconfigMap+0x162>
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01b      	beq.n	8002156 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 800211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 800212a:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 800212c:	3308      	adds	r3, #8
 800212e:	440b      	add	r3, r1
 8002130:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	323c      	adds	r2, #60	; 0x3c
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800213a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	b2d1      	uxtb	r1, r2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	460a      	mov	r2, r1
 8002150:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002154:	e005      	b.n	8002162 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002156:	79fa      	ldrb	r2, [r7, #7]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	323c      	adds	r2, #60	; 0x3c
 800215c:	2100      	movs	r1, #0
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3748      	adds	r7, #72	; 0x48
 8002168:	46bd      	mov	sp, r7
 800216a:	bdb0      	pop	{r4, r5, r7, pc}
 800216c:	08001fa5 	.word	0x08001fa5
 8002170:	08001f7d 	.word	0x08001f7d

08002174 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800218a:	f107 021b 	add.w	r2, r7, #27
 800218e:	2301      	movs	r3, #1
 8002190:	2100      	movs	r1, #0
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff feb3 	bl	8001efe <OD_get_u8>
 8002198:	4603      	mov	r3, r0
 800219a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800219e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fe81 	bl	8001eb4 <OD_getIndex>
 80021b2:	4603      	mov	r3, r0
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80021ba:	f06f 030b 	mvn.w	r3, #11
 80021be:	e082      	b.n	80022c6 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021c6:	e05e      	b.n	8002286 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80021c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	3310      	adds	r3, #16
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 80021e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2d9      	uxtb	r1, r3
 80021e8:	f107 0214 	add.w	r2, r7, #20
 80021ec:	2301      	movs	r3, #1
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff feaf 	bl	8001f52 <OD_get_u32>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80021fa:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80021fe:	2b0e      	cmp	r3, #14
 8002200:	d03b      	beq.n	800227a <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002202:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00f      	beq.n	800222a <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fe4f 	bl	8001eb4 <OD_getIndex>
 8002216:	4603      	mov	r3, r0
 8002218:	021a      	lsls	r2, r3, #8
 800221a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800221e:	431a      	orrs	r2, r3
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002224:	f06f 030b 	mvn.w	r3, #11
 8002228:	e04d      	b.n	80022c6 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800222a:	6979      	ldr	r1, [r7, #20]
 800222c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff fedc 	bl	8001ff4 <PDOconfigMap>
 800223c:	4603      	mov	r3, r0
 800223e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002242:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	22ff      	movs	r2, #255	; 0xff
 8002254:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <PDO_initMapping+0xf0>
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002264:	7efb      	ldrb	r3, [r7, #27]
 8002266:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800226a:	429a      	cmp	r2, r3
 800226c:	d206      	bcs.n	800227c <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	4413      	add	r3, r2
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	e000      	b.n	800227c <PDO_initMapping+0x108>
            continue;
 800227a:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800227c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002280:	3301      	adds	r3, #1
 8002282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800228a:	2b07      	cmp	r3, #7
 800228c:	d99c      	bls.n	80021c8 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2b08      	cmp	r3, #8
 8002292:	d805      	bhi.n	80022a0 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <PDO_initMapping+0x13a>
 800229a:	7efb      	ldrb	r3, [r7, #27]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <PDO_initMapping+0x13a>
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80022ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80022be:	7efa      	ldrb	r2, [r7, #27]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b08e      	sub	sp, #56	; 0x38
 80022d2:	af02      	add	r7, sp, #8
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <OD_write_PDO_mapping+0x28>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <OD_write_PDO_mapping+0x28>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	7c5b      	ldrb	r3, [r3, #17]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d901      	bls.n	80022fa <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 80022f6:	2309      	movs	r3, #9
 80022f8:	e086      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <OD_write_PDO_mapping+0x4a>
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	7b5b      	ldrb	r3, [r3, #13]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <OD_write_PDO_mapping+0x4e>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	7c5b      	ldrb	r3, [r3, #17]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002318:	2302      	movs	r3, #2
 800231a:	e075      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	7c5b      	ldrb	r3, [r3, #17]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d14d      	bne.n	80023c0 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f7ff fd8b 	bl	8001e40 <CO_getUint8>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        size_t pdoDataLength = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002334:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002338:	2b08      	cmp	r3, #8
 800233a:	d901      	bls.n	8002340 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 800233c:	2307      	movs	r3, #7
 800233e:	e063      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002346:	e01e      	b.n	8002386 <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002348:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	3310      	adds	r3, #16
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	4413      	add	r3, r2
 800235a:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d901      	bls.n	8002374 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002370:	2306      	movs	r3, #6
 8002372:	e049      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4413      	add	r3, r2
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800237c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002380:	3301      	adds	r3, #1
 8002382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002386:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800238a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800238e:	429a      	cmp	r2, r3
 8002390:	d3da      	bcc.n	8002348 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	2b08      	cmp	r3, #8
 8002396:	d901      	bls.n	800239c <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002398:	2307      	movs	r3, #7
 800239a:	e035      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <OD_write_PDO_mapping+0xe0>
 80023a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 80023aa:	230f      	movs	r3, #15
 80023ac:	e02c      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80023bc:	735a      	strb	r2, [r3, #13]
 80023be:	e01c      	b.n	80023fa <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f7ff fd5a 	bl	8001e7a <CO_getUint32>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	7c5b      	ldrb	r3, [r3, #17]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	4601      	mov	r1, r0
 80023e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023e2:	f7ff fe07 	bl	8001ff4 <PDOconfigMap>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 80023ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <OD_write_PDO_mapping+0x12c>
            return odRet;
 80023f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80023f8:	e006      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fa8d 	bl	8001920 <OD_writeOriginal>
 8002406:	4603      	mov	r3, r0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3730      	adds	r7, #48	; 0x30
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fa23 	bl	8001870 <OD_readOriginal>
 800242a:	4603      	mov	r3, r0
 800242c:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 800242e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d134      	bne.n	80024a0 <OD_read_PDO_commParam+0x90>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	7c5b      	ldrb	r3, [r3, #17]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d130      	bne.n	80024a0 <OD_read_PDO_commParam+0x90>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b04      	cmp	r3, #4
 8002444:	d12c      	bne.n	80024a0 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 800244c:	68b8      	ldr	r0, [r7, #8]
 800244e:	f7ff fd14 	bl	8001e7a <CO_getUint32>
 8002452:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245c:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 800245e:	8a7b      	ldrh	r3, [r7, #18]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d011      	beq.n	8002488 <OD_read_PDO_commParam+0x78>
 8002464:	8a7a      	ldrh	r2, [r7, #18]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800246c:	4619      	mov	r1, r3
 800246e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002472:	400b      	ands	r3, r1
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8002484:	4313      	orrs	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <OD_read_PDO_commParam+0x88>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002496:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002498:	69f9      	ldr	r1, [r7, #28]
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	f7ff fcfb 	bl	8001e96 <CO_setUint32>
    }

    return returnCode;
 80024a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3305      	adds	r3, #5
 80024c8:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80024d0:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03e      	beq.n	8002558 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	7b1b      	ldrb	r3, [r3, #12]
 80024de:	7cfa      	ldrb	r2, [r7, #19]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d334      	bcc.n	800254e <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	7b1b      	ldrb	r3, [r3, #12]
 80024e8:	7cfa      	ldrb	r2, [r7, #19]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d105      	bne.n	80024fa <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <CO_PDO_receive+0x58>
 80024f4:	230b      	movs	r3, #11
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	e004      	b.n	8002504 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 80024fa:	7ffb      	ldrb	r3, [r7, #31]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <CO_PDO_receive+0x58>
 8002500:	230d      	movs	r3, #13
 8002502:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <CO_PDO_receive+0x80>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002528:	2301      	movs	r3, #1
 800252a:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 800252c:	7fbb      	ldrb	r3, [r7, #30]
 800252e:	332a      	adds	r3, #42	; 0x2a
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	2208      	movs	r2, #8
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f00c f89e 	bl	800e67c <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002540:	7fba      	ldrb	r2, [r7, #30]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	3252      	adds	r2, #82	; 0x52
 8002546:	2101      	movs	r1, #1
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800254c:	e004      	b.n	8002558 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800254e:	7ffb      	ldrb	r3, [r7, #31]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002554:	230c      	movs	r3, #12
 8002556:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	7ffa      	ldrb	r2, [r7, #31]
 800255c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b092      	sub	sp, #72	; 0x48
 800256c:	af04      	add	r7, sp, #16
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <OD_write_14xx+0x26>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <OD_write_14xx+0x26>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <OD_write_14xx+0x26>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d901      	bls.n	8002592 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800258e:	2309      	movs	r3, #9
 8002590:	e0ff      	b.n	8002792 <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00c f869 	bl	800e67c <memcpy>

    switch (stream->subIndex) {
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	7c5b      	ldrb	r3, [r3, #17]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	f000 80d4 	beq.w	800275c <OD_write_14xx+0x1f4>
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	f300 80e4 	bgt.w	8002782 <OD_write_14xx+0x21a>
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d003      	beq.n	80025c6 <OD_write_14xx+0x5e>
 80025be:	2b02      	cmp	r3, #2
 80025c0:	f000 80a5 	beq.w	800270e <OD_write_14xx+0x1a6>
 80025c4:	e0dd      	b.n	8002782 <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 80025c6:	68b8      	ldr	r0, [r7, #8]
 80025c8:	f7ff fc57 	bl	8001e7a <CO_getUint32>
 80025cc:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	43db      	mvns	r3, r3
 80025dc:	0fdb      	lsrs	r3, r3, #31
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <OD_write_14xx+0x234>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13d      	bne.n	8002668 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <OD_write_14xx+0x9e>
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <OD_write_14xx+0x9e>
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002600:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002602:	429a      	cmp	r2, r3
 8002604:	d130      	bne.n	8002668 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d026      	beq.n	800265a <OD_write_14xx+0xf2>
 800260c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260e:	2b7f      	cmp	r3, #127	; 0x7f
 8002610:	d92a      	bls.n	8002668 <OD_write_14xx+0x100>
 8002612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002618:	d903      	bls.n	8002622 <OD_write_14xx+0xba>
 800261a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002620:	d922      	bls.n	8002668 <OD_write_14xx+0x100>
 8002622:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002624:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002628:	d903      	bls.n	8002632 <OD_write_14xx+0xca>
 800262a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002630:	d31a      	bcc.n	8002668 <OD_write_14xx+0x100>
 8002632:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002634:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002638:	d903      	bls.n	8002642 <OD_write_14xx+0xda>
 800263a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800263c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002640:	d312      	bcc.n	8002668 <OD_write_14xx+0x100>
 8002642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002644:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002648:	d303      	bcc.n	8002652 <OD_write_14xx+0xea>
 800264a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800264c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002650:	d30a      	bcc.n	8002668 <OD_write_14xx+0x100>
 8002652:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002658:	d806      	bhi.n	8002668 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <OD_write_14xx+0x104>
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	7b5b      	ldrb	r3, [r3, #13]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002668:	230f      	movs	r3, #15
 800266a:	e092      	b.n	8002792 <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	d105      	bne.n	8002682 <OD_write_14xx+0x11a>
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800267c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800267e:	429a      	cmp	r2, r3
 8002680:	d07e      	beq.n	8002780 <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002688:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800268a:	429a      	cmp	r2, r3
 800268c:	d108      	bne.n	80026a0 <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbfb 	bl	8001e96 <CO_setUint32>
            }
            if (!valid) {
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <OD_write_14xx+0x142>
                CAN_ID = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	6858      	ldr	r0, [r3, #4]
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 80026b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <OD_write_14xx+0x238>)
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80026c6:	f004 fe0f 	bl	80072e8 <CO_CANrxBufferInit>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <OD_write_14xx+0x184>
 80026d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <OD_write_14xx+0x184>
                PDO->valid = true;
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2201      	movs	r2, #1
 80026e0:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026e6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 80026ea:	e049      	b.n	8002780 <OD_write_14xx+0x218>
                PDO->valid = false;
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 8002702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03a      	beq.n	8002780 <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 800270a:	2309      	movs	r3, #9
 800270c:	e041      	b.n	8002792 <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800270e:	68b8      	ldr	r0, [r7, #8]
 8002710:	f7ff fb96 	bl	8001e40 <CO_getUint8>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800271a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800271e:	2bf0      	cmp	r3, #240	; 0xf0
 8002720:	d905      	bls.n	800272e <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002726:	2bfd      	cmp	r3, #253	; 0xfd
 8002728:	d801      	bhi.n	800272e <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 800272a:	230f      	movs	r3, #15
 800272c:	e031      	b.n	8002792 <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800272e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002732:	2bf0      	cmp	r3, #240	; 0xf0
 8002734:	bf94      	ite	ls
 8002736:	2301      	movls	r3, #1
 8002738:	2300      	movhi	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	429a      	cmp	r2, r3
 8002748:	d003      	beq.n	8002752 <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 800275a:	e012      	b.n	8002782 <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f7ff fb7d 	bl	8001e5c <CO_getUint16>
 8002762:	4603      	mov	r3, r0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276c:	fb03 f202 	mul.w	r2, r3, r2
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 800277e:	e000      	b.n	8002782 <OD_write_14xx+0x21a>
        break;
 8002780:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002782:	f107 0110 	add.w	r1, r7, #16
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff f8c8 	bl	8001920 <OD_writeOriginal>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3738      	adds	r7, #56	; 0x38
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	3ffff800 	.word	0x3ffff800
 80027a0:	080024ad 	.word	0x080024ad

080027a4 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b090      	sub	sp, #64	; 0x40
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <CO_RPDO_init+0x36>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <CO_RPDO_init+0x36>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <CO_RPDO_init+0x36>
 80027c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <CO_RPDO_init+0x36>
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	e118      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 80027e0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80027e4:	2100      	movs	r1, #0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f00b febe 	bl	800e568 <memset>

    /* Configure object variables */
    PDO->em = em;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027f6:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800280e:	f7ff fcb1 	bl	8002174 <PDO_initMapping>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002818:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <CO_RPDO_init+0x82>
        return ret;
 8002820:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002824:	e0f5      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 800282a:	f107 0218 	add.w	r2, r7, #24
 800282e:	2301      	movs	r3, #1
 8002830:	2101      	movs	r1, #1
 8002832:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002834:	f7ff fb8d 	bl	8001f52 <OD_get_u32>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800283e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 800284c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800284e:	f7ff fb31 	bl	8001eb4 <OD_getIndex>
 8002852:	4603      	mov	r3, r0
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800285e:	f06f 030b 	mvn.w	r3, #11
 8002862:	e0d6      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	43db      	mvns	r3, r3
 8002868:	0fdb      	lsrs	r3, r3, #31
 800286a:	b2db      	uxtb	r3, r3
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002876:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <CO_RPDO_init+0xf6>
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	7b5b      	ldrb	r3, [r3, #13]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <CO_RPDO_init+0xe8>
 8002886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <CO_RPDO_init+0xf6>
        valid = false;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <CO_RPDO_init+0xf6>
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <CO_RPDO_init+0x10a>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	e000      	b.n	80028b0 <CO_RPDO_init+0x10c>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80028b6:	221a      	movs	r2, #26
 80028b8:	2101      	movs	r1, #1
 80028ba:	f7fe f9c7 	bl	8000c4c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80028c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <CO_RPDO_init+0x13c>
 80028ce:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80028d0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80028d2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80028d6:	400b      	ands	r3, r1
 80028d8:	429a      	cmp	r2, r3
 80028da:	d101      	bne.n	80028e0 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 80028dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028de:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 80028e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80028e2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <CO_RPDO_init+0x278>)
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80028f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028f8:	f004 fcf6 	bl	80072e8 <CO_CANrxBufferInit>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8002902:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <CO_RPDO_init+0x16c>
        return ret;
 800290a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800290e:	e080      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002916:	23fe      	movs	r3, #254	; 0xfe
 8002918:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 800291a:	f107 0217 	add.w	r2, r7, #23
 800291e:	2301      	movs	r3, #1
 8002920:	2102      	movs	r1, #2
 8002922:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002924:	f7ff faeb 	bl	8001efe <OD_get_u8>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800292e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 800293c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800293e:	f7ff fab9 	bl	8001eb4 <OD_getIndex>
 8002942:	4603      	mov	r3, r0
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800294e:	f06f 030b 	mvn.w	r3, #11
 8002952:	e05e      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2bf0      	cmp	r3, #240	; 0xf0
 8002960:	bf94      	ite	ls
 8002962:	2301      	movls	r3, #1
 8002964:	2300      	movhi	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002974:	f107 0214 	add.w	r2, r7, #20
 8002978:	2301      	movs	r3, #1
 800297a:	2105      	movs	r1, #5
 800297c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800297e:	f7ff fad3 	bl	8001f28 <OD_get_u16>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8002988:	8abb      	ldrh	r3, [r7, #20]
 800298a:	461a      	mov	r2, r3
 800298c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002990:	fb03 f202 	mul.w	r2, r3, r2
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	2201      	movs	r2, #1
 800299e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029b0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80029b8:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80029c0:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <CO_RPDO_init+0x27c>)
 80029d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <CO_RPDO_init+0x280>)
 80029d8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <CO_RPDO_init+0x284>)
 80029e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <CO_RPDO_init+0x288>)
 80029f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029fa:	4619      	mov	r1, r3
 80029fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029fe:	f7ff fa6a 	bl	8001ed6 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a0c:	f7ff fa63 	bl	8001ed6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3730      	adds	r7, #48	; 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	080024ad 	.word	0x080024ad
 8002a20:	08002411 	.word	0x08002411
 8002a24:	08002569 	.word	0x08002569
 8002a28:	08001871 	.word	0x08001871
 8002a2c:	080022cf 	.word	0x080022cf

08002a30 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b097      	sub	sp, #92	; 0x5c
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 810c 	beq.w	8002c64 <CO_RPDO_process+0x234>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8108 	beq.w	8002c64 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <CO_RPDO_process+0x36>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80ff 	bne.w	8002c64 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a6c:	2b0a      	cmp	r3, #10
 8002a6e:	d928      	bls.n	8002ac2 <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a76:	2b0b      	cmp	r3, #11
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d102      	bne.n	8002a92 <CO_RPDO_process+0x62>
 8002a8c:	f248 2310 	movw	r3, #33296	; 0x8210
 8002a90:	e001      	b.n	8002a96 <CO_RPDO_process+0x66>
 8002a92:	f248 2320 	movw	r3, #33312	; 0x8220
 8002a96:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aa4:	9200      	str	r2, [sp, #0]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aaa:	f7fe f8cf 	bl	8000c4c <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <CO_RPDO_process+0xbe>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <CO_RPDO_process+0xbe>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <CO_RPDO_process+0xbe>
            bufNo = 1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002aee:	2300      	movs	r3, #0
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002af2:	e065      	b.n	8002bc0 <CO_RPDO_process+0x190>
            rpdoReceived = true;
 8002af4:	2301      	movs	r3, #1
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8002af8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002afc:	332a      	adds	r3, #42	; 0x2a
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002b06:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3252      	adds	r2, #82	; 0x52
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002b1a:	e04b      	b.n	8002bb4 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002b1c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3310      	adds	r3, #16
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2c:	4413      	add	r3, r2
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	330c      	adds	r3, #12
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8002b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d901      	bls.n	8002b4e <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8002b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d912      	bls.n	8002b7e <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00b fd01 	bl	800e568 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8002b66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b70:	4618      	mov	r0, r3
 8002b72:	f00b fd83 	bl	800e67c <memcpy>
                    dataOD = buf;
 8002b76:	f107 0318 	add.w	r3, r7, #24
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	e001      	b.n	8002b82 <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	699c      	ldr	r4, [r3, #24]
 8002b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b96:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8002b98:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba6:	4413      	add	r3, r2
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002baa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	7b5b      	ldrb	r3, [r3, #13]
 8002bb8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3ad      	bcc.n	8002b1c <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002bc0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3252      	adds	r2, #82	; 0x52
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d191      	bne.n	8002af4 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d058      	beq.n	8002c8c <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8002bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d90a      	bls.n	8002c06 <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2217      	movs	r2, #23
 8002c00:	2100      	movs	r1, #0
 8002c02:	f7fe f823 	bl	8000c4c <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ) {
 8002c0e:	e03d      	b.n	8002c8c <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d038      	beq.n	8002c8c <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d230      	bcs.n	8002c8c <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	441a      	add	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d920      	bls.n	8002c8c <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f248 2350 	movw	r3, #33360	; 0x8250
 8002c5a:	2217      	movs	r2, #23
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	f7fd fff5 	bl	8000c4c <CO_error>
    ) {
 8002c62:	e013      	b.n	8002c8c <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <CO_RPDO_process+0x242>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8002c8a:	e000      	b.n	8002c8e <CO_RPDO_process+0x25e>
    ) {
 8002c8c:	bf00      	nop
}
 8002c8e:	bf00      	nop
 8002c90:	3754      	adds	r7, #84	; 0x54
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
	...

08002c98 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b093      	sub	sp, #76	; 0x4c
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <OD_write_18xx+0x26>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <OD_write_18xx+0x26>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <OD_write_18xx+0x26>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d901      	bls.n	8002cc2 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	e136      	b.n	8002f30 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00b fcd1 	bl	800e67c <memcpy>

    switch (stream->subIndex) {
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	7c5b      	ldrb	r3, [r3, #17]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	f200 811d 	bhi.w	8002f20 <OD_write_18xx+0x288>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <OD_write_18xx+0x54>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002e3b 	.word	0x08002e3b
 8002cf4:	08002ea1 	.word	0x08002ea1
 8002cf8:	08002f21 	.word	0x08002f21
 8002cfc:	08002ecf 	.word	0x08002ecf
 8002d00:	08002ef3 	.word	0x08002ef3
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002d04:	68b8      	ldr	r0, [r7, #8]
 8002d06:	f7ff f8b8 	bl	8001e7a <CO_getUint32>
 8002d0a:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	0fdb      	lsrs	r3, r3, #31
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <OD_write_18xx+0x2a0>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13d      	bne.n	8002da6 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <OD_write_18xx+0xac>
 8002d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <OD_write_18xx+0xac>
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002d3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d130      	bne.n	8002da6 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d026      	beq.n	8002d98 <OD_write_18xx+0x100>
 8002d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d4e:	d92a      	bls.n	8002da6 <OD_write_18xx+0x10e>
 8002d50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d903      	bls.n	8002d60 <OD_write_18xx+0xc8>
 8002d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d5a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002d5e:	d922      	bls.n	8002da6 <OD_write_18xx+0x10e>
 8002d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d62:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002d66:	d903      	bls.n	8002d70 <OD_write_18xx+0xd8>
 8002d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d6e:	d31a      	bcc.n	8002da6 <OD_write_18xx+0x10e>
 8002d70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d76:	d903      	bls.n	8002d80 <OD_write_18xx+0xe8>
 8002d78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d7a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002d7e:	d312      	bcc.n	8002da6 <OD_write_18xx+0x10e>
 8002d80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d82:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002d86:	d303      	bcc.n	8002d90 <OD_write_18xx+0xf8>
 8002d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d8e:	d30a      	bcc.n	8002da6 <OD_write_18xx+0x10e>
 8002d90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d96:	d806      	bhi.n	8002da6 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <OD_write_18xx+0x112>
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	7b5b      	ldrb	r3, [r3, #13]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8002da6:	230f      	movs	r3, #15
 8002da8:	e0c2      	b.n	8002f30 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d106      	bne.n	8002dc2 <OD_write_18xx+0x12a>
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002dba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	f000 80ae 	beq.w	8002f1e <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002dc8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d108      	bne.n	8002de0 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f85b 	bl	8001e96 <CO_setUint32>
            }
            if (!valid) {
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <OD_write_18xx+0x152>
                CAN_ID = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	6858      	ldr	r0, [r3, #4]
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfa:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002dfe:	2af0      	cmp	r2, #240	; 0xf0
 8002e00:	bf94      	ite	ls
 8002e02:	2201      	movls	r2, #1
 8002e04:	2200      	movhi	r2, #0
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	4614      	mov	r4, r2
 8002e0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002e0c:	9401      	str	r4, [sp, #4]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2300      	movs	r3, #0
 8002e12:	f004 fac7 	bl	80073a4 <CO_CANtxBufferInit>
 8002e16:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e086      	b.n	8002f30 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002e34:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 8002e38:	e071      	b.n	8002f1e <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002e3a:	68b8      	ldr	r0, [r7, #8]
 8002e3c:	f7ff f800 	bl	8001e40 <CO_getUint8>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e4a:	2bf0      	cmp	r3, #240	; 0xf0
 8002e4c:	d905      	bls.n	8002e5a <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e52:	2bfd      	cmp	r3, #253	; 0xfd
 8002e54:	d801      	bhi.n	8002e5a <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002e56:	230f      	movs	r3, #15
 8002e58:	e06a      	b.n	8002f30 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5e:	2bf0      	cmp	r3, #240	; 0xf0
 8002e60:	bf94      	ite	ls
 8002e62:	2301      	movls	r3, #1
 8002e64:	2300      	movhi	r3, #0
 8002e66:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002e6e:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	22ff      	movs	r2, #255	; 0xff
 8002e74:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e7e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2201      	movs	r2, #1
 8002e86:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8002e9e:	e03f      	b.n	8002f20 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	e041      	b.n	8002f30 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002eac:	68b8      	ldr	r0, [r7, #8]
 8002eae:	f7fe ffd5 	bl	8001e5c <CO_getUint16>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	fb03 f202 	mul.w	r2, r3, r2
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 8002ecc:	e028      	b.n	8002f20 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f7fe ffc4 	bl	8001e5c <CO_getUint16>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8002ef0:	e016      	b.n	8002f20 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f7fe ffa4 	bl	8001e40 <CO_getUint8>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <OD_write_18xx+0x276>
 8002f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f0a:	2bf0      	cmp	r3, #240	; 0xf0
 8002f0c:	d901      	bls.n	8002f12 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	e00e      	b.n	8002f30 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002f18:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 8002f1c:	e000      	b.n	8002f20 <OD_write_18xx+0x288>
        break;
 8002f1e:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002f20:	f107 0114 	add.w	r1, r7, #20
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7fe fcf9 	bl	8001920 <OD_writeOriginal>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3744      	adds	r7, #68	; 0x44
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	3ffff800 	.word	0x3ffff800

08002f3c <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	e14f      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002f78:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f00b faf2 	bl	800e568 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fa6:	f7ff f8e5 	bl	8002174 <PDO_initMapping>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002fb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <CO_TPDO_init+0x82>
        return ret;
 8002fb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002fbc:	e12c      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002fbe:	23fe      	movs	r3, #254	; 0xfe
 8002fc0:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002fc2:	f107 021b 	add.w	r2, r7, #27
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	2102      	movs	r1, #2
 8002fca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fcc:	f7fe ff97 	bl	8001efe <OD_get_u8>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002fd6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8002fe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fe6:	f7fe ff65 	bl	8001eb4 <OD_getIndex>
 8002fea:	4603      	mov	r3, r0
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002ff6:	f06f 030b 	mvn.w	r3, #11
 8002ffa:	e10d      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002ffc:	7efb      	ldrb	r3, [r7, #27]
 8002ffe:	2bfd      	cmp	r3, #253	; 0xfd
 8003000:	d804      	bhi.n	800300c <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003002:	7efb      	ldrb	r3, [r7, #27]
 8003004:	2bf0      	cmp	r3, #240	; 0xf0
 8003006:	d901      	bls.n	800300c <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003008:	23fe      	movs	r3, #254	; 0xfe
 800300a:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 800300c:	7efa      	ldrb	r2, [r7, #27]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003020:	f107 0214 	add.w	r2, r7, #20
 8003024:	2301      	movs	r3, #1
 8003026:	2101      	movs	r1, #1
 8003028:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800302a:	f7fe ff92 	bl	8001f52 <OD_get_u32>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003034:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003044:	f7fe ff36 	bl	8001eb4 <OD_getIndex>
 8003048:	4603      	mov	r3, r0
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003054:	f06f 030b 	mvn.w	r3, #11
 8003058:	e0de      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	43db      	mvns	r3, r3
 800305e:	0fdb      	lsrs	r3, r3, #31
 8003060:	b2db      	uxtb	r3, r3
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800306c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <CO_TPDO_init+0x154>
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	7b5b      	ldrb	r3, [r3, #13]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <CO_TPDO_init+0x146>
 800307c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <CO_TPDO_init+0x154>
        valid = false;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <CO_TPDO_init+0x154>
 800308c:	2301      	movs	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <CO_TPDO_init+0x168>
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	e000      	b.n	80030a6 <CO_TPDO_init+0x16a>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80030ac:	221a      	movs	r2, #26
 80030ae:	2101      	movs	r1, #1
 80030b0:	f7fd fdcc 	bl	8000c4c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80030be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <CO_TPDO_init+0x19a>
 80030c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030c6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80030c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80030cc:	400b      	ands	r3, r1
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d101      	bne.n	80030d6 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80030d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030d4:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80030e0:	2af0      	cmp	r2, #240	; 0xf0
 80030e2:	bf94      	ite	ls
 80030e4:	2201      	movls	r2, #1
 80030e6:	2200      	movhi	r2, #0
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4610      	mov	r0, r2
 80030ec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030ee:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80030f2:	9001      	str	r0, [sp, #4]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80030fa:	f004 f953 	bl	80073a4 <CO_CANtxBufferInit>
 80030fe:	4602      	mov	r2, r0
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e080      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311a:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003124:	f107 0212 	add.w	r2, r7, #18
 8003128:	2301      	movs	r3, #1
 800312a:	2103      	movs	r1, #3
 800312c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800312e:	f7fe fefb 	bl	8001f28 <OD_get_u16>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003138:	f107 0210 	add.w	r2, r7, #16
 800313c:	2301      	movs	r3, #1
 800313e:	2105      	movs	r1, #5
 8003140:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003142:	f7fe fef1 	bl	8001f28 <OD_get_u16>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 800314c:	8a7b      	ldrh	r3, [r7, #18]
 800314e:	461a      	mov	r2, r3
 8003150:	2364      	movs	r3, #100	; 0x64
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 800315e:	8a3b      	ldrh	r3, [r7, #16]
 8003160:	461a      	mov	r2, r3
 8003162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8003180:	2301      	movs	r3, #1
 8003182:	2106      	movs	r1, #6
 8003184:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003186:	f7fe feba 	bl	8001efe <OD_get_u8>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80031b6:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80031be:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031c6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	4a12      	ldr	r2, [pc, #72]	; (8003220 <CO_TPDO_init+0x2e4>)
 80031d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <CO_TPDO_init+0x2e8>)
 80031de:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <CO_TPDO_init+0x2ec>)
 80031ee:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <CO_TPDO_init+0x2f0>)
 80031f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003200:	4619      	mov	r1, r3
 8003202:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003204:	f7fe fe67 	bl	8001ed6 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800320e:	4619      	mov	r1, r3
 8003210:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003212:	f7fe fe60 	bl	8001ed6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3730      	adds	r7, #48	; 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	08002411 	.word	0x08002411
 8003224:	08002c99 	.word	0x08002c99
 8003228:	08001871 	.word	0x08001871
 800322c:	080022cf 	.word	0x080022cf

08003230 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b091      	sub	sp, #68	; 0x44
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003242:	3305      	adds	r3, #5
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <CO_TPDOsend+0x2a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003256:	2bfd      	cmp	r3, #253	; 0xfd
 8003258:	d901      	bls.n	800325e <CO_TPDOsend+0x2e>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <CO_TPDOsend+0x30>
 800325e:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003262:	2300      	movs	r3, #0
 8003264:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003268:	e062      	b.n	8003330 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800326a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3310      	adds	r3, #16
 8003278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327a:	4413      	add	r3, r2
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	2b08      	cmp	r3, #8
 8003292:	d901      	bls.n	8003298 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003294:	2308      	movs	r3, #8
 8003296:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329c:	429a      	cmp	r2, r3
 800329e:	d90a      	bls.n	80032b6 <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 80032a0:	f107 0310 	add.w	r3, r7, #16
 80032a4:	2208      	movs	r2, #8
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f00b f95d 	bl	800e568 <memset>
            dataTPDOCopy = buf;
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
 80032b4:	e001      	b.n	80032ba <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	695c      	ldr	r4, [r3, #20]
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032cc:	6a38      	ldr	r0, [r7, #32]
 80032ce:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80032d0:	7ffa      	ldrb	r2, [r7, #31]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032da:	429a      	cmp	r2, r3
 80032dc:	d906      	bls.n	80032ec <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 80032de:	7ffa      	ldrb	r2, [r7, #31]
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4619      	mov	r1, r3
 80032e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032e8:	f00b f9c8 	bl	800e67c <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80032ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	323c      	adds	r2, #60	; 0x3c
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <CO_TPDOsend+0xee>
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800330e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003310:	440b      	add	r3, r1
 8003312:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003316:	4313      	orrs	r3, r2
 8003318:	b2da      	uxtb	r2, r3
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003322:	4413      	add	r3, r2
 8003324:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003326:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800332a:	3301      	adds	r3, #1
 800332c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	7b5b      	ldrb	r3, [r3, #13]
 8003334:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003338:	429a      	cmp	r2, r3
 800333a:	d396      	bcc.n	800326a <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f004 f895 	bl	8007498 <CO_CANsend>
 800336e:	4603      	mov	r3, r0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3744      	adds	r7, #68	; 0x44
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}

08003378 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80dc 	beq.w	800354c <CO_TPDO_process+0x1d4>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80d8 	beq.w	800354c <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80033ac:	2bfd      	cmp	r3, #253	; 0xfd
 80033ae:	d946      	bls.n	800343e <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d205      	bcs.n	80033d2 <CO_TPDO_process+0x5a>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	e000      	b.n	80033d4 <CO_TPDO_process+0x5c>
 80033d2:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d123      	bne.n	800343e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e01b      	b.n	8003434 <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80033fc:	7ffa      	ldrb	r2, [r7, #31]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	323c      	adds	r2, #60	; 0x3c
 8003402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003406:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00f      	beq.n	800342e <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	440b      	add	r3, r1
 8003418:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800341c:	4013      	ands	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 800342c:	e007      	b.n	800343e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	3301      	adds	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	7b5b      	ldrb	r3, [r3, #13]
 8003438:	7ffa      	ldrb	r2, [r7, #31]
 800343a:	429a      	cmp	r2, r3
 800343c:	d3de      	bcc.n	80033fc <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003444:	2bfd      	cmp	r3, #253	; 0xfd
 8003446:	d91d      	bls.n	8003484 <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d205      	bcs.n	8003460 <CO_TPDO_process+0xe8>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	e000      	b.n	8003462 <CO_TPDO_process+0xea>
 8003460:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800346e:	2b00      	cmp	r3, #0
 8003470:	d07f      	beq.n	8003572 <CO_TPDO_process+0x1fa>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003478:	2b00      	cmp	r3, #0
 800347a:	d17a      	bne.n	8003572 <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fed7 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003482:	e076      	b.n	8003572 <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800348a:	2b00      	cmp	r3, #0
 800348c:	d071      	beq.n	8003572 <CO_TPDO_process+0x1fa>
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d06e      	beq.n	8003572 <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d064      	beq.n	8003572 <CO_TPDO_process+0x1fa>
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff fec1 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80034ae:	e060      	b.n	8003572 <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80034b6:	2bff      	cmp	r3, #255	; 0xff
 80034b8:	d119      	bne.n	80034ee <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034c0:	7c5b      	ldrb	r3, [r3, #17]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22fe      	movs	r2, #254	; 0xfe
 80034d4:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80034d8:	e009      	b.n	80034ee <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80034f4:	2bfe      	cmp	r3, #254	; 0xfe
 80034f6:	d112      	bne.n	800351e <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034fe:	7c9a      	ldrb	r2, [r3, #18]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003506:	429a      	cmp	r2, r3
 8003508:	d133      	bne.n	8003572 <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe8a 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800351c:	e029      	b.n	8003572 <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003524:	3b01      	subs	r3, #1
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11c      	bne.n	8003572 <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fe73 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800354a:	e012      	b.n	8003572 <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	22ff      	movs	r2, #255	; 0xff
 800356c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8003570:	e000      	b.n	8003574 <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003572:	bf00      	nop
}
 8003574:	bf00      	nop
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <OD_getIndex+0x14>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	e000      	b.n	80035ca <OD_getIndex+0x16>
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <OD_mappable+0x1e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7c1b      	ldrb	r3, [r3, #16]
 80035e8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <OD_mappable+0x1e>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <OD_mappable+0x20>
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <OD_extension_init>:
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <OD_extension_init+0x14>
 8003612:	2305      	movs	r3, #5
 8003614:	e003      	b.n	800361e <OD_extension_init+0x1c>
    entry->extension = extension;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <OD_get_u8>:
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af02      	add	r7, sp, #8
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	460b      	mov	r3, r1
 8003638:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800363a:	7af9      	ldrb	r1, [r7, #11]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2301      	movs	r3, #1
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7fe fb51 	bl	8001cec <OD_get_value>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <OD_get_u32>:
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003664:	7af9      	ldrb	r1, [r7, #11]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2304      	movs	r3, #4
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7fe fb3c 	bl	8001cec <OD_get_value>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af02      	add	r7, sp, #8
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	460b      	mov	r3, r1
 800368c:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800368e:	1d3a      	adds	r2, r7, #4
 8003690:	7af9      	ldrb	r1, [r7, #11]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2304      	movs	r3, #4
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7fe fb5d 	bl	8001d58 <OD_set_value>
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3305      	adds	r3, #5
 80036c0:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d115      	bne.n	80036f4 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d103      	bne.n	80036d8 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 80036d6:	e00d      	b.n	80036f4 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	333c      	adds	r3, #60	; 0x3c
 80036e4:	7cfa      	ldrb	r2, [r7, #19]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f00a ffc7 	bl	800e67c <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2201      	movs	r2, #1
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	460b      	mov	r3, r1
 800370c:	80fb      	strh	r3, [r7, #6]
 800370e:	4613      	mov	r3, r2
 8003710:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	429a      	cmp	r2, r3
 800371a:	d106      	bne.n	800372a <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	429a      	cmp	r2, r3
 8003724:	d101      	bne.n	800372a <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8003726:	2300      	movs	r3, #0
 8003728:	e04e      	b.n	80037c8 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db02      	blt.n	8003742 <CO_SDOserver_init_canRxTx+0x46>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	b29b      	uxth	r3, r3
 8003740:	e000      	b.n	8003744 <CO_SDOserver_init_canRxTx+0x48>
 8003742:	2300      	movs	r3, #0
 8003744:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	db02      	blt.n	8003752 <CO_SDOserver_init_canRxTx+0x56>
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	b29b      	uxth	r3, r3
 8003750:	e000      	b.n	8003754 <CO_SDOserver_init_canRxTx+0x58>
 8003752:	2300      	movs	r3, #0
 8003754:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8003756:	8afb      	ldrh	r3, [r7, #22]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <CO_SDOserver_init_canRxTx+0x6e>
 800375c:	8abb      	ldrh	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	611a      	str	r2, [r3, #16]
 8003768:	e006      	b.n	8003778 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003778:	8afa      	ldrh	r2, [r7, #22]
 800377a:	88f9      	ldrh	r1, [r7, #6]
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <CO_SDOserver_init_canRxTx+0xd4>)
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800378c:	68b8      	ldr	r0, [r7, #8]
 800378e:	f003 fdab 	bl	80072e8 <CO_CANrxBufferInit>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	8aba      	ldrh	r2, [r7, #20]
 800379c:	88b9      	ldrh	r1, [r7, #4]
 800379e:	2300      	movs	r3, #0
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	2308      	movs	r3, #8
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2300      	movs	r3, #0
 80037a8:	f003 fdfc 	bl	80073a4 <CO_CANtxBufferInit>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80037ba:	23ff      	movs	r3, #255	; 0xff
 80037bc:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
    }

    return ret;
 80037c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	080036a9 	.word	0x080036a9

080037d4 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b08f      	sub	sp, #60	; 0x3c
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <OD_write_1201_additional+0x20>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <OD_write_1201_additional+0x20>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 80037f4:	2309      	movs	r3, #9
 80037f6:	e0f9      	b.n	80039ec <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	7c5b      	ldrb	r3, [r3, #17]
 8003802:	2b03      	cmp	r3, #3
 8003804:	f200 80e8 	bhi.w	80039d8 <OD_write_1201_additional+0x204>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <OD_write_1201_additional+0x3c>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003821 	.word	0x08003821
 8003814:	08003825 	.word	0x08003825
 8003818:	080038e9 	.word	0x080038e9
 800381c:	080039af 	.word	0x080039af
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8003820:	2304      	movs	r3, #4
 8003822:	e0e3      	b.n	80039ec <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f7ff feb7 	bl	8003598 <CO_getUint32>
 800382a:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003834:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	0fdb      	lsrs	r3, r3, #31
 8003848:	b2db      	uxtb	r3, r3
 800384a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <OD_write_1201_additional+0x220>)
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d134      	bne.n	80038c0 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <OD_write_1201_additional+0x98>
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <OD_write_1201_additional+0x98>
 8003864:	8afa      	ldrh	r2, [r7, #22]
 8003866:	8abb      	ldrh	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	d129      	bne.n	80038c0 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d028      	beq.n	80038c4 <OD_write_1201_additional+0xf0>
 8003872:	8afb      	ldrh	r3, [r7, #22]
 8003874:	2b7f      	cmp	r3, #127	; 0x7f
 8003876:	d923      	bls.n	80038c0 <OD_write_1201_additional+0xec>
 8003878:	8afb      	ldrh	r3, [r7, #22]
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d903      	bls.n	8003888 <OD_write_1201_additional+0xb4>
 8003880:	8afb      	ldrh	r3, [r7, #22]
 8003882:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003886:	d91b      	bls.n	80038c0 <OD_write_1201_additional+0xec>
 8003888:	8afb      	ldrh	r3, [r7, #22]
 800388a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800388e:	d903      	bls.n	8003898 <OD_write_1201_additional+0xc4>
 8003890:	8afb      	ldrh	r3, [r7, #22]
 8003892:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003896:	d313      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 8003898:	8afb      	ldrh	r3, [r7, #22]
 800389a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800389e:	d903      	bls.n	80038a8 <OD_write_1201_additional+0xd4>
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80038a6:	d30b      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80038ae:	d303      	bcc.n	80038b8 <OD_write_1201_additional+0xe4>
 80038b0:	8afb      	ldrh	r3, [r7, #22]
 80038b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b6:	d303      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 80038b8:	8afb      	ldrh	r3, [r7, #22]
 80038ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038be:	d901      	bls.n	80038c4 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 80038c0:	230f      	movs	r3, #15
 80038c2:	e093      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4603      	mov	r3, r0
 80038e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038e2:	f7ff ff0b 	bl	80036fc <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 80038e6:	e07a      	b.n	80039de <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80038e8:	68b8      	ldr	r0, [r7, #8]
 80038ea:	f7ff fe55 	bl	8003598 <CO_getUint32>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f8:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003904:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	43db      	mvns	r3, r3
 800390a:	0fdb      	lsrs	r3, r3, #31
 800390c:	b2db      	uxtb	r3, r3
 800390e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <OD_write_1201_additional+0x220>)
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d134      	bne.n	8003984 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <OD_write_1201_additional+0x15c>
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <OD_write_1201_additional+0x15c>
 8003928:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800392a:	8c3b      	ldrh	r3, [r7, #32]
 800392c:	429a      	cmp	r2, r3
 800392e:	d129      	bne.n	8003984 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d028      	beq.n	8003988 <OD_write_1201_additional+0x1b4>
 8003936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003938:	2b7f      	cmp	r3, #127	; 0x7f
 800393a:	d923      	bls.n	8003984 <OD_write_1201_additional+0x1b0>
 800393c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800393e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003942:	d903      	bls.n	800394c <OD_write_1201_additional+0x178>
 8003944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003946:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800394a:	d91b      	bls.n	8003984 <OD_write_1201_additional+0x1b0>
 800394c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800394e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003952:	d903      	bls.n	800395c <OD_write_1201_additional+0x188>
 8003954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003956:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800395a:	d313      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800395c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800395e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003962:	d903      	bls.n	800396c <OD_write_1201_additional+0x198>
 8003964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003966:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800396a:	d30b      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800396c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800396e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003972:	d303      	bcc.n	800397c <OD_write_1201_additional+0x1a8>
 8003974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800397a:	d303      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800397c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800397e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003982:	d901      	bls.n	8003988 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8003984:	230f      	movs	r3, #15
 8003986:	e031      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	9201      	str	r2, [sp, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4623      	mov	r3, r4
 80039a4:	4602      	mov	r2, r0
 80039a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039a8:	f7ff fea8 	bl	80036fc <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 80039ac:	e017      	b.n	80039de <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80039b4:	230b      	movs	r3, #11
 80039b6:	e019      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80039b8:	68b8      	ldr	r0, [r7, #8]
 80039ba:	f7ff fddf 	bl	800357c <CO_getUint8>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 80039c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <OD_write_1201_additional+0x200>
 80039cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da03      	bge.n	80039dc <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80039d4:	230f      	movs	r3, #15
 80039d6:	e009      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 80039d8:	230e      	movs	r3, #14
 80039da:	e007      	b.n	80039ec <OD_write_1201_additional+0x218>
            break;
 80039dc:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7fd ff9b 	bl	8001920 <OD_writeOriginal>
 80039ea:	4603      	mov	r3, r0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3734      	adds	r7, #52	; 0x34
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	3ffff800 	.word	0x3ffff800

080039f8 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e0f5      	b.n	8003c10 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003a30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d117      	bne.n	8003a7a <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <CO_SDOserver_init+0x60>
 8003a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da02      	bge.n	8003a5e <CO_SDOserver_init+0x66>
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e0d8      	b.n	8003c10 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003a66:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003a70:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	611a      	str	r2, [r3, #16]
 8003a78:	e0a4      	b.n	8003bc4 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fd9a 	bl	80035b4 <OD_getIndex>
 8003a80:	4603      	mov	r3, r0
 8003a82:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8003a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a86:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003a8a:	d123      	bne.n	8003ad4 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <CO_SDOserver_init+0xa2>
 8003a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da02      	bge.n	8003aa0 <CO_SDOserver_init+0xa8>
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e0b7      	b.n	8003c10 <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003abc:	2301      	movs	r3, #1
 8003abe:	2101      	movs	r1, #1
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fddc 	bl	800367e <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac8:	2301      	movs	r3, #1
 8003aca:	2102      	movs	r1, #2
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fdd6 	bl	800367e <OD_set_u32>
 8003ad2:	e077      	b.n	8003bc4 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8003ad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ad6:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003ada:	d96f      	bls.n	8003bbc <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8003adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ade:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8003ae2:	d26b      	bcs.n	8003bbc <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003ae4:	f107 021d 	add.w	r2, r7, #29
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2100      	movs	r1, #0
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fd9c 	bl	800362a <OD_get_u8>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8003af8:	f107 0218 	add.w	r2, r7, #24
 8003afc:	2301      	movs	r3, #1
 8003afe:	2101      	movs	r1, #1
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fda7 	bl	8003654 <OD_get_u32>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8003b0c:	f107 0214 	add.w	r2, r7, #20
 8003b10:	2301      	movs	r3, #1
 8003b12:	2102      	movs	r1, #2
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fd9d 	bl	8003654 <OD_get_u32>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8003b1e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
 8003b26:	7f7b      	ldrb	r3, [r7, #29]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d002      	beq.n	8003b32 <CO_SDOserver_init+0x13a>
 8003b2c:	7f7b      	ldrb	r3, [r7, #29]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8003b32:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
 8003b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8003b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <CO_SDOserver_init+0x156>
 8003b48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003b4e:	f06f 030b 	mvn.w	r3, #11
 8003b52:	e05d      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db05      	blt.n	8003b66 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	e000      	b.n	8003b68 <CO_SDOserver_init+0x170>
 8003b66:	2300      	movs	r3, #0
 8003b68:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db05      	blt.n	8003b7c <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	e000      	b.n	8003b7e <CO_SDOserver_init+0x186>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <CO_SDOserver_init+0x220>)
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <CO_SDOserver_init+0x224>)
 8003b90:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3354      	adds	r3, #84	; 0x54
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fd32 	bl	8003602 <OD_extension_init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 8003ba2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8003baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <CO_SDOserver_init+0x1be>
 8003bb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb4:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003bb6:	f06f 030b 	mvn.w	r3, #11
 8003bba:	e029      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	e026      	b.n	8003c10 <CO_SDOserver_init+0x218>
        ) {
 8003bc2:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003bd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003bde:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf2:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8003bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf8:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8003bfc:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003bfe:	9201      	str	r2, [sp, #4]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4603      	mov	r3, r0
 8003c04:	460a      	mov	r2, r1
 8003c06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fd77 	bl	80036fc <CO_SDOserver_init_canRxTx>
 8003c0e:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08001871 	.word	0x08001871
 8003c1c:	080037d5 	.word	0x080037d5

08003c20 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b08d      	sub	sp, #52	; 0x34
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	460b      	mov	r3, r1
 8003c30:	71fb      	strb	r3, [r7, #7]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (SDO->finished) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07b      	beq.n	8003d3e <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <validateAndWriteToOD+0x5a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d00f      	beq.n	8003c7a <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d901      	bls.n	8003c6a <validateAndWriteToOD+0x4a>
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003c68:	e000      	b.n	8003c6c <validateAndWriteToOD+0x4c>
 8003c6a:	4a77      	ldr	r2, [pc, #476]	; (8003e48 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	751a      	strb	r2, [r3, #20]
            return false;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e0df      	b.n	8003e3a <validateAndWriteToOD+0x21a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da3c      	bge.n	8003d06 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <validateAndWriteToOD+0x7c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d934      	bls.n	8003d06 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d82e      	bhi.n	8003d06 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <validateAndWriteToOD+0xba>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	621a      	str	r2, [r3, #32]
 8003d04:	e02d      	b.n	8003d62 <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
 8003d14:	e025      	b.n	8003d62 <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d020      	beq.n	8003d62 <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d201      	bcs.n	8003d2e <validateAndWriteToOD+0x10e>
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003d2c:	e000      	b.n	8003d30 <validateAndWriteToOD+0x110>
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	751a      	strb	r2, [r3, #20]
            return false;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e07d      	b.n	8003e3a <validateAndWriteToOD+0x21a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <validateAndWriteToOD+0x142>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d907      	bls.n	8003d62 <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003d56:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	751a      	strb	r2, [r3, #20]
            return false;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e06b      	b.n	8003e3a <validateAndWriteToOD+0x21a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3318      	adds	r3, #24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fc33 	bl	80035d6 <OD_mappable>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <validateAndWriteToOD+0x16a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7c:	f3ef 8210 	mrs	r2, PRIMASK
 8003d80:	61fa      	str	r2, [r7, #28]
  return(result);
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003d86:	b672      	cpsid	i
}
 8003d88:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 0018 	add.w	r0, r3, #24
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	47a0      	blx	r4
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <validateAndWriteToOD+0x1a2>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003dca:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d011      	beq.n	8003df6 <validateAndWriteToOD+0x1d6>
 8003dd2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d00c      	beq.n	8003df6 <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003ddc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fd ff65 	bl	8001cb0 <OD_getSDOabCode>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	751a      	strb	r2, [r3, #20]
        return false;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e021      	b.n	8003e3a <validateAndWriteToOD+0x21a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <validateAndWriteToOD+0x1f8>
 8003dfe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d107      	bne.n	8003e18 <validateAndWriteToOD+0x1f8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a0f      	ldr	r2, [pc, #60]	; (8003e48 <validateAndWriteToOD+0x228>)
 8003e0c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	751a      	strb	r2, [r3, #20]
        return false;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e010      	b.n	8003e3a <validateAndWriteToOD+0x21a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <validateAndWriteToOD+0x218>
 8003e20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <validateAndWriteToOD+0x218>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a06      	ldr	r2, [pc, #24]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003e2c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	751a      	strb	r2, [r3, #20]
        return false;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <validateAndWriteToOD+0x21a>
    }

    return true;
 8003e38:	2301      	movs	r3, #1
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3734      	adds	r7, #52	; 0x34
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd90      	pop	{r4, r7, pc}
 8003e42:	bf00      	nop
 8003e44:	06070012 	.word	0x06070012
 8003e48:	06070013 	.word	0x06070013

08003e4c <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b08f      	sub	sp, #60	; 0x3c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80b1 	bne.w	8003fd6 <readFromOd+0x18a>
 8003e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f080 80ac 	bcs.w	8003fd6 <readFromOd+0x18a>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e90:	4413      	add	r3, r2
 8003e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e94:	4619      	mov	r1, r3
 8003e96:	f00a fb4d 	bl	800e534 <memmove>
        SDO->bufOffsetRd = 0;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	f1c3 0320 	rsb	r3, r3, #32
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	4413      	add	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3318      	adds	r3, #24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fb85 	bl	80035d6 <OD_mappable>
 8003ecc:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <readFromOd+0x9a>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed8:	f3ef 8210 	mrs	r2, PRIMASK
 8003edc:	61fa      	str	r2, [r7, #28]
  return(result);
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee2:	b672      	cpsid	i
}
 8003ee4:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f103 0018 	add.w	r0, r3, #24
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef8:	47a0      	blx	r4
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <readFromOd+0xca>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003f16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d011      	beq.n	8003f42 <readFromOd+0xf6>
 8003f1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d00c      	beq.n	8003f42 <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003f28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd febf 	bl	8001cb0 <OD_getSDOabCode>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	751a      	strb	r2, [r3, #20]
            return false;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e04a      	b.n	8003fd8 <readFromOd+0x18c>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d022      	beq.n	8003f8e <readFromOd+0x142>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da1c      	bge.n	8003f8e <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8003f5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f60:	f7fc f986 	bl	8000270 <strlen>
 8003f64:	6338      	str	r0, [r7, #48]	; 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <readFromOd+0x124>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr < countRd) {
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d20a      	bcs.n	8003f8e <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	441a      	add	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <readFromOd+0x162>
 8003fa4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d110      	bne.n	8003fd0 <readFromOd+0x184>
            SDO->finished = false;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d90a      	bls.n	8003fd6 <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <readFromOd+0x194>)
 8003fc4:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	751a      	strb	r2, [r3, #20]
                return false;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e003      	b.n	8003fd8 <readFromOd+0x18c>
            }
        }
        else {
            SDO->finished = true;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	373c      	adds	r7, #60	; 0x3c
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	06040047 	.word	0x06040047

08003fe4 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b09b      	sub	sp, #108	; 0x6c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003ff8:	f06f 0301 	mvn.w	r3, #1
 8003ffc:	f000 bcfa 	b.w	80049f4 <CO_SDOserver_process+0xa10>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <CO_SDOserver_process+0x56>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	7d1b      	ldrb	r3, [r3, #20]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <CO_SDOserver_process+0x56>
 800402c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004038:	e2d1      	b.n	80045de <CO_SDOserver_process+0x5fa>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <CO_SDOserver_process+0x64>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800405a:	e2c0      	b.n	80045de <CO_SDOserver_process+0x5fa>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 82bd 	beq.w	80045de <CO_SDOserver_process+0x5fa>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	7d1b      	ldrb	r3, [r3, #20]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 80ce 	bne.w	800420c <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8004070:	2300      	movs	r3, #0
 8004072:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	2b20      	cmp	r3, #32
 8004080:	d103      	bne.n	800408a <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2211      	movs	r2, #17
 8004086:	751a      	strb	r2, [r3, #20]
 8004088:	e00f      	b.n	80040aa <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d105      	bne.n	80040a0 <CO_SDOserver_process+0xbc>
                upload = true;
 8004094:	2301      	movs	r3, #1
 8004096:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2221      	movs	r2, #33	; 0x21
 800409c:	751a      	strb	r2, [r3, #20]
 800409e:	e004      	b.n	80040aa <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 80040a0:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <CO_SDOserver_process+0x354>)
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d162      	bne.n	8004176 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 80040b8:	b21a      	sxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b21b      	sxth	r3, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7fd fc96 	bl	8001a14 <OD_find>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f103 0218 	add.w	r2, r3, #24
 80040f4:	2300      	movs	r3, #0
 80040f6:	f7fd fce9 	bl	8001acc <OD_getSub>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004100:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004108:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800410c:	4618      	mov	r0, r3
 800410e:	f7fd fdcf 	bl	8001cb0 <OD_getSDOabCode>
 8004112:	4603      	mov	r3, r0
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	751a      	strb	r2, [r3, #20]
 800411c:	e02b      	b.n	8004176 <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 800412c:	4b83      	ldr	r3, [pc, #524]	; (800433c <CO_SDOserver_process+0x358>)
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	751a      	strb	r2, [r3, #20]
 8004136:	e01e      	b.n	8004176 <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 800414c:	4b7c      	ldr	r3, [pc, #496]	; (8004340 <CO_SDOserver_process+0x35c>)
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	751a      	strb	r2, [r3, #20]
 8004156:	e00e      	b.n	8004176 <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 800416c:	4b75      	ldr	r3, [pc, #468]	; (8004344 <CO_SDOserver_process+0x360>)
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004178:	2b00      	cmp	r3, #0
 800417a:	d047      	beq.n	800420c <CO_SDOserver_process+0x228>
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d144      	bne.n	800420c <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 80041a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041a6:	2300      	movs	r3, #0
 80041a8:	2207      	movs	r2, #7
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff fe4e 	bl	8003e4c <readFromOd>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02a      	beq.n	800420c <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01a      	beq.n	80041f4 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	665a      	str	r2, [r3, #100]	; 0x64
 80041d8:	e018      	b.n	800420c <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d011      	beq.n	800420c <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80041e8:	4b57      	ldr	r3, [pc, #348]	; (8004348 <CO_SDOserver_process+0x364>)
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	751a      	strb	r2, [r3, #20]
 80041f2:	e00b      	b.n	800420c <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fa:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db02      	blt.n	8004206 <CO_SDOserver_process+0x222>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	e000      	b.n	8004208 <CO_SDOserver_process+0x224>
 8004206:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	7d1b      	ldrb	r3, [r3, #20]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 81db 	beq.w	80045ce <CO_SDOserver_process+0x5ea>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	7d1b      	ldrb	r3, [r3, #20]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	f000 81d5 	beq.w	80045ce <CO_SDOserver_process+0x5ea>
        switch (SDO->state) {
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	7d1b      	ldrb	r3, [r3, #20]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	3b11      	subs	r3, #17
 800422c:	2b12      	cmp	r3, #18
 800422e:	f200 81be 	bhi.w	80045ae <CO_SDOserver_process+0x5ca>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <CO_SDOserver_process+0x254>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004285 	.word	0x08004285
 800423c:	080045af 	.word	0x080045af
 8004240:	08004467 	.word	0x08004467
 8004244:	080045af 	.word	0x080045af
 8004248:	080045af 	.word	0x080045af
 800424c:	080045af 	.word	0x080045af
 8004250:	080045af 	.word	0x080045af
 8004254:	080045af 	.word	0x080045af
 8004258:	080045af 	.word	0x080045af
 800425c:	080045af 	.word	0x080045af
 8004260:	080045af 	.word	0x080045af
 8004264:	080045af 	.word	0x080045af
 8004268:	080045af 	.word	0x080045af
 800426c:	080045af 	.word	0x080045af
 8004270:	080045af 	.word	0x080045af
 8004274:	080045af 	.word	0x080045af
 8004278:	0800455d 	.word	0x0800455d
 800427c:	080045af 	.word	0x080045af
 8004280:	08004565 	.word	0x08004565
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80af 	beq.w	80043f2 <CO_SDOserver_process+0x40e>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 800429a:	2304      	movs	r3, #4
 800429c:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	e007      	b.n	80042d2 <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 80042c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <CO_SDOserver_process+0x2ee>
 80042c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d801      	bhi.n	80042d2 <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 80042ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	2300      	movs	r3, #0
 80042d8:	84bb      	strh	r3, [r7, #36]	; 0x24
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80042e0:	f107 0320 	add.w	r3, r7, #32
 80042e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f00a f9c8 	bl	800e67c <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	da17      	bge.n	8004328 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 80042f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <CO_SDOserver_process+0x322>
 80042fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	429a      	cmp	r2, r3
 8004304:	d210      	bcs.n	8004328 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <CO_SDOserver_process+0x334>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <CO_SDOserver_process+0x336>
 8004318:	2302      	movs	r3, #2
 800431a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800431c:	4413      	add	r3, r2
 800431e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004324:	621a      	str	r2, [r3, #32]
                ) {
 8004326:	e021      	b.n	800436c <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8004328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10e      	bne.n	800434c <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004332:	621a      	str	r2, [r3, #32]
 8004334:	e01a      	b.n	800436c <CO_SDOserver_process+0x388>
 8004336:	bf00      	nop
 8004338:	05040001 	.word	0x05040001
 800433c:	06010000 	.word	0x06010000
 8004340:	06010001 	.word	0x06010001
 8004344:	06010002 	.word	0x06010002
 8004348:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 800434c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	429a      	cmp	r2, r3
 8004352:	d00b      	beq.n	800436c <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004358:	429a      	cmp	r2, r3
 800435a:	d901      	bls.n	8004360 <CO_SDOserver_process+0x37c>
 800435c:	4b97      	ldr	r3, [pc, #604]	; (80045bc <CO_SDOserver_process+0x5d8>)
 800435e:	e000      	b.n	8004362 <CO_SDOserver_process+0x37e>
 8004360:	4b97      	ldr	r3, [pc, #604]	; (80045c0 <CO_SDOserver_process+0x5dc>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	751a      	strb	r2, [r3, #20]
                    break;
 800436a:	e130      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3318      	adds	r3, #24
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f92e 	bl	80035d6 <OD_mappable>
 800437a:	63f8      	str	r0, [r7, #60]	; 0x3c

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <CO_SDOserver_process+0x3b0>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004386:	f3ef 8210 	mrs	r2, PRIMASK
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004390:	b672      	cpsid	i
}
 8004392:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f103 0018 	add.w	r0, r3, #24
 800439e:	f107 031c 	add.w	r3, r7, #28
 80043a2:	f107 0120 	add.w	r1, r7, #32
 80043a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a8:	47a0      	blx	r4
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <CO_SDOserver_process+0x3e2>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	bf00      	nop

                if (odRet != ODR_OK) {
 80043c6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <CO_SDOserver_process+0x400>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80043ce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fc6c 	bl	8001cb0 <OD_getSDOabCode>
 80043d8:	4603      	mov	r3, r0
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	751a      	strb	r2, [r3, #20]
                    break;
 80043e2:	e0f4      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2212      	movs	r2, #18
 80043e8:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 80043f0:	e0ed      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                if (SDO->CANrxData[0] & 0x01) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d028      	beq.n	8004452 <CO_SDOserver_process+0x46e>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3340      	adds	r3, #64	; 0x40
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	61bb      	str	r3, [r7, #24]
                    SDO->sizeInd = CO_SWAP_32(size);
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01e      	beq.n	8004458 <CO_SDOserver_process+0x474>
                        if (SDO->sizeInd > sizeInOd) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	429a      	cmp	r2, r3
 8004422:	d205      	bcs.n	8004430 <CO_SDOserver_process+0x44c>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004424:	4b65      	ldr	r3, [pc, #404]	; (80045bc <CO_SDOserver_process+0x5d8>)
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	751a      	strb	r2, [r3, #20]
                            break;
 800442e:	e0ce      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                        else if (SDO->sizeInd < sizeInOd
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004436:	429a      	cmp	r2, r3
 8004438:	d90e      	bls.n	8004458 <CO_SDOserver_process+0x474>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004440:	b25b      	sxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	db08      	blt.n	8004458 <CO_SDOserver_process+0x474>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004446:	4b5e      	ldr	r3, [pc, #376]	; (80045c0 <CO_SDOserver_process+0x5dc>)
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	751a      	strb	r2, [r3, #20]
                            break;
 8004450:	e0bd      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                    SDO->sizeInd = 0;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2212      	movs	r2, #18
 800445c:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004464:	e0b3      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d16d      	bne.n	8004550 <CO_SDOserver_process+0x56c>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                if (toggle != SDO->toggle) {
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80044a2:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d005      	beq.n	80044b6 <CO_SDOserver_process+0x4d2>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <CO_SDOserver_process+0x5e0>)
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	751a      	strb	r2, [r3, #20]
                    break;
 80044b4:	e08b      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044d4:	18d0      	adds	r0, r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	333d      	adds	r3, #61	; 0x3d
 80044da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044dc:	4619      	mov	r1, r3
 80044de:	f00a f8cd 	bl	800e67c <memcpy>
                SDO->bufOffsetWr += count;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	441a      	add	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <CO_SDOserver_process+0x53a>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	429a      	cmp	r2, r3
 8004510:	d905      	bls.n	800451e <CO_SDOserver_process+0x53a>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <CO_SDOserver_process+0x5d8>)
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	751a      	strb	r2, [r3, #20]
                    break;
 800451c:	e057      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <CO_SDOserver_process+0x550>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800452c:	f1c3 0320 	rsb	r3, r3, #32
 8004530:	2b08      	cmp	r3, #8
 8004532:	d809      	bhi.n	8004548 <CO_SDOserver_process+0x564>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004534:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fb6f 	bl	8003c20 <validateAndWriteToOD>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d041      	beq.n	80045cc <CO_SDOserver_process+0x5e8>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2214      	movs	r2, #20
 800454c:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 800454e:	e03e      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <CO_SDOserver_process+0x5e4>)
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	751a      	strb	r2, [r3, #20]
            break;
 800455a:	e038      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	; 0x22
 8004560:	751a      	strb	r2, [r3, #20]
            break;
 8004562:	e034      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800456e:	2b60      	cmp	r3, #96	; 0x60
 8004570:	d117      	bne.n	80045a2 <CO_SDOserver_process+0x5be>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                if (toggle != SDO->toggle) {
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004586:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800458a:	429a      	cmp	r2, r3
 800458c:	d005      	beq.n	800459a <CO_SDOserver_process+0x5b6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <CO_SDOserver_process+0x5e0>)
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	751a      	strb	r2, [r3, #20]
                    break;
 8004598:	e019      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2224      	movs	r2, #36	; 0x24
 800459e:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80045a0:	e015      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <CO_SDOserver_process+0x5e4>)
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	751a      	strb	r2, [r3, #20]
            break;
 80045ac:	e00f      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <CO_SDOserver_process+0x5e4>)
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	751a      	strb	r2, [r3, #20]
 80045b8:	e009      	b.n	80045ce <CO_SDOserver_process+0x5ea>
 80045ba:	bf00      	nop
 80045bc:	06070012 	.word	0x06070012
 80045c0:	06070013 	.word	0x06070013
 80045c4:	05030000 	.word	0x05030000
 80045c8:	05040001 	.word	0x05040001
                        break;
 80045cc:	bf00      	nop
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 80045de:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d11e      	bne.n	8004624 <CO_SDOserver_process+0x640>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d205      	bcs.n	80045fe <CO_SDOserver_process+0x61a>
            SDO->timeoutTimer += timeDifference_us;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	441a      	add	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004606:	429a      	cmp	r2, r3
 8004608:	d304      	bcc.n	8004614 <CO_SDOserver_process+0x630>
            abortCode = CO_SDO_AB_TIMEOUT;
 800460a:	4b9c      	ldr	r3, [pc, #624]	; (800487c <CO_SDOserver_process+0x898>)
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <CO_SDOserver_process+0x640>
            ret = CO_SDO_RT_transmittBufferFull;
 800461e:	2304      	movs	r3, #4
 8004620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004624:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004628:	2b01      	cmp	r3, #1
 800462a:	f040 81ab 	bne.w	8004984 <CO_SDOserver_process+0x9a0>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	3305      	adds	r3, #5
 8004634:	2208      	movs	r2, #8
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f009 ff95 	bl	800e568 <memset>

        switch (SDO->state) {
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	7d1b      	ldrb	r3, [r3, #20]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	3b12      	subs	r3, #18
 8004646:	2b12      	cmp	r3, #18
 8004648:	f200 8199 	bhi.w	800497e <CO_SDOserver_process+0x99a>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <CO_SDOserver_process+0x670>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	080046a1 	.word	0x080046a1
 8004658:	0800497f 	.word	0x0800497f
 800465c:	08004723 	.word	0x08004723
 8004660:	0800497f 	.word	0x0800497f
 8004664:	0800497f 	.word	0x0800497f
 8004668:	0800497f 	.word	0x0800497f
 800466c:	0800497f 	.word	0x0800497f
 8004670:	0800497f 	.word	0x0800497f
 8004674:	0800497f 	.word	0x0800497f
 8004678:	0800497f 	.word	0x0800497f
 800467c:	0800497f 	.word	0x0800497f
 8004680:	0800497f 	.word	0x0800497f
 8004684:	0800497f 	.word	0x0800497f
 8004688:	0800497f 	.word	0x0800497f
 800468c:	0800497f 	.word	0x0800497f
 8004690:	0800497f 	.word	0x0800497f
 8004694:	0800477f 	.word	0x0800477f
 8004698:	0800497f 	.word	0x0800497f
 800469c:	0800484d 	.word	0x0800484d
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2260      	movs	r2, #96	; 0x60
 80046a6:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80046ce:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f002 fed9 	bl	8007498 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <CO_SDOserver_process+0x718>
                SDO->state = CO_SDO_ST_IDLE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 80046fa:	e143      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                SDO->toggle = 0x00;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2213      	movs	r2, #19
 800471e:	751a      	strb	r2, [r3, #20]
            break;
 8004720:	e130      	b.n	8004984 <CO_SDOserver_process+0x9a0>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f042 0220 	orr.w	r2, r2, #32
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <CO_SDOserver_process+0x75e>
 800473e:	2210      	movs	r2, #16
 8004740:	e000      	b.n	8004744 <CO_SDOserver_process+0x760>
 8004742:	2200      	movs	r2, #0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f002 fe9c 	bl	8007498 <CO_CANsend>
            if (SDO->finished) {
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <CO_SDOserver_process+0x792>
                SDO->state = CO_SDO_ST_IDLE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8004774:	e106      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2213      	movs	r2, #19
 800477a:	751a      	strb	r2, [r3, #20]
            break;
 800477c:	e102      	b.n	8004984 <CO_SDOserver_process+0x9a0>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004782:	2b00      	cmp	r3, #0
 8004784:	d024      	beq.n	80047d0 <CO_SDOserver_process+0x7ec>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478a:	2b04      	cmp	r3, #4
 800478c:	d820      	bhi.n	80047d0 <CO_SDOserver_process+0x7ec>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f1c3 0304 	rsb	r3, r3, #4
 8004798:	b2db      	uxtb	r3, r3
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f103 0009 	add.w	r0, r3, #9
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047bc:	461a      	mov	r2, r3
 80047be:	f009 ff5d 	bl	800e67c <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047ce:	e020      	b.n	8004812 <CO_SDOserver_process+0x82e>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <CO_SDOserver_process+0x812>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2241      	movs	r2, #65	; 0x41
 80047e8:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	3309      	adds	r3, #9
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e003      	b.n	80047fe <CO_SDOserver_process+0x81a>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2223      	movs	r2, #35	; 0x23
 8004810:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004838:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f002 fe27 	bl	8007498 <CO_CANsend>
            break;
 800484a:	e09b      	b.n	8004984 <CO_SDOserver_process+0x9a0>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 800484c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004850:	2300      	movs	r3, #0
 8004852:	2207      	movs	r2, #7
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff faf9 	bl	8003e4c <readFromOd>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8090 	beq.w	8004982 <CO_SDOserver_process+0x99e>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800486c:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <CO_SDOserver_process+0x89c>
 8004878:	2210      	movs	r2, #16
 800487a:	e002      	b.n	8004882 <CO_SDOserver_process+0x89e>
 800487c:	05040000 	.word	0x05040000
 8004880:	2200      	movs	r2, #0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8004898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489a:	2b06      	cmp	r3, #6
 800489c:	d906      	bls.n	80048ac <CO_SDOserver_process+0x8c8>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01b      	beq.n	80048de <CO_SDOserver_process+0x8fa>
 80048a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a8:	2b07      	cmp	r3, #7
 80048aa:	d118      	bne.n	80048de <CO_SDOserver_process+0x8fa>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	795a      	ldrb	r2, [r3, #5]
 80048b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f1c3 0307 	rsb	r3, r3, #7
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80048dc:	e007      	b.n	80048ee <CO_SDOserver_process+0x90a>
            }
            else {
                SDO->timeoutTimer = 0;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2223      	movs	r2, #35	; 0x23
 80048e8:	751a      	strb	r2, [r3, #20]
                count = 7;
 80048ea:	2307      	movs	r3, #7
 80048ec:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	1d98      	adds	r0, r3, #6
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004900:	4413      	add	r3, r2
 8004902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004904:	4619      	mov	r1, r3
 8004906:	f009 feb9 	bl	800e67c <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800491e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01e      	beq.n	800496c <CO_SDOserver_process+0x988>
                if (SDO->sizeTran > SDO->sizeInd) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004936:	429a      	cmp	r2, r3
 8004938:	d905      	bls.n	8004946 <CO_SDOserver_process+0x962>
                    abortCode = CO_SDO_AB_DATA_LONG;
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <CO_SDOserver_process+0xa18>)
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	751a      	strb	r2, [r3, #20]
                    break;
 8004944:	e01e      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8004946:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10e      	bne.n	800496c <CO_SDOserver_process+0x988>
                         && SDO->sizeTran < SDO->sizeInd
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004956:	429a      	cmp	r2, r3
 8004958:	d208      	bcs.n	800496c <CO_SDOserver_process+0x988>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <CO_SDOserver_process+0xa1c>)
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_waitingResponse;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	751a      	strb	r2, [r3, #20]
                    break;
 800496a:	e00b      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f002 fd8e 	bl	8007498 <CO_CANsend>
            break;
 800497c:	e002      	b.n	8004984 <CO_SDOserver_process+0x9a0>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                break;
 8004982:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004984:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004988:	2b01      	cmp	r3, #1
 800498a:	d131      	bne.n	80049f0 <CO_SDOserver_process+0xa0c>
        if (SDO->state == CO_SDO_ST_ABORT) {
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	7d1b      	ldrb	r3, [r3, #20]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d12c      	bne.n	80049f0 <CO_SDOserver_process+0xa0c>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80049c8:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	3309      	adds	r3, #9
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f002 fd5a 	bl	8007498 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 80049ea:	23f6      	movs	r3, #246	; 0xf6
 80049ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80049f0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	376c      	adds	r7, #108	; 0x6c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}
 80049fc:	06070012 	.word	0x06070012
 8004a00:	06070013 	.word	0x06070013

08004a04 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <OD_getIndex+0x14>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	e000      	b.n	8004a52 <OD_getIndex+0x16>
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <OD_extension_init>:
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <OD_extension_init+0x14>
 8004a6e:	2305      	movs	r3, #5
 8004a70:	e003      	b.n	8004a7a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <OD_get_u8>:
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af02      	add	r7, sp, #8
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	460b      	mov	r3, r1
 8004a94:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004a96:	7af9      	ldrb	r1, [r7, #11]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7fd f923 	bl	8001cec <OD_get_value>
 8004aa6:	4603      	mov	r3, r0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <OD_get_u32>:
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	460b      	mov	r3, r1
 8004abe:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004ac0:	7af9      	ldrb	r1, [r7, #11]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7fd f90e 	bl	8001cec <OD_get_value>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7c9b      	ldrb	r3, [r3, #18]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	749a      	strb	r2, [r3, #18]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7c9a      	ldrb	r2, [r3, #18]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7c5b      	ldrb	r3, [r3, #17]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d902      	bls.n	8004b00 <CO_SYNCsend+0x26>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	7c92      	ldrb	r2, [r2, #18]
 8004b22:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f002 fcb2 	bl	8007498 <CO_CANsend>
 8004b34:	4603      	mov	r3, r0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8004b3e:	b480      	push	{r7}
 8004b40:	b087      	sub	sp, #28
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	791b      	ldrb	r3, [r3, #4]
 8004b50:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	7c5b      	ldrb	r3, [r3, #17]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004b64:	2301      	movs	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e019      	b.n	8004b9e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	721a      	strb	r2, [r3, #8]
 8004b76:	e012      	b.n	8004b9e <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d109      	bne.n	8004b92 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3305      	adds	r3, #5
 8004b82:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e005      	b.n	8004b9e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b08f      	sub	sp, #60	; 0x3c
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00c      	beq.n	8004bfa <OD_write_1005+0x2e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	7c5b      	ldrb	r3, [r3, #17]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <OD_write_1005+0x2e>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d102      	bne.n	8004bfa <OD_write_1005+0x2e>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004bfa:	2309      	movs	r3, #9
 8004bfc:	e0a3      	b.n	8004d46 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004c04:	68b8      	ldr	r0, [r7, #8]
 8004c06:	f7ff ff0b 	bl	8004a20 <CO_getUint32>
 8004c0a:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c14:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <OD_write_1005+0x184>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d133      	bne.n	8004c9a <OD_write_1005+0xce>
 8004c32:	8bfb      	ldrh	r3, [r7, #30]
 8004c34:	2b7f      	cmp	r3, #127	; 0x7f
 8004c36:	d930      	bls.n	8004c9a <OD_write_1005+0xce>
 8004c38:	8bfb      	ldrh	r3, [r7, #30]
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3e:	d903      	bls.n	8004c48 <OD_write_1005+0x7c>
 8004c40:	8bfb      	ldrh	r3, [r7, #30]
 8004c42:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004c46:	d928      	bls.n	8004c9a <OD_write_1005+0xce>
 8004c48:	8bfb      	ldrh	r3, [r7, #30]
 8004c4a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8004c4e:	d903      	bls.n	8004c58 <OD_write_1005+0x8c>
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c56:	d320      	bcc.n	8004c9a <OD_write_1005+0xce>
 8004c58:	8bfb      	ldrh	r3, [r7, #30]
 8004c5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c5e:	d903      	bls.n	8004c68 <OD_write_1005+0x9c>
 8004c60:	8bfb      	ldrh	r3, [r7, #30]
 8004c62:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004c66:	d318      	bcc.n	8004c9a <OD_write_1005+0xce>
 8004c68:	8bfb      	ldrh	r3, [r7, #30]
 8004c6a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004c6e:	d303      	bcc.n	8004c78 <OD_write_1005+0xac>
 8004c70:	8bfb      	ldrh	r3, [r7, #30]
 8004c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c76:	d310      	bcc.n	8004c9a <OD_write_1005+0xce>
 8004c78:	8bfb      	ldrh	r3, [r7, #30]
 8004c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7e:	d80c      	bhi.n	8004c9a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <OD_write_1005+0xd2>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <OD_write_1005+0xd2>
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c94:	8bfa      	ldrh	r2, [r7, #30]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d001      	beq.n	8004c9e <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8004c9a:	230f      	movs	r3, #15
 8004c9c:	e053      	b.n	8004d46 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ca4:	8bfa      	ldrh	r2, [r7, #30]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d03a      	beq.n	8004d20 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8004cb2:	8bfa      	ldrh	r2, [r7, #30]
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <OD_write_1005+0x188>)
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004cc4:	f002 fb10 	bl	80072e8 <CO_CANrxBufferInit>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8004ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004cd4:	2309      	movs	r3, #9
 8004cd6:	e036      	b.n	8004d46 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461c      	mov	r4, r3
 8004cf2:	8bfa      	ldrh	r2, [r7, #30]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	9400      	str	r4, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f002 fb52 	bl	80073a4 <CO_CANtxBufferInit>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2200      	movs	r2, #0
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8004d14:	2309      	movs	r3, #9
 8004d16:	e016      	b.n	8004d46 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	8bfa      	ldrh	r2, [r7, #30]
 8004d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	2200      	movs	r2, #0
 8004d30:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2200      	movs	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7fc fdee 	bl	8001920 <OD_writeOriginal>
 8004d44:	4603      	mov	r3, r0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	372c      	adds	r7, #44	; 0x2c
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	bffff800 	.word	0xbffff800
 8004d54:	08004b3f 	.word	0x08004b3f

08004d58 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00c      	beq.n	8004d86 <OD_write_1019+0x2e>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	7c5b      	ldrb	r3, [r3, #17]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <OD_write_1019+0x2e>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <OD_write_1019+0x2e>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004d86:	2309      	movs	r3, #9
 8004d88:	e041      	b.n	8004e0e <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f7ff fe37 	bl	8004a04 <CO_getUint8>
 8004d96:	4603      	mov	r3, r0
 8004d98:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d002      	beq.n	8004da6 <OD_write_1019+0x4e>
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2bf0      	cmp	r3, #240	; 0xf0
 8004da4:	d901      	bls.n	8004daa <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004da6:	230f      	movs	r3, #15
 8004da8:	e031      	b.n	8004e0e <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004db4:	2317      	movs	r3, #23
 8004db6:	e02a      	b.n	8004e0e <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461c      	mov	r4, r3
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	9400      	str	r4, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f002 fae1 	bl	80073a4 <CO_CANtxBufferInit>
 8004de2:	4602      	mov	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8004df6:	2309      	movs	r3, #9
 8004df8:	e009      	b.n	8004e0e <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	7cfa      	ldrb	r2, [r7, #19]
 8004dfe:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7fc fd8a 	bl	8001920 <OD_writeOriginal>
 8004e0c:	4603      	mov	r3, r0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd90      	pop	{r4, r7, pc}
	...

08004e18 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <CO_SYNC_init+0x32>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <CO_SYNC_init+0x32>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <CO_SYNC_init+0x32>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	e0fe      	b.n	800504e <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004e50:	2260      	movs	r2, #96	; 0x60
 8004e52:	2100      	movs	r1, #0
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f009 fb87 	bl	800e568 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004e5e:	f107 0218 	add.w	r2, r7, #24
 8004e62:	2301      	movs	r3, #1
 8004e64:	2100      	movs	r1, #0
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe22 	bl	8004ab0 <OD_get_u32>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <CO_SYNC_init+0x74>
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fddc 	bl	8004a3c <OD_getIndex>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004e8c:	f06f 030b 	mvn.w	r3, #11
 8004e90:	e0dd      	b.n	800504e <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a6f      	ldr	r2, [pc, #444]	; (8005058 <CO_SYNC_init+0x240>)
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	; (800505c <CO_SYNC_init+0x244>)
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3334      	adds	r3, #52	; 0x34
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fdd7 	bl	8004a5e <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6838      	ldr	r0, [r7, #0]
 8004eb8:	f7fc ff7f 	bl	8001dba <OD_getPtr>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d006      	beq.n	8004ede <CO_SYNC_init+0xc6>
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f7ff fdb3 	bl	8004a3c <OD_getIndex>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004edc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004ede:	f06f 030b 	mvn.w	r3, #11
 8004ee2:	e0b4      	b.n	800504e <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	2100      	movs	r1, #0
 8004eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eec:	f7fc ff65 	bl	8001dba <OD_getPtr>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d010      	beq.n	8004f1e <CO_SYNC_init+0x106>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10c      	bne.n	8004f1e <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <CO_SYNC_init+0x100>
 8004f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0c:	f7ff fd96 	bl	8004a3c <OD_getIndex>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f16:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004f18:	f06f 030b 	mvn.w	r3, #11
 8004f1c:	e097      	b.n	800504e <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d033      	beq.n	8004f90 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004f28:	f107 0217 	add.w	r2, r7, #23
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2100      	movs	r1, #0
 8004f30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f32:	f7ff fda8 	bl	8004a86 <OD_get_u8>
 8004f36:	4603      	mov	r3, r0
 8004f38:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004f3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00c      	beq.n	8004f5c <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <CO_SYNC_init+0x13e>
 8004f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f4a:	f7ff fd77 	bl	8004a3c <OD_getIndex>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8004f56:	f06f 030b 	mvn.w	r3, #11
 8004f5a:	e078      	b.n	800504e <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <CO_SYNC_init+0x150>
 8004f62:	2302      	movs	r3, #2
 8004f64:	75fb      	strb	r3, [r7, #23]
 8004f66:	e004      	b.n	8004f72 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2bf0      	cmp	r3, #240	; 0xf0
 8004f6c:	d901      	bls.n	8004f72 <CO_SYNC_init+0x15a>
 8004f6e:	23f0      	movs	r3, #240	; 0xf0
 8004f70:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a37      	ldr	r2, [pc, #220]	; (8005058 <CO_SYNC_init+0x240>)
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a37      	ldr	r2, [pc, #220]	; (8005060 <CO_SYNC_init+0x248>)
 8004f82:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3350      	adds	r3, #80	; 0x50
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f8c:	f7ff fd67 	bl	8004a5e <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004f90:	7dfa      	ldrb	r2, [r7, #23]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004fcc:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd2:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004fd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004fe8:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <CO_SYNC_init+0x24c>)
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ffa:	f002 f975 	bl	80072e8 <CO_CANrxBufferInit>
 8004ffe:	4603      	mov	r3, r0
 8005000:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8005002:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <CO_SYNC_init+0x1f8>
        return ret;
 800500a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800500e:	e01e      	b.n	800504e <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005018:	b29a      	uxth	r2, r3
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4618      	mov	r0, r3
 8005028:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800502a:	2300      	movs	r3, #0
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	9000      	str	r0, [sp, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005034:	f002 f9b6 	bl	80073a4 <CO_CANtxBufferInit>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e000      	b.n	800504e <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	08001871 	.word	0x08001871
 800505c:	08004bcd 	.word	0x08004bcd
 8005060:	08004d59 	.word	0x08004d59
 8005064:	08004b3f 	.word	0x08004b3f

08005068 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005076:	2300      	movs	r3, #0
 8005078:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8088 	beq.w	8005192 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d902      	bls.n	800509c <CO_SYNC_process+0x34>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 80050aa:	2301      	movs	r3, #1
 80050ac:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <CO_SYNC_process+0x5c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	e000      	b.n	80050c6 <CO_SYNC_process+0x5e>
 80050c4:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80050c6:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d031      	beq.n	8005132 <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d828      	bhi.n	8005132 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80050e0:	2301      	movs	r3, #1
 80050e2:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fcf8 	bl	8004ada <CO_SYNCsend>
 80050ea:	e022      	b.n	8005132 <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d11e      	bne.n	8005132 <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d202      	bcs.n	800510c <CO_SYNC_process+0xa4>
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d20d      	bcs.n	8005132 <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005124:	2218      	movs	r2, #24
 8005126:	2101      	movs	r1, #1
 8005128:	f7fb fd90 	bl	8000c4c <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2202      	movs	r2, #2
 8005130:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d015      	beq.n	8005166 <CO_SYNC_process+0xfe>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d909      	bls.n	8005166 <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800515a:	2302      	movs	r3, #2
 800515c:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	615a      	str	r2, [r3, #20]
 8005164:	e002      	b.n	800516c <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	7a1b      	ldrb	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	7a1b      	ldrb	r3, [r3, #8]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	f248 2340 	movw	r3, #33344	; 0x8240
 8005182:	2219      	movs	r2, #25
 8005184:	2101      	movs	r1, #1
 8005186:	f7fb fd61 	bl	8000c4c <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	721a      	strb	r2, [r3, #8]
 8005190:	e00b      	b.n	80051aa <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10f      	bne.n	80051d0 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	7c1b      	ldrb	r3, [r3, #16]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d108      	bne.n	80051ca <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2300      	movs	r3, #0
 80051c2:	2218      	movs	r2, #24
 80051c4:	2100      	movs	r1, #0
 80051c6:	f7fb fd41 	bl	8000c4c <CO_error>
        }
        SYNC->timeoutError = 1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80051d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80051e8:	81fb      	strh	r3, [r7, #14]
 80051ea:	89fb      	ldrh	r3, [r7, #14]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <OD_getIndex+0x14>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	e000      	b.n	800522a <OD_getIndex+0x16>
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <OD_extension_init>:
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <OD_extension_init+0x14>
 8005246:	2305      	movs	r3, #5
 8005248:	e003      	b.n	8005252 <OD_extension_init+0x1c>
    entry->extension = extension;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <OD_get_u32>:
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b086      	sub	sp, #24
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	460b      	mov	r3, r1
 800526c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800526e:	7af9      	ldrb	r1, [r7, #11]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2304      	movs	r3, #4
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7fc fd37 	bl	8001cec <OD_get_value>
 800527e:	4603      	mov	r3, r0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	791b      	ldrb	r3, [r3, #4]
 800529a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	3305      	adds	r3, #5
 80052a0:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d108      	bne.n	80052ba <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2206      	movs	r2, #6
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f009 f9e4 	bl	800e67c <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2201      	movs	r2, #1
 80052b8:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <OD_write_1012+0x2e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	7c5b      	ldrb	r3, [r3, #17]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <OD_write_1012+0x2e>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d102      	bne.n	80052f2 <OD_write_1012+0x2e>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80052f2:	2309      	movs	r3, #9
 80052f4:	e051      	b.n	800539a <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80052fc:	68b8      	ldr	r0, [r7, #8]
 80052fe:	f7ff ff7b 	bl	80051f8 <CO_getUint32>
 8005302:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800530c:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <OD_write_1012+0xe0>)
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d126      	bne.n	8005366 <OD_write_1012+0xa2>
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	d923      	bls.n	8005366 <OD_write_1012+0xa2>
 800531e:	8afb      	ldrh	r3, [r7, #22]
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d903      	bls.n	800532e <OD_write_1012+0x6a>
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800532c:	d91b      	bls.n	8005366 <OD_write_1012+0xa2>
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005334:	d903      	bls.n	800533e <OD_write_1012+0x7a>
 8005336:	8afb      	ldrh	r3, [r7, #22]
 8005338:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800533c:	d313      	bcc.n	8005366 <OD_write_1012+0xa2>
 800533e:	8afb      	ldrh	r3, [r7, #22]
 8005340:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005344:	d903      	bls.n	800534e <OD_write_1012+0x8a>
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800534c:	d30b      	bcc.n	8005366 <OD_write_1012+0xa2>
 800534e:	8afb      	ldrh	r3, [r7, #22]
 8005350:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005354:	d303      	bcc.n	800535e <OD_write_1012+0x9a>
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800535c:	d303      	bcc.n	8005366 <OD_write_1012+0xa2>
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005364:	d901      	bls.n	800536a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8005366:	230f      	movs	r3, #15
 8005368:	e017      	b.n	800539a <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	0fdb      	lsrs	r3, r3, #31
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7fc fac4 	bl	8001920 <OD_writeOriginal>
 8005398:	4603      	mov	r3, r0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	3ffff800 	.word	0x3ffff800

080053a8 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af04      	add	r7, sp, #16
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <CO_TIME_init+0x20>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <CO_TIME_init+0x20>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	e061      	b.n	8005492 <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 80053ce:	222c      	movs	r2, #44	; 0x2c
 80053d0:	2100      	movs	r1, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f009 f8c8 	bl	800e568 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80053d8:	f107 0214 	add.w	r2, r7, #20
 80053dc:	2301      	movs	r3, #1
 80053de:	2100      	movs	r1, #0
 80053e0:	68b8      	ldr	r0, [r7, #8]
 80053e2:	f7ff ff3c 	bl	800525e <OD_get_u32>
 80053e6:	4603      	mov	r3, r0
 80053e8:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80053ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00c      	beq.n	800540c <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <CO_TIME_init+0x5e>
 80053f8:	68b8      	ldr	r0, [r7, #8]
 80053fa:	f7ff ff0b 	bl	8005214 <OD_getIndex>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005406:	f06f 030b 	mvn.w	r3, #11
 800540a:	e042      	b.n	8005492 <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <CO_TIME_init+0xf4>)
 8005416:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <CO_TIME_init+0xf8>)
 800541c:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	331c      	adds	r3, #28
 8005422:	4619      	mov	r1, r3
 8005424:	68b8      	ldr	r0, [r7, #8]
 8005426:	f7ff ff06 	bl	8005236 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005432:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	0fdb      	lsrs	r3, r3, #31
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2301      	movne	r3, #1
 800544c:	2300      	moveq	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d015      	beq.n	8005490 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005464:	8bba      	ldrh	r2, [r7, #28]
 8005466:	8879      	ldrh	r1, [r7, #2]
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <CO_TIME_init+0xfc>)
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 ff35 	bl	80072e8 <CO_CANrxBufferInit>
 800547e:	4603      	mov	r3, r0
 8005480:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005482:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <CO_TIME_init+0xe8>
            return ret;
 800548a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800548e:	e000      	b.n	8005492 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	08001871 	.word	0x08001871
 80054a0:	080052c5 	.word	0x080052c5
 80054a4:	08005289 	.word	0x08005289

080054a8 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80054b4:	2300      	movs	r3, #0
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d024      	beq.n	8005508 <CO_TIME_process+0x60>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01f      	beq.n	800550e <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fe91 	bl	80051f8 <CO_getUint32>
 80054d6:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3304      	adds	r3, #4
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fe7c 	bl	80051da <CO_getUint16>
 80054e2:	4603      	mov	r3, r0
 80054e4:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8bfa      	ldrh	r2, [r7, #30]
 80054f4:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80054fc:	2301      	movs	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005506:	e002      	b.n	800550e <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d132      	bne.n	800557e <CO_TIME_process+0xd6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02f      	beq.n	800557e <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	89db      	ldrh	r3, [r3, #14]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4a16      	ldr	r2, [pc, #88]	; (8005588 <CO_TIME_process+0xe0>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <CO_TIME_process+0xe0>)
 800553a:	fba3 1302 	umull	r1, r3, r3, r2
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	441a      	add	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <CO_TIME_process+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d90b      	bls.n	800557e <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <CO_TIME_process+0xe8>)
 800556c:	4413      	add	r3, r2
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	899b      	ldrh	r3, [r3, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	10624dd3 	.word	0x10624dd3
 800558c:	05265bff 	.word	0x05265bff
 8005590:	fad9a400 	.word	0xfad9a400

08005594 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d102      	bne.n	80055ac <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	e006      	b.n	80055ba <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 80055ac:	220c      	movs	r2, #12
 80055ae:	2100      	movs	r1, #0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f008 ffd9 	bl	800e568 <memset>

    return ret;
 80055b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	441a      	add	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 80055ec:	e112      	b.n	8005814 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	7a5b      	ldrb	r3, [r3, #9]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	613b      	str	r3, [r7, #16]

        tick = true;
 8005602:	2301      	movs	r3, #1
 8005604:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800560e:	3b50      	subs	r3, #80	; 0x50
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	791b      	ldrb	r3, [r3, #4]
 8005618:	3301      	adds	r3, #1
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	711a      	strb	r2, [r3, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	791b      	ldrb	r3, [r3, #4]
 8005624:	2b03      	cmp	r3, #3
 8005626:	f240 80dd 	bls.w	80057e4 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	77bb      	strb	r3, [r7, #30]
 8005634:	7fbb      	ldrb	r3, [r7, #30]
 8005636:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	7a5b      	ldrb	r3, [r3, #9]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <CO_LEDs_process+0x8a>
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e003      	b.n	8005656 <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 800564e:	7fbb      	ldrb	r3, [r7, #30]
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	795b      	ldrb	r3, [r3, #5]
 800565a:	3301      	adds	r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	715a      	strb	r2, [r3, #5]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	795b      	ldrb	r3, [r3, #5]
 8005666:	2b06      	cmp	r3, #6
 8005668:	d010      	beq.n	800568c <CO_LEDs_process+0xc8>
 800566a:	2b06      	cmp	r3, #6
 800566c:	dc12      	bgt.n	8005694 <CO_LEDs_process+0xd0>
 800566e:	2b01      	cmp	r3, #1
 8005670:	d002      	beq.n	8005678 <CO_LEDs_process+0xb4>
 8005672:	2b02      	cmp	r3, #2
 8005674:	d005      	beq.n	8005682 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8005676:	e00d      	b.n	8005694 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005678:	7ffb      	ldrb	r3, [r7, #31]
 800567a:	f043 0304 	orr.w	r3, r3, #4
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e009      	b.n	8005696 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8005682:	7fbb      	ldrb	r3, [r7, #30]
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	77bb      	strb	r3, [r7, #30]
 800568a:	e004      	b.n	8005696 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	715a      	strb	r2, [r3, #5]
 8005692:	e000      	b.n	8005696 <CO_LEDs_process+0xd2>
                default: break;
 8005694:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	799b      	ldrb	r3, [r3, #6]
 800569a:	3301      	adds	r3, #1
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	719a      	strb	r2, [r3, #6]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	799b      	ldrb	r3, [r3, #6]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	d821      	bhi.n	80056f0 <CO_LEDs_process+0x12c>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <CO_LEDs_process+0xf0>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056df 	.word	0x080056df
 80056bc:	080056d5 	.word	0x080056d5
 80056c0:	080056df 	.word	0x080056df
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056e9 	.word	0x080056e9
                case 1: case 3: rd |= CO_LED_flash_2; break;
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	f043 0308 	orr.w	r3, r3, #8
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e009      	b.n	80056f2 <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 80056de:	7fbb      	ldrb	r3, [r7, #30]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	77bb      	strb	r3, [r7, #30]
 80056e6:	e004      	b.n	80056f2 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	719a      	strb	r2, [r3, #6]
 80056ee:	e000      	b.n	80056f2 <CO_LEDs_process+0x12e>
                default: break;
 80056f0:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	79db      	ldrb	r3, [r3, #7]
 80056f6:	3301      	adds	r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	71da      	strb	r2, [r3, #7]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	79db      	ldrb	r3, [r3, #7]
 8005702:	2b0a      	cmp	r3, #10
 8005704:	bf8c      	ite	hi
 8005706:	2201      	movhi	r2, #1
 8005708:	2200      	movls	r2, #0
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	2a00      	cmp	r2, #0
 800570e:	d12c      	bne.n	800576a <CO_LEDs_process+0x1a6>
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	f003 0254 	and.w	r2, r3, #84	; 0x54
 800571a:	2a00      	cmp	r2, #0
 800571c:	bf14      	ite	ne
 800571e:	2201      	movne	r2, #1
 8005720:	2200      	moveq	r2, #0
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	2a00      	cmp	r2, #0
 8005726:	d117      	bne.n	8005758 <CO_LEDs_process+0x194>
 8005728:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 800572c:	2a00      	cmp	r2, #0
 800572e:	bf14      	ite	ne
 8005730:	2201      	movne	r2, #1
 8005732:	2200      	moveq	r2, #0
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	2a00      	cmp	r2, #0
 8005738:	d109      	bne.n	800574e <CO_LEDs_process+0x18a>
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <CO_LEDs_process+0x19e>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
 800574c:	e00d      	b.n	800576a <CO_LEDs_process+0x1a6>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 800574e:	7ffb      	ldrb	r3, [r7, #31]
 8005750:	f043 0310 	orr.w	r3, r3, #16
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e009      	b.n	800576c <CO_LEDs_process+0x1a8>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8005758:	7fbb      	ldrb	r3, [r7, #30]
 800575a:	f043 0310 	orr.w	r3, r3, #16
 800575e:	77bb      	strb	r3, [r7, #30]
 8005760:	e004      	b.n	800576c <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	71da      	strb	r2, [r3, #7]
 8005768:	e000      	b.n	800576c <CO_LEDs_process+0x1a8>
                default: break;
 800576a:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	7a1b      	ldrb	r3, [r3, #8]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	721a      	strb	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	7a1b      	ldrb	r3, [r3, #8]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	bf8c      	ite	hi
 8005780:	2201      	movhi	r2, #1
 8005782:	2200      	movls	r2, #0
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	2a00      	cmp	r2, #0
 8005788:	d137      	bne.n	80057fa <CO_LEDs_process+0x236>
 800578a:	2201      	movs	r2, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 8005794:	2a00      	cmp	r2, #0
 8005796:	bf14      	ite	ne
 8005798:	2201      	movne	r2, #1
 800579a:	2200      	moveq	r2, #0
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d117      	bne.n	80057d2 <CO_LEDs_process+0x20e>
 80057a2:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	bf14      	ite	ne
 80057aa:	2201      	movne	r2, #1
 80057ac:	2200      	moveq	r2, #0
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d109      	bne.n	80057c8 <CO_LEDs_process+0x204>
 80057b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <CO_LEDs_process+0x218>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: break;
 80057c6:	e018      	b.n	80057fa <CO_LEDs_process+0x236>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e014      	b.n	80057fc <CO_LEDs_process+0x238>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 80057d2:	7fbb      	ldrb	r3, [r7, #30]
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	77bb      	strb	r3, [r7, #30]
 80057da:	e00f      	b.n	80057fc <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	721a      	strb	r2, [r3, #8]
 80057e2:	e00b      	b.n	80057fc <CO_LEDs_process+0x238>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7a5b      	ldrb	r3, [r3, #9]
 80057e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80057ec:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	7a9b      	ldrb	r3, [r3, #10]
 80057f2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80057f6:	77bb      	strb	r3, [r7, #30]
 80057f8:	e000      	b.n	80057fc <CO_LEDs_process+0x238>
                default: break;
 80057fa:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <CO_LEDs_process+0x248>
 8005802:	7ffb      	ldrb	r3, [r7, #31]
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e003      	b.n	8005814 <CO_LEDs_process+0x250>
        else               gr |= CO_LED_flicker;
 800580c:	7fbb      	ldrb	r3, [r7, #30]
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800581c:	4293      	cmp	r3, r2
 800581e:	f63f aee6 	bhi.w	80055ee <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d077      	beq.n	8005918 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <CO_LEDs_process+0x270>
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
 8005832:	e032      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <CO_LEDs_process+0x282>
 800583c:	7ffb      	ldrb	r3, [r7, #31]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	75fb      	strb	r3, [r7, #23]
 8005844:	e029      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <CO_LEDs_process+0x292>
 800584c:	7ffb      	ldrb	r3, [r7, #31]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	75fb      	strb	r3, [r7, #23]
 8005854:	e021      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <CO_LEDs_process+0x2a2>
 800585c:	7ffb      	ldrb	r3, [r7, #31]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	75fb      	strb	r3, [r7, #23]
 8005864:	e019      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <CO_LEDs_process+0x2b2>
 800586c:	7ffb      	ldrb	r3, [r7, #31]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	75fb      	strb	r3, [r7, #23]
 8005874:	e011      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <CO_LEDs_process+0x2c2>
 800587c:	7ffb      	ldrb	r3, [r7, #31]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	75fb      	strb	r3, [r7, #23]
 8005884:	e009      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <CO_LEDs_process+0x2d2>
 800588c:	7ffb      	ldrb	r3, [r7, #31]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	e001      	b.n	800589a <CO_LEDs_process+0x2d6>
        else                                        rd_co = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <CO_LEDs_process+0x2e6>
 80058a0:	7fbb      	ldrb	r3, [r7, #30]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	75bb      	strb	r3, [r7, #22]
 80058a8:	e022      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 80058aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <CO_LEDs_process+0x2f6>
 80058b0:	7fbb      	ldrb	r3, [r7, #30]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	75bb      	strb	r3, [r7, #22]
 80058b8:	e01a      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d104      	bne.n	80058cc <CO_LEDs_process+0x308>
 80058c2:	7fbb      	ldrb	r3, [r7, #30]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	75bb      	strb	r3, [r7, #22]
 80058ca:	e011      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 80058cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d0:	2b7f      	cmp	r3, #127	; 0x7f
 80058d2:	d104      	bne.n	80058de <CO_LEDs_process+0x31a>
 80058d4:	7fbb      	ldrb	r3, [r7, #30]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	75bb      	strb	r3, [r7, #22]
 80058dc:	e008      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d102      	bne.n	80058ec <CO_LEDs_process+0x328>
 80058e6:	2301      	movs	r3, #1
 80058e8:	75bb      	strb	r3, [r7, #22]
 80058ea:	e001      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else                                        gr_co = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <CO_LEDs_process+0x33a>
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058fc:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <CO_LEDs_process+0x348>
 8005904:	7fbb      	ldrb	r3, [r7, #30]
 8005906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800590a:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	7ffa      	ldrb	r2, [r7, #31]
 8005910:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	7fba      	ldrb	r2, [r7, #30]
 8005916:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005918:	bf00      	nop
 800591a:	3724      	adds	r7, #36	; 0x24
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b090      	sub	sp, #64	; 0x40
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	791b      	ldrb	r3, [r3, #4]
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800593a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800593e:	2b08      	cmp	r3, #8
 8005940:	f040 814c 	bne.w	8005bdc <CO_LSSslave_receive+0x2b8>
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8147 	bne.w	8005bdc <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 800594e:	2300      	movs	r3, #0
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	3305      	adds	r3, #5
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005964:	2b04      	cmp	r3, #4
 8005966:	d12c      	bne.n	80059c2 <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <CO_LSSslave_receive+0x56>
 8005974:	2b01      	cmp	r3, #1
 8005976:	d020      	beq.n	80059ba <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8005978:	e12a      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	7c1b      	ldrb	r3, [r3, #16]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d110      	bne.n	80059a4 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005988:	2bff      	cmp	r3, #255	; 0xff
 800598a:	d10b      	bne.n	80059a4 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005992:	2bff      	cmp	r3, #255	; 0xff
 8005994:	d006      	beq.n	80059a4 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800599c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80059a0:	2301      	movs	r3, #1
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	2200      	movs	r2, #0
 80059a8:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	3314      	adds	r3, #20
 80059ae:	2210      	movs	r2, #16
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f008 fdd8 	bl	800e568 <memset>
                    break;
 80059b8:	e10a      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	2201      	movs	r2, #1
 80059be:	741a      	strb	r2, [r3, #16]
                    break;
 80059c0:	e106      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	7c1b      	ldrb	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 80ee 	bne.w	8005ba8 <CO_LSSslave_receive+0x284>
            switch (cs) {
 80059cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059d0:	3b40      	subs	r3, #64	; 0x40
 80059d2:	2b11      	cmp	r3, #17
 80059d4:	f200 80f7 	bhi.w	8005bc6 <CO_LSSslave_receive+0x2a2>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <CO_LSSslave_receive+0xbc>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a29 	.word	0x08005a29
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a49 	.word	0x08005a49
 80059ec:	08005a59 	.word	0x08005a59
 80059f0:	08005bc7 	.word	0x08005bc7
 80059f4:	08005bc7 	.word	0x08005bc7
 80059f8:	08005bc7 	.word	0x08005bc7
 80059fc:	08005bc7 	.word	0x08005bc7
 8005a00:	08005bc7 	.word	0x08005bc7
 8005a04:	08005bc7 	.word	0x08005bc7
 8005a08:	08005bc7 	.word	0x08005bc7
 8005a0c:	08005bc7 	.word	0x08005bc7
 8005a10:	08005bc7 	.word	0x08005bc7
 8005a14:	08005bc7 	.word	0x08005bc7
 8005a18:	08005bc7 	.word	0x08005bc7
 8005a1c:	08005bc7 	.word	0x08005bc7
 8005a20:	08005bc7 	.word	0x08005bc7
 8005a24:	08005ab5 	.word	0x08005ab5
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	615a      	str	r2, [r3, #20]
                break;
 8005a36:	e0cb      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	619a      	str	r2, [r3, #24]
                break;
 8005a46:	e0c3      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	61da      	str	r2, [r3, #28]
                break;
 8005a56:	e0bb      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	f040 80ab 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	f040 80a4 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f040 809d 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f040 8096 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8005ab2:	e08a      	b.n	8005bca <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2bff      	cmp	r3, #255	; 0xff
 8005abc:	f040 8087 	bne.w	8005bce <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	f040 8081 	bne.w	8005bce <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	795b      	ldrb	r3, [r3, #5]
 8005ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	799b      	ldrb	r3, [r3, #6]
 8005ad8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	79db      	ldrb	r3, [r3, #7]
 8005ae0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8005ae4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ae8:	2b1f      	cmp	r3, #31
 8005aea:	d903      	bls.n	8005af4 <CO_LSSslave_receive+0x1d0>
 8005aec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005af0:	2b80      	cmp	r3, #128	; 0x80
 8005af2:	d16d      	bne.n	8005bd0 <CO_LSSslave_receive+0x2ac>
 8005af4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d869      	bhi.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8005afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d865      	bhi.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	3301      	adds	r3, #1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8005b10:	2300      	movs	r3, #0
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005b14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d10d      	bne.n	8005b38 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	3324      	adds	r3, #36	; 0x24
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f008 fd19 	bl	800e568 <memset>
 8005b36:	e02c      	b.n	8005b92 <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b3e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d125      	bne.n	8005b92 <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8005b46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005b54:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	405a      	eors	r2, r3
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8005b78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <CO_LSSslave_receive+0x26e>
 8005b80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005b84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d202      	bcs.n	8005b92 <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	2201      	movs	r2, #1
 8005b90:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01a      	beq.n	8005bce <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005b9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8005ba6:	e012      	b.n	8005bce <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	3349      	adds	r3, #73	; 0x49
 8005bac:	2208      	movs	r2, #8
 8005bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f008 fd63 	bl	800e67c <memcpy>
            LSSslave->service = cs;
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc4:	e004      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                break;
 8005bc6:	bf00      	nop
 8005bc8:	e002      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                break;
 8005bca:	bf00      	nop
 8005bcc:	e000      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                break;
 8005bce:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	2201      	movs	r2, #1
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005bdc:	bf00      	nop
 8005bde:	3740      	adds	r7, #64	; 0x40
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d015      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d012      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da06      	bge.n	8005c34 <CO_LSSslave_init+0x50>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2bff      	cmp	r3, #255	; 0xff
 8005c2c:	d002      	beq.n	8005c34 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	e046      	b.n	8005cc2 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005c34:	2274      	movs	r2, #116	; 0x74
 8005c36:	2100      	movs	r1, #0
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f008 fc95 	bl	800e568 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2210      	movs	r2, #16
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f008 fd19 	bl	800e67c <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8005c74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c76:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <CO_LSSslave_init+0xe8>)
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005c88:	6a38      	ldr	r0, [r7, #32]
 8005c8a:	f001 fb2d 	bl	80072e8 <CO_CANrxBufferInit>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c96:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8005c98:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c9a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ca8:	f001 fb7c 	bl	80073a4 <CO_CANtxBufferInit>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005cba:	23ff      	movs	r3, #255	; 0xff
 8005cbc:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	08005925 	.word	0x08005925

08005cd0 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8203 	beq.w	80060ec <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	3305      	adds	r3, #5
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f008 fc37 	bl	800e568 <memset>

        switch (LSSslave->service) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005d00:	3b04      	subs	r3, #4
 8005d02:	2b5a      	cmp	r3, #90	; 0x5a
 8005d04:	f200 81dd 	bhi.w	80060c2 <CO_LSSslave_process+0x3f2>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <CO_LSSslave_process+0x40>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005e7d 	.word	0x08005e7d
 8005d14:	080060c3 	.word	0x080060c3
 8005d18:	080060c3 	.word	0x080060c3
 8005d1c:	080060c3 	.word	0x080060c3
 8005d20:	080060c3 	.word	0x080060c3
 8005d24:	080060c3 	.word	0x080060c3
 8005d28:	080060c3 	.word	0x080060c3
 8005d2c:	080060c3 	.word	0x080060c3
 8005d30:	080060c3 	.word	0x080060c3
 8005d34:	080060c3 	.word	0x080060c3
 8005d38:	080060c3 	.word	0x080060c3
 8005d3c:	080060c3 	.word	0x080060c3
 8005d40:	080060c3 	.word	0x080060c3
 8005d44:	08005e91 	.word	0x08005e91
 8005d48:	080060c3 	.word	0x080060c3
 8005d4c:	08005edf 	.word	0x08005edf
 8005d50:	080060c3 	.word	0x080060c3
 8005d54:	08005f7b 	.word	0x08005f7b
 8005d58:	080060c3 	.word	0x080060c3
 8005d5c:	08005fb9 	.word	0x08005fb9
 8005d60:	080060c3 	.word	0x080060c3
 8005d64:	080060c3 	.word	0x080060c3
 8005d68:	080060c3 	.word	0x080060c3
 8005d6c:	080060c3 	.word	0x080060c3
 8005d70:	080060c3 	.word	0x080060c3
 8005d74:	080060c3 	.word	0x080060c3
 8005d78:	080060c3 	.word	0x080060c3
 8005d7c:	080060c3 	.word	0x080060c3
 8005d80:	080060c3 	.word	0x080060c3
 8005d84:	080060c3 	.word	0x080060c3
 8005d88:	080060c3 	.word	0x080060c3
 8005d8c:	080060c3 	.word	0x080060c3
 8005d90:	080060c3 	.word	0x080060c3
 8005d94:	080060c3 	.word	0x080060c3
 8005d98:	080060c3 	.word	0x080060c3
 8005d9c:	080060c3 	.word	0x080060c3
 8005da0:	080060c3 	.word	0x080060c3
 8005da4:	080060c3 	.word	0x080060c3
 8005da8:	080060c3 	.word	0x080060c3
 8005dac:	080060c3 	.word	0x080060c3
 8005db0:	080060c3 	.word	0x080060c3
 8005db4:	080060c3 	.word	0x080060c3
 8005db8:	080060c3 	.word	0x080060c3
 8005dbc:	080060c3 	.word	0x080060c3
 8005dc0:	080060c3 	.word	0x080060c3
 8005dc4:	080060c3 	.word	0x080060c3
 8005dc8:	080060c3 	.word	0x080060c3
 8005dcc:	080060c3 	.word	0x080060c3
 8005dd0:	080060c3 	.word	0x080060c3
 8005dd4:	080060c3 	.word	0x080060c3
 8005dd8:	080060c3 	.word	0x080060c3
 8005ddc:	080060c3 	.word	0x080060c3
 8005de0:	080060c3 	.word	0x080060c3
 8005de4:	080060c3 	.word	0x080060c3
 8005de8:	080060c3 	.word	0x080060c3
 8005dec:	080060c3 	.word	0x080060c3
 8005df0:	080060c3 	.word	0x080060c3
 8005df4:	080060c3 	.word	0x080060c3
 8005df8:	080060c3 	.word	0x080060c3
 8005dfc:	080060c3 	.word	0x080060c3
 8005e00:	080060c3 	.word	0x080060c3
 8005e04:	080060c3 	.word	0x080060c3
 8005e08:	080060c3 	.word	0x080060c3
 8005e0c:	08005e83 	.word	0x08005e83
 8005e10:	080060c3 	.word	0x080060c3
 8005e14:	080060c3 	.word	0x080060c3
 8005e18:	080060c3 	.word	0x080060c3
 8005e1c:	080060c3 	.word	0x080060c3
 8005e20:	080060c3 	.word	0x080060c3
 8005e24:	080060c3 	.word	0x080060c3
 8005e28:	080060c3 	.word	0x080060c3
 8005e2c:	080060c3 	.word	0x080060c3
 8005e30:	080060c3 	.word	0x080060c3
 8005e34:	080060c3 	.word	0x080060c3
 8005e38:	080060c3 	.word	0x080060c3
 8005e3c:	080060c3 	.word	0x080060c3
 8005e40:	080060c3 	.word	0x080060c3
 8005e44:	080060b5 	.word	0x080060b5
 8005e48:	080060c3 	.word	0x080060c3
 8005e4c:	080060c3 	.word	0x080060c3
 8005e50:	080060c3 	.word	0x080060c3
 8005e54:	080060c3 	.word	0x080060c3
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	080060c3 	.word	0x080060c3
 8005e60:	080060c3 	.word	0x080060c3
 8005e64:	080060c3 	.word	0x080060c3
 8005e68:	0800600f 	.word	0x0800600f
 8005e6c:	08006031 	.word	0x08006031
 8005e70:	08006053 	.word	0x08006053
 8005e74:	08006075 	.word	0x08006075
 8005e78:	08006097 	.word	0x08006097
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005e80:	e126      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	2244      	movs	r2, #68	; 0x44
 8005e88:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e8e:	e11f      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005e96:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <CO_LSSslave_process+0x1dc>
 8005ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da02      	bge.n	8005eb2 <CO_LSSslave_process+0x1e2>
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2bff      	cmp	r3, #255	; 0xff
 8005eb0:	d104      	bne.n	8005ebc <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	7cfa      	ldrb	r2, [r7, #19]
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005ecc:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005ed6:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005edc:	e0f8      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80ef 	beq.w	80060c6 <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005eee:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005ef6:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f04:	7f7b      	ldrb	r3, [r7, #29]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d121      	bne.n	8005f4e <CO_LSSslave_process+0x27e>
 8005f0a:	7f3b      	ldrb	r3, [r7, #28]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d01e      	beq.n	8005f4e <CO_LSSslave_process+0x27e>
 8005f10:	7f3b      	ldrb	r3, [r7, #28]
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	d81b      	bhi.n	8005f4e <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005f16:	7f3b      	ldrb	r3, [r7, #28]
 8005f18:	4a77      	ldr	r2, [pc, #476]	; (80060f8 <CO_LSSslave_process+0x428>)
 8005f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1e:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f28:	8b79      	ldrh	r1, [r7, #26]
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	4798      	blx	r3
 8005f2e:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	8b7a      	ldrh	r2, [r7, #26]
 8005f3c:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f3e:	e009      	b.n	8005f54 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005f40:	23ff      	movs	r3, #255	; 0xff
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f4c:	e002      	b.n	8005f54 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005f5e:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005f68:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005f72:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8005f74:	2301      	movs	r3, #1
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f78:	e0aa      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80a3 	beq.w	80060ca <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80a0 	beq.w	80060ce <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	8bfb      	ldrh	r3, [r7, #30]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005fb0:	8bf9      	ldrh	r1, [r7, #30]
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8005fb6:	e08a      	b.n	80060ce <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fcc:	e011      	b.n	8005ff2 <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005fda:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	4798      	blx	r3
 8005fe4:	6238      	str	r0, [r7, #32]
                if (!result) {
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8005fec:	2302      	movs	r3, #2
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005ffc:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006006:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006008:	2301      	movs	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800600c:	e060      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006018:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	3306      	adds	r3, #6
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800602a:	2301      	movs	r3, #1
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800602e:	e04f      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800603a:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	3306      	adds	r3, #6
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800604c:	2301      	movs	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006050:	e03e      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800605c:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	3306      	adds	r3, #6
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006072:	e02d      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800607e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	3306      	adds	r3, #6
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006090:	2301      	movs	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006094:	e01c      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80060a0:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80060ac:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 80060ae:	2301      	movs	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80060b2:	e00d      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	224f      	movs	r2, #79	; 0x4f
 80060ba:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 80060bc:	2301      	movs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80060c0:	e006      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 80060c2:	bf00      	nop
 80060c4:	e004      	b.n	80060d0 <CO_LSSslave_process+0x400>
                break;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <CO_LSSslave_process+0x400>
                break;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <CO_LSSslave_process+0x400>
            break;
 80060ce:	bf00      	nop
        }
        }

        if(CANsend) {
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f001 f9d9 	bl	8007498 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3730      	adds	r7, #48	; 0x30
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	0800eac8 	.word	0x0800eac8

080060fc <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	08db      	lsrs	r3, r3, #3
 800610c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	2201      	movs	r2, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b09      	cmp	r3, #9
 8006126:	d807      	bhi.n	8006138 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	5cd2      	ldrb	r2, [r2, r3]
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4013      	ands	r3, r2
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <CO_isError+0x40>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <CO_isError+0x42>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <CO_getErrorRegister+0x1e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <CO_getErrorRegister+0x1e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	e000      	b.n	800616a <CO_getErrorRegister+0x20>
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <CO_NMT_getInternalState+0x16>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f993 3000 	ldrsb.w	r3, [r3]
 800618a:	e000      	b.n	800618e <CO_NMT_getInternalState+0x18>
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <CO_LSSslave_getState+0x14>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	7c1b      	ldrb	r3, [r3, #16]
 80061ac:	e000      	b.n	80061b0 <CO_LSSslave_getState+0x16>
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80061d2:	2140      	movs	r1, #64	; 0x40
 80061d4:	2001      	movs	r0, #1
 80061d6:	f007 f9cd 	bl	800d574 <calloc>
 80061da:	4603      	mov	r3, r0
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8101 	beq.w	80063e8 <CO_new+0x22c>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3340      	adds	r3, #64	; 0x40
 80061ea:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80061ec:	212c      	movs	r1, #44	; 0x2c
 80061ee:	2001      	movs	r0, #1
 80061f0:	f007 f9c0 	bl	800d574 <calloc>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	611a      	str	r2, [r3, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80f1 	beq.w	80063e8 <CO_new+0x22c>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	332c      	adds	r3, #44	; 0x2c
 800620a:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 800620c:	2308      	movs	r3, #8
 800620e:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006210:	2130      	movs	r1, #48	; 0x30
 8006212:	2001      	movs	r0, #1
 8006214:	f007 f9ae 	bl	800d574 <calloc>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	615a      	str	r2, [r3, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80df 	beq.w	80063e8 <CO_new+0x22c>
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3330      	adds	r3, #48	; 0x30
 800622e:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006230:	7afb      	ldrb	r3, [r7, #11]
 8006232:	2110      	movs	r1, #16
 8006234:	4618      	mov	r0, r3
 8006236:	f007 f99d 	bl	800d574 <calloc>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	619a      	str	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80ce 	beq.w	80063e8 <CO_new+0x22c>
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006256:	2150      	movs	r1, #80	; 0x50
 8006258:	2001      	movs	r0, #1
 800625a:	f007 f98b 	bl	800d574 <calloc>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	61da      	str	r2, [r3, #28]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80bc 	beq.w	80063e8 <CO_new+0x22c>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	3350      	adds	r3, #80	; 0x50
 8006274:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006276:	2311      	movs	r3, #17
 8006278:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 800627a:	7abb      	ldrb	r3, [r7, #10]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d912      	bls.n	80062a6 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006280:	7abb      	ldrb	r3, [r7, #10]
 8006282:	2108      	movs	r1, #8
 8006284:	4618      	mov	r0, r3
 8006286:	f007 f975 	bl	800d574 <calloc>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80a6 	beq.w	80063e8 <CO_new+0x22c>
 800629c:	7abb      	ldrb	r3, [r7, #10]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80062a6:	21a8      	movs	r1, #168	; 0xa8
 80062a8:	2001      	movs	r0, #1
 80062aa:	f007 f963 	bl	800d574 <calloc>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8094 	beq.w	80063e8 <CO_new+0x22c>
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	33a8      	adds	r3, #168	; 0xa8
 80062c4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80062c6:	212c      	movs	r1, #44	; 0x2c
 80062c8:	2001      	movs	r0, #1
 80062ca:	f007 f953 	bl	800d574 <calloc>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	629a      	str	r2, [r3, #40]	; 0x28
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8084 	beq.w	80063e8 <CO_new+0x22c>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	332c      	adds	r3, #44	; 0x2c
 80062e4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80062e6:	2160      	movs	r1, #96	; 0x60
 80062e8:	2001      	movs	r0, #1
 80062ea:	f007 f943 	bl	800d574 <calloc>
 80062ee:	4603      	mov	r3, r0
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d074      	beq.n	80063e8 <CO_new+0x22c>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	3360      	adds	r3, #96	; 0x60
 8006302:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006304:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006308:	2004      	movs	r0, #4
 800630a:	f007 f933 	bl	800d574 <calloc>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d064      	beq.n	80063e8 <CO_new+0x22c>
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8006324:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006326:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800632a:	2004      	movs	r0, #4
 800632c:	f007 f922 	bl	800d574 <calloc>
 8006330:	4603      	mov	r3, r0
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	635a      	str	r2, [r3, #52]	; 0x34
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	2b00      	cmp	r3, #0
 800633e:	d053      	beq.n	80063e8 <CO_new+0x22c>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8006346:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006348:	210c      	movs	r1, #12
 800634a:	2001      	movs	r0, #1
 800634c:	f007 f912 	bl	800d574 <calloc>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d043      	beq.n	80063e8 <CO_new+0x22c>
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	330c      	adds	r3, #12
 8006364:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006366:	2174      	movs	r1, #116	; 0x74
 8006368:	2001      	movs	r0, #1
 800636a:	f007 f903 	bl	800d574 <calloc>
 800636e:	4603      	mov	r3, r0
 8006370:	461a      	mov	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d034      	beq.n	80063e8 <CO_new+0x22c>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3374      	adds	r3, #116	; 0x74
 8006382:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006384:	2138      	movs	r1, #56	; 0x38
 8006386:	2001      	movs	r0, #1
 8006388:	f007 f8f4 	bl	800d574 <calloc>
 800638c:	4603      	mov	r3, r0
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d025      	beq.n	80063e8 <CO_new+0x22c>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3338      	adds	r3, #56	; 0x38
 80063a0:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80063a2:	210c      	movs	r1, #12
 80063a4:	2011      	movs	r0, #17
 80063a6:	f007 f8e5 	bl	800d574 <calloc>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <CO_new+0x22c>
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	33cc      	adds	r3, #204	; 0xcc
 80063be:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80063c0:	2118      	movs	r1, #24
 80063c2:	2009      	movs	r0, #9
 80063c4:	f007 f8d6 	bl	800d574 <calloc>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	60da      	str	r2, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <CO_new+0x22c>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	33d8      	adds	r3, #216	; 0xd8
 80063dc:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <CO_new+0x238>
        CO_delete(co);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f80b 	bl	800640a <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <CO_new+0x244>
        *heapMemoryUsed = mem;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006400:	697b      	ldr	r3, [r7, #20]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <CO_delete>:

void CO_delete(CO_t *co) {
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d053      	beq.n	80064c0 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	f000 ff4d 	bl	80072bc <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4618      	mov	r0, r3
 8006428:	f007 f8ca 	bl	800d5c0 <free>
    CO_free(co->CANrx);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4618      	mov	r0, r3
 8006432:	f007 f8c5 	bl	800d5c0 <free>
    CO_free(co->CANmodule);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	f007 f8c0 	bl	800d5c0 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	4618      	mov	r0, r3
 8006446:	f007 f8bb 	bl	800d5c0 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	4618      	mov	r0, r3
 8006450:	f007 f8b6 	bl	800d5c0 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	4618      	mov	r0, r3
 800645a:	f007 f8b1 	bl	800d5c0 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4618      	mov	r0, r3
 8006464:	f007 f8ac 	bl	800d5c0 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4618      	mov	r0, r3
 800646e:	f007 f8a7 	bl	800d5c0 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	4618      	mov	r0, r3
 8006478:	f007 f8a2 	bl	800d5c0 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f007 f89d 	bl	800d5c0 <free>

    /* Emergency */
    CO_free(co->em);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	4618      	mov	r0, r3
 800648c:	f007 f898 	bl	800d5c0 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	4618      	mov	r0, r3
 8006496:	f007 f893 	bl	800d5c0 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	4618      	mov	r0, r3
 80064a0:	f007 f88e 	bl	800d5c0 <free>
    CO_free(co->HBcons);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f007 f889 	bl	800d5c0 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f007 f884 	bl	800d5c0 <free>

    /* CANopen object */
    CO_free(co);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f007 f881 	bl	800d5c0 <free>
 80064be:	e000      	b.n	80064c2 <CO_delete+0xb8>
        return;
 80064c0:	bf00      	nop
}
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af04      	add	r7, sp, #16
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <CO_CANinit+0x1a>
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e01a      	b.n	8006518 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f000 fe02 	bl	80070f4 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6858      	ldr	r0, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6899      	ldr	r1, [r3, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	88fa      	ldrh	r2, [r7, #6]
 80064fe:	9202      	str	r2, [sp, #8]
 8006500:	2209      	movs	r2, #9
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2311      	movs	r3, #17
 8006508:	460a      	mov	r2, r1
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	f000 fe1a 	bl	8007144 <CO_CANmodule_init>
 8006510:	4603      	mov	r3, r0
 8006512:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8006514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af06      	add	r7, sp, #24
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	e01a      	b.n	8006570 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	6852      	ldr	r2, [r2, #4]
 8006546:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800654a:	9105      	str	r1, [sp, #20]
 800654c:	2108      	movs	r1, #8
 800654e:	9104      	str	r1, [sp, #16]
 8006550:	9203      	str	r2, [sp, #12]
 8006552:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8006556:	9202      	str	r2, [sp, #8]
 8006558:	2210      	movs	r2, #16
 800655a:	9201      	str	r2, [sp, #4]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	f7ff fb3e 	bl	8005be4 <CO_LSSslave_init>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800656c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	b091      	sub	sp, #68	; 0x44
 800657c:	af0a      	add	r7, sp, #40	; 0x28
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800658c:	f04f 33ff 	mov.w	r3, #4294967295
 8006590:	e134      	b.n	80067fc <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <CO_CANopenInit+0x26>
        em = co->em;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 80065a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80065a8:	2bff      	cmp	r3, #255	; 0xff
 80065aa:	d103      	bne.n	80065b4 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e00a      	b.n	80065ca <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 80065b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <CO_CANopenInit+0x4c>
 80065bc:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da02      	bge.n	80065ca <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	e118      	b.n	80067fc <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe ffe0 	bl	8005594 <CO_LEDs_init>
 80065d4:	4603      	mov	r3, r0
 80065d6:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 80065d8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <CO_CANopenInit+0x6e>
 80065e0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065e4:	e10a      	b.n	80067fc <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 80065ee:	f06f 0312 	mvn.w	r3, #18
 80065f2:	e103      	b.n	80067fc <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	69d8      	ldr	r0, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80065fc:	4b81      	ldr	r3, [pc, #516]	; (8006804 <CO_CANopenInit+0x28c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 800660a:	4b7e      	ldr	r3, [pc, #504]	; (8006804 <CO_CANopenInit+0x28c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8006610:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006612:	4a7c      	ldr	r2, [pc, #496]	; (8006804 <CO_CANopenInit+0x28c>)
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8006618:	3218      	adds	r2, #24
 800661a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800661c:	9105      	str	r1, [sp, #20]
 800661e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006622:	9104      	str	r1, [sp, #16]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	9202      	str	r2, [sp, #8]
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	2311      	movs	r3, #17
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4633      	mov	r3, r6
 8006632:	462a      	mov	r2, r5
 8006634:	4621      	mov	r1, r4
 8006636:	f7fa f8df 	bl	80007f8 <CO_EM_init>
 800663a:	4603      	mov	r3, r0
 800663c:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 800663e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <CO_CANopenInit+0xd4>
 8006646:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800664a:	e0d7      	b.n	80067fc <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8006650:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <CO_CANopenInit+0x28c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8006656:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6852      	ldr	r2, [r2, #4]
 8006662:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006666:	b289      	uxth	r1, r1
 8006668:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 800666c:	b289      	uxth	r1, r1
 800666e:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8006672:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006674:	9008      	str	r0, [sp, #32]
 8006676:	9107      	str	r1, [sp, #28]
 8006678:	2107      	movs	r1, #7
 800667a:	9106      	str	r1, [sp, #24]
 800667c:	9205      	str	r2, [sp, #20]
 800667e:	2200      	movs	r2, #0
 8006680:	9204      	str	r2, [sp, #16]
 8006682:	2200      	movs	r2, #0
 8006684:	9203      	str	r2, [sp, #12]
 8006686:	9302      	str	r3, [sp, #8]
 8006688:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4633      	mov	r3, r6
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4629      	mov	r1, r5
 8006696:	4620      	mov	r0, r4
 8006698:	f7fa ff3e 	bl	8001518 <CO_NMT_init>
 800669c:	4603      	mov	r3, r0
 800669e:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 80066a0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <CO_CANopenInit+0x136>
 80066a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066ac:	e0a6      	b.n	80067fc <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6958      	ldr	r0, [r3, #20]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <CO_CANopenInit+0x28c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 80066bc:	3384      	adds	r3, #132	; 0x84
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	6852      	ldr	r2, [r2, #4]
 80066c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80066c4:	9103      	str	r1, [sp, #12]
 80066c6:	2108      	movs	r1, #8
 80066c8:	9102      	str	r1, [sp, #8]
 80066ca:	9201      	str	r2, [sp, #4]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	2308      	movs	r3, #8
 80066d0:	4622      	mov	r2, r4
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	f7fa fc24 	bl	8000f20 <CO_HBconsumer_init>
 80066d8:	4603      	mov	r3, r0
 80066da:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 80066dc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <CO_CANopenInit+0x172>
 80066e4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066e8:	e088      	b.n	80067fc <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 80066ea:	4b46      	ldr	r3, [pc, #280]	; (8006804 <CO_CANopenInit+0x28c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	33b4      	adds	r3, #180	; 0xb4
 80066f2:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	827b      	strh	r3, [r7, #18]
 80066f8:	e033      	b.n	8006762 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006702:	21a8      	movs	r1, #168	; 0xa8
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	18d6      	adds	r6, r2, r3
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	f102 030c 	add.w	r3, r2, #12
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	8a79      	ldrh	r1, [r7, #18]
 8006718:	3107      	adds	r1, #7
 800671a:	b289      	uxth	r1, r1
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	6840      	ldr	r0, [r0, #4]
 8006720:	8a7c      	ldrh	r4, [r7, #18]
 8006722:	3406      	adds	r4, #6
 8006724:	b2a4      	uxth	r4, r4
 8006726:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 800672a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800672c:	9505      	str	r5, [sp, #20]
 800672e:	9404      	str	r4, [sp, #16]
 8006730:	9003      	str	r0, [sp, #12]
 8006732:	9102      	str	r1, [sp, #8]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4663      	mov	r3, ip
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	4630      	mov	r0, r6
 8006740:	f7fd f95a 	bl	80039f8 <CO_SDOserver_init>
 8006744:	4603      	mov	r3, r0
 8006746:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8006748:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <CO_CANopenInit+0x1de>
 8006750:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006754:	e052      	b.n	80067fc <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800675a:	b29b      	uxth	r3, r3
 800675c:	3301      	adds	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	827b      	strh	r3, [r7, #18]
 8006762:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006766:	2b00      	cmp	r3, #0
 8006768:	ddc7      	ble.n	80066fa <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 800676e:	4b25      	ldr	r3, [pc, #148]	; (8006804 <CO_CANopenInit+0x28c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006774:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2302      	movs	r3, #2
 8006782:	f7fe fe11 	bl	80053a8 <CO_TIME_init>
 8006786:	4603      	mov	r3, r0
 8006788:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 800678a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <CO_CANopenInit+0x220>
 8006792:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006796:	e031      	b.n	80067fc <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <CO_CANopenInit+0x28c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80067a2:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80067a6:	4b17      	ldr	r3, [pc, #92]	; (8006804 <CO_CANopenInit+0x28c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80067ac:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 80067b0:	4b14      	ldr	r3, [pc, #80]	; (8006804 <CO_CANopenInit+0x28c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80067b6:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 80067b8:	4a12      	ldr	r2, [pc, #72]	; (8006804 <CO_CANopenInit+0x28c>)
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 80067be:	32a8      	adds	r2, #168	; 0xa8
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6849      	ldr	r1, [r1, #4]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	6840      	ldr	r0, [r0, #4]
 80067c8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80067ca:	9406      	str	r4, [sp, #24]
 80067cc:	2400      	movs	r4, #0
 80067ce:	9405      	str	r4, [sp, #20]
 80067d0:	9004      	str	r0, [sp, #16]
 80067d2:	2001      	movs	r0, #1
 80067d4:	9003      	str	r0, [sp, #12]
 80067d6:	9102      	str	r1, [sp, #8]
 80067d8:	9201      	str	r2, [sp, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4663      	mov	r3, ip
 80067de:	4632      	mov	r2, r6
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7fe fb18 	bl	8004e18 <CO_SYNC_init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 80067ec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <CO_CANopenInit+0x282>
 80067f4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067f8:	e000      	b.n	80067fc <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006804:	200003cc 	.word	0x200003cc

08006808 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8006808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680a:	b093      	sub	sp, #76	; 0x4c
 800680c:	af06      	add	r7, sp, #24
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	e0c3      	b.n	80069aa <CO_CANopenInitPDO+0x1a2>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <CO_CANopenInitPDO+0x30>
 8006828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	db03      	blt.n	8006838 <CO_CANopenInitPDO+0x30>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <CO_CANopenInitPDO+0x3e>
 8006840:	f06f 0312 	mvn.w	r3, #18
 8006844:	e0b1      	b.n	80069aa <CO_CANopenInitPDO+0x1a2>
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e0ae      	b.n	80069aa <CO_CANopenInitPDO+0x1a2>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 800684c:	4b59      	ldr	r3, [pc, #356]	; (80069b4 <CO_CANopenInitPDO+0x1ac>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	33cc      	adds	r3, #204	; 0xcc
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8006856:	4b57      	ldr	r3, [pc, #348]	; (80069b4 <CO_CANopenInitPDO+0x1ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	33fc      	adds	r3, #252	; 0xfc
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006860:	2300      	movs	r3, #0
 8006862:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006864:	e044      	b.n	80068f0 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 800686a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800686e:	2b03      	cmp	r3, #3
 8006870:	dc09      	bgt.n	8006886 <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006872:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006876:	3302      	adds	r3, #2
 8006878:	b29b      	uxth	r3, r3
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	b29a      	uxth	r2, r3
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	b29b      	uxth	r3, r3
 8006882:	4413      	add	r3, r2
 8006884:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800688e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	18d5      	adds	r5, r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	f103 020c 	add.w	r2, r3, #12
 80068a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a6:	f102 010c 	add.w	r1, r2, #12
 80068aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	6849      	ldr	r1, [r1, #4]
 80068b0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80068b2:	3003      	adds	r0, #3
 80068b4:	b280      	uxth	r0, r0
 80068b6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80068b8:	9405      	str	r4, [sp, #20]
 80068ba:	9004      	str	r0, [sp, #16]
 80068bc:	9103      	str	r1, [sp, #12]
 80068be:	9202      	str	r2, [sp, #8]
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4633      	mov	r3, r6
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4628      	mov	r0, r5
 80068ce:	f7fb ff69 	bl	80027a4 <CO_RPDO_init>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 80068d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <CO_CANopenInitPDO+0xdc>
 80068de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068e2:	e062      	b.n	80069aa <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80068e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3301      	adds	r3, #1
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	ddb6      	ble.n	8006866 <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80068f8:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <CO_CANopenInitPDO+0x1ac>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006902:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8006904:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <CO_CANopenInitPDO+0x1ac>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800690e:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006910:	2300      	movs	r3, #0
 8006912:	837b      	strh	r3, [r7, #26]
 8006914:	e044      	b.n	80069a0 <CO_CANopenInitPDO+0x198>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 800691a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800691e:	2b03      	cmp	r3, #3
 8006920:	dc09      	bgt.n	8006936 <CO_CANopenInitPDO+0x12e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b29a      	uxth	r2, r3
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	b29b      	uxth	r3, r3
 800692c:	4413      	add	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006934:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800693e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	18d5      	adds	r5, r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	f103 020c 	add.w	r2, r3, #12
 8006952:	623a      	str	r2, [r7, #32]
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	f102 010c 	add.w	r1, r2, #12
 800695a:	61f9      	str	r1, [r7, #28]
 800695c:	68f9      	ldr	r1, [r7, #12]
 800695e:	6849      	ldr	r1, [r1, #4]
 8006960:	8b78      	ldrh	r0, [r7, #26]
 8006962:	3002      	adds	r0, #2
 8006964:	b280      	uxth	r0, r0
 8006966:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006968:	9405      	str	r4, [sp, #20]
 800696a:	9004      	str	r0, [sp, #16]
 800696c:	9103      	str	r1, [sp, #12]
 800696e:	9202      	str	r2, [sp, #8]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	8b3b      	ldrh	r3, [r7, #24]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4633      	mov	r3, r6
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4628      	mov	r0, r5
 800697e:	f7fc fadd 	bl	8002f3c <CO_TPDO_init>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8006986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <CO_CANopenInitPDO+0x18c>
 800698e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006992:	e00a      	b.n	80069aa <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006994:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006998:	b29b      	uxth	r3, r3
 800699a:	3301      	adds	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	837b      	strh	r3, [r7, #26]
 80069a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	ddb6      	ble.n	8006916 <CO_CANopenInitPDO+0x10e>
        }
    }
#endif

    return CO_ERROR_NO;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3734      	adds	r7, #52	; 0x34
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200003cc 	.word	0x200003cc

080069b8 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	b097      	sub	sp, #92	; 0x5c
 80069bc:	af08      	add	r7, sp, #32
 80069be:	61f8      	str	r0, [r7, #28]
 80069c0:	61b9      	str	r1, [r7, #24]
 80069c2:	617a      	str	r2, [r7, #20]
 80069c4:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fbd0 	bl	8006176 <CO_NMT_getInternalState>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80069dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 80069e0:	2b7f      	cmp	r3, #127	; 0x7f
 80069e2:	d003      	beq.n	80069ec <CO_process+0x34>
 80069e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	d101      	bne.n	80069f0 <CO_process+0x38>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <CO_process+0x3a>
 80069f0:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fdf6 	bl	80075ea <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff f964 	bl	8005cd0 <CO_LSSslave_process>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	8a5b      	ldrh	r3, [r3, #18]
 8006a20:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8006a22:	2300      	movs	r3, #0
 8006a24:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fbb5 	bl	800619a <CO_LSSslave_getState>
 8006a30:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 8006a36:	2301      	movs	r3, #1
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <CO_process+0x92>
 8006a44:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8006a48:	e000      	b.n	8006a4c <CO_process+0x94>
 8006a4a:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8006a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a4e:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8006a5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a60:	f240 3303 	movw	r3, #771	; 0x303
 8006a64:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2118      	movs	r1, #24
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fb3c 	bl	80060fc <CO_isError>
 8006a84:	4605      	mov	r5, r0
 8006a86:	e000      	b.n	8006a8a <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8006a88:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d113      	bne.n	8006ab8 <CO_process+0x100>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	211b      	movs	r1, #27
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fb30 	bl	80060fc <CO_isError>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d108      	bne.n	8006ab4 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	211c      	movs	r1, #28
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fb27 	bl	80060fc <CO_isError>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <CO_process+0x102>
 8006ab8:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8006aba:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fb42 	bl	800614a <CO_getErrorRegister>
 8006ac6:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9306      	str	r3, [sp, #24]
 8006adc:	9205      	str	r2, [sp, #20]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	9503      	str	r5, [sp, #12]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	4622      	mov	r2, r4
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7fe fd64 	bl	80055c4 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <CO_process+0x152>
        return reset;
 8006b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b08:	e047      	b.n	8006b9a <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	69d8      	ldr	r0, [r3, #28]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b14:	f7f9 ff50 	bl	80009b8 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	6918      	ldr	r0, [r3, #16]
 8006b1c:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	f7fa fdb6 	bl	8001694 <CO_NMT_process>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006b2e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8006b32:	2b7f      	cmp	r3, #127	; 0x7f
 8006b34:	d003      	beq.n	8006b3e <CO_process+0x186>
 8006b36:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	d101      	bne.n	8006b42 <CO_process+0x18a>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <CO_process+0x18c>
 8006b42:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b4c:	e011      	b.n	8006b72 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b56:	21a8      	movs	r1, #168	; 0xa8
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	18d0      	adds	r0, r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b64:	f7fd fa3e 	bl	8003fe4 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0e9      	beq.n	8006b4e <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	6958      	ldr	r0, [r3, #20]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b84:	f7fa fb10 	bl	80011a8 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe fc89 	bl	80054a8 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8006b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	373c      	adds	r7, #60	; 0x3c
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ba2 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d12e      	bne.n	8006c18 <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff fad9 	bl	8006176 <CO_NMT_getInternalState>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8006bc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bce:	d003      	beq.n	8006bd8 <CO_process_SYNC+0x36>
 8006bd0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006bd4:	2b05      	cmp	r3, #5
 8006bd6:	d101      	bne.n	8006bdc <CO_process_SYNC+0x3a>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <CO_process_SYNC+0x3c>
 8006bdc:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006bde:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	f7fe fa3d 	bl	8005068 <CO_SYNC_process>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8006bf2:	7cfb      	ldrb	r3, [r7, #19]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d008      	beq.n	8006c0a <CO_process_SYNC+0x68>
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	dc0d      	bgt.n	8006c18 <CO_process_SYNC+0x76>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <CO_process_SYNC+0x74>
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d109      	bne.n	8006c18 <CO_process_SYNC+0x76>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 8006c04:	2301      	movs	r3, #1
 8006c06:	61fb      	str	r3, [r7, #28]
                break;
 8006c08:	e006      	b.n	8006c18 <CO_process_SYNC+0x76>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fc85 	bl	800751e <CO_CANclearPendingSyncPDOs>
                break;
 8006c14:	e000      	b.n	8006c18 <CO_process_SYNC+0x76>
                break;
 8006c16:	bf00      	nop
        }
    }

    return syncWas;
 8006c18:	69fb      	ldr	r3, [r7, #28]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b088      	sub	sp, #32
 8006c26:	af02      	add	r7, sp, #8
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d129      	bne.n	8006c8c <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fa9a 	bl	8006176 <CO_NMT_getInternalState>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b05      	cmp	r3, #5
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006c4e:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006c50:	2300      	movs	r3, #0
 8006c52:	82fb      	strh	r3, [r7, #22]
 8006c54:	e015      	b.n	8006c82 <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c5e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	18d0      	adds	r0, r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	f7fb fedd 	bl	8002a30 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006c76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	82fb      	strh	r3, [r7, #22]
 8006c82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	dde5      	ble.n	8006c56 <CO_process_RPDO+0x34>
 8006c8a:	e000      	b.n	8006c8e <CO_process_RPDO+0x6c>
        return;
 8006c8c:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d129      	bne.n	8006cfe <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fa61 	bl	8006176 <CO_NMT_getInternalState>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	bf0c      	ite	eq
 8006cba:	2301      	moveq	r3, #1
 8006cbc:	2300      	movne	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006cc0:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	82fb      	strh	r3, [r7, #22]
 8006cc6:	e015      	b.n	8006cf4 <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ccc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cd0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	18d0      	adds	r0, r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	f7fc fb48 	bl	8003378 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006ce8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	82fb      	strh	r3, [r7, #22]
 8006cf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	dde5      	ble.n	8006cc8 <CO_process_TPDO+0x34>
 8006cfc:	e000      	b.n	8006d00 <CO_process_TPDO+0x6c>
        return;
 8006cfe:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <canopen_app_init+0x58>)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4619      	mov	r1, r3
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fa4b 	bl	80061bc <CO_new>
 8006d26:	4603      	mov	r3, r0
 8006d28:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <canopen_app_init+0x5c>)
 8006d2a:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <canopen_app_init+0x5c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <canopen_app_init+0x36>
////        log_printf("Error: Can't allocate memory\n");
        log_error("Error: Can't allocate memory\n");
 8006d34:	480c      	ldr	r0, [pc, #48]	; (8006d68 <canopen_app_init+0x60>)
 8006d36:	f000 ffad 	bl	8007c94 <log_error>
        return 1;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e00c      	b.n	8006d58 <canopen_app_init+0x50>
    } else {
////        log_printf("Allocated %lu bytes for CANopen objects\n", heapMemoryUsed);
        log_info("Allocated %lu bytes for CANopen objects\n", heapMemoryUsed);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	4619      	mov	r1, r3
 8006d42:	480a      	ldr	r0, [pc, #40]	; (8006d6c <canopen_app_init+0x64>)
 8006d44:	f000 ff7c 	bl	8007c40 <log_info>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <canopen_app_init+0x58>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a05      	ldr	r2, [pc, #20]	; (8006d64 <canopen_app_init+0x5c>)
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006d52:	f000 f80d 	bl	8006d70 <canopen_app_resetCommunication>
    return 0;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000454 	.word	0x20000454
 8006d64:	20000458 	.word	0x20000458
 8006d68:	0800e850 	.word	0x0800e850
 8006d6c:	0800e870 	.word	0x0800e870

08006d70 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b08f      	sub	sp, #60	; 0x3c
 8006d74:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
////    log_printf("CANopenNode - Reset communication...\n");
	log_info("CANopenNode - Reset communication...\n");
 8006d76:	487d      	ldr	r0, [pc, #500]	; (8006f6c <canopen_app_resetCommunication+0x1fc>)
 8006d78:	f000 ff62 	bl	8007c40 <log_info>
    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006d7c:	4b7c      	ldr	r3, [pc, #496]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006d86:	4b7b      	ldr	r3, [pc, #492]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f9b2 	bl	80070f4 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006d90:	4b77      	ldr	r3, [pc, #476]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa90 	bl	80072bc <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006d9c:	4b74      	ldr	r3, [pc, #464]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a74      	ldr	r2, [pc, #464]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006da2:	6811      	ldr	r1, [r2, #0]
 8006da4:	2200      	movs	r2, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fb8e 	bl	80064c8 <CO_CANinit>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	4b71      	ldr	r3, [pc, #452]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006db2:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006db4:	4b70      	ldr	r3, [pc, #448]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006db6:	f993 3000 	ldrsb.w	r3, [r3]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d008      	beq.n	8006dd0 <canopen_app_resetCommunication+0x60>
////        log_printf("Error: CAN initialization failed: %d\n", err);
        log_error("Error: CAN initialization failed: %d\n", err);
 8006dbe:	4b6e      	ldr	r3, [pc, #440]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	486d      	ldr	r0, [pc, #436]	; (8006f7c <canopen_app_resetCommunication+0x20c>)
 8006dc8:	f000 ff64 	bl	8007c94 <log_error>

        return 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0c8      	b.n	8006f62 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006dd0:	4b6b      	ldr	r3, [pc, #428]	; (8006f80 <canopen_app_resetCommunication+0x210>)
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006dd6:	4b6a      	ldr	r3, [pc, #424]	; (8006f80 <canopen_app_resetCommunication+0x210>)
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006dda:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006ddc:	4b68      	ldr	r3, [pc, #416]	; (8006f80 <canopen_app_resetCommunication+0x210>)
 8006dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006de0:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006de2:	4b67      	ldr	r3, [pc, #412]	; (8006f80 <canopen_app_resetCommunication+0x210>)
 8006de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006de6:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006de8:	4b61      	ldr	r3, [pc, #388]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	4b61      	ldr	r3, [pc, #388]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	4b60      	ldr	r3, [pc, #384]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3302      	adds	r3, #2
 8006df8:	f107 0108 	add.w	r1, r7, #8
 8006dfc:	f7ff fb90 	bl	8006520 <CO_LSSinit>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	4b5c      	ldr	r3, [pc, #368]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e06:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e08:	4b5b      	ldr	r3, [pc, #364]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <canopen_app_resetCommunication+0xb4>
        //////log_printf("Error: LSS slave initialization failed: %d\n", err);
        log_error("Error: LSS slave initialization failed: %d\n", err);
 8006e12:	4b59      	ldr	r3, [pc, #356]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e14:	f993 3000 	ldrsb.w	r3, [r3]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	485a      	ldr	r0, [pc, #360]	; (8006f84 <canopen_app_resetCommunication+0x214>)
 8006e1c:	f000 ff3a 	bl	8007c94 <log_error>
        return 2;
 8006e20:	2302      	movs	r3, #2
 8006e22:	e09e      	b.n	8006f62 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006e24:	4b53      	ldr	r3, [pc, #332]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b52      	ldr	r3, [pc, #328]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	7812      	ldrb	r2, [r2, #0]
 8006e2e:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006e34:	4b4e      	ldr	r3, [pc, #312]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	4b53      	ldr	r3, [pc, #332]	; (8006f88 <canopen_app_resetCommunication+0x218>)
 8006e3a:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006e3c:	4b4d      	ldr	r3, [pc, #308]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	1d3a      	adds	r2, r7, #4
 8006e44:	9207      	str	r2, [sp, #28]
 8006e46:	9306      	str	r3, [sp, #24]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e5c:	9302      	str	r3, [sp, #8]
 8006e5e:	f242 1311 	movw	r3, #8465	; 0x2111
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	2300      	movs	r3, #0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f7ff fb83 	bl	8006578 <CO_CANopenInit>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	4b40      	ldr	r3, [pc, #256]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e78:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01a      	beq.n	8006eba <canopen_app_resetCommunication+0x14a>
 8006e84:	4b3c      	ldr	r3, [pc, #240]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e86:	f993 3000 	ldrsb.w	r3, [r3]
 8006e8a:	f113 0f13 	cmn.w	r3, #19
 8006e8e:	d014      	beq.n	8006eba <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006e90:	4b39      	ldr	r3, [pc, #228]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006e92:	f993 3000 	ldrsb.w	r3, [r3]
 8006e96:	f113 0f0c 	cmn.w	r3, #12
 8006e9a:	d105      	bne.n	8006ea8 <canopen_app_resetCommunication+0x138>
            //////log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
            log_error("Error: Object Dictionary entry 0x%lX\n", errInfo);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	483a      	ldr	r0, [pc, #232]	; (8006f8c <canopen_app_resetCommunication+0x21c>)
 8006ea2:	f000 fef7 	bl	8007c94 <log_error>
 8006ea6:	e006      	b.n	8006eb6 <canopen_app_resetCommunication+0x146>
        } else {
////            log_printf("Error: CANopen initialization failed: %d\n", err);
            log_error("Error: CANopen initialization failed: %d\n", err);
 8006ea8:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006eaa:	f993 3000 	ldrsb.w	r3, [r3]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4837      	ldr	r0, [pc, #220]	; (8006f90 <canopen_app_resetCommunication+0x220>)
 8006eb2:	f000 feef 	bl	8007c94 <log_error>
        }
        return 3;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e053      	b.n	8006f62 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006eba:	4b2d      	ldr	r3, [pc, #180]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69d9      	ldr	r1, [r3, #28]
 8006ec4:	4b30      	ldr	r3, [pc, #192]	; (8006f88 <canopen_app_resetCommunication+0x218>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4b2a      	ldr	r3, [pc, #168]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	785c      	ldrb	r4, [r3, #1]
 8006ece:	1d3b      	adds	r3, r7, #4
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	f7ff fc98 	bl	8006808 <CO_CANopenInitPDO>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	4b26      	ldr	r3, [pc, #152]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006ede:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006ee0:	4b25      	ldr	r3, [pc, #148]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d014      	beq.n	8006f14 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006eea:	4b23      	ldr	r3, [pc, #140]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006eec:	f993 3000 	ldrsb.w	r3, [r3]
 8006ef0:	f113 0f0c 	cmn.w	r3, #12
 8006ef4:	d105      	bne.n	8006f02 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4824      	ldr	r0, [pc, #144]	; (8006f8c <canopen_app_resetCommunication+0x21c>)
 8006efc:	f007 f8ea 	bl	800e0d4 <iprintf>
 8006f00:	e006      	b.n	8006f10 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006f02:	4b1d      	ldr	r3, [pc, #116]	; (8006f78 <canopen_app_resetCommunication+0x208>)
 8006f04:	f993 3000 	ldrsb.w	r3, [r3]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4822      	ldr	r0, [pc, #136]	; (8006f94 <canopen_app_resetCommunication+0x224>)
 8006f0c:	f007 f8e2 	bl	800e0d4 <iprintf>
        }
        return 4;
 8006f10:	2304      	movs	r3, #4
 8006f12:	e026      	b.n	8006f62 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <canopen_app_resetCommunication+0x204>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f004 fd3c 	bl	800b998 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <canopen_app_resetCommunication+0x1c0>
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
//////        log_printf("CANopenNode - Node-id not initialized\n");
        log_error("CANopenNode - Node-id not initialized\n");
 8006f2a:	481b      	ldr	r0, [pc, #108]	; (8006f98 <canopen_app_resetCommunication+0x228>)
 8006f2c:	f000 feb2 	bl	8007c94 <log_error>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <canopen_app_resetCommunication+0x200>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f8ec 	bl	8007114 <CO_CANsetNormalMode>

//////    log_printf("CANopenNode - Running...\n");
    log_info("CANopenNode - Running...\n");
 8006f3c:	4817      	ldr	r0, [pc, #92]	; (8006f9c <canopen_app_resetCommunication+0x22c>)
 8006f3e:	f000 fe7f 	bl	8007c40 <log_info>
    fflush(stdout);
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <canopen_app_resetCommunication+0x230>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f006 ff79 	bl	800de40 <fflush>
    time_old = time_current = HAL_GetTick();
 8006f4e:	f001 fdbd 	bl	8008acc <HAL_GetTick>
 8006f52:	4603      	mov	r3, r0
 8006f54:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <canopen_app_resetCommunication+0x234>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <canopen_app_resetCommunication+0x234>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <canopen_app_resetCommunication+0x238>)
 8006f5e:	6013      	str	r3, [r2, #0]
    return 0;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd90      	pop	{r4, r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800e89c 	.word	0x0800e89c
 8006f70:	20000458 	.word	0x20000458
 8006f74:	20000454 	.word	0x20000454
 8006f78:	20000464 	.word	0x20000464
 8006f7c:	0800e8c4 	.word	0x0800e8c4
 8006f80:	20000000 	.word	0x20000000
 8006f84:	0800e8ec 	.word	0x0800e8ec
 8006f88:	200003cc 	.word	0x200003cc
 8006f8c:	0800e918 	.word	0x0800e918
 8006f90:	0800e940 	.word	0x0800e940
 8006f94:	0800e96c 	.word	0x0800e96c
 8006f98:	0800e994 	.word	0x0800e994
 8006f9c:	0800e9bc 	.word	0x0800e9bc
 8006fa0:	20000434 	.word	0x20000434
 8006fa4:	20000460 	.word	0x20000460
 8006fa8:	2000045c 	.word	0x2000045c

08006fac <canopen_app_process>:

void
canopen_app_process() {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8006fb2:	f001 fd8b 	bl	8008acc <HAL_GetTick>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4a27      	ldr	r2, [pc, #156]	; (8007058 <canopen_app_process+0xac>)
 8006fba:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8006fbc:	4b26      	ldr	r3, [pc, #152]	; (8007058 <canopen_app_process+0xac>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	4b26      	ldr	r3, [pc, #152]	; (800705c <canopen_app_process+0xb0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d043      	beq.n	8007050 <canopen_app_process+0xa4>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006fc8:	4b23      	ldr	r3, [pc, #140]	; (8007058 <canopen_app_process+0xac>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b23      	ldr	r3, [pc, #140]	; (800705c <canopen_app_process+0xb0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
 8006fda:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8006fdc:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <canopen_app_process+0xac>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1e      	ldr	r2, [pc, #120]	; (800705c <canopen_app_process+0xb0>)
 8006fe2:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8006fe4:	4b1e      	ldr	r3, [pc, #120]	; (8007060 <canopen_app_process+0xb4>)
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	2100      	movs	r1, #0
 8006fee:	f7ff fce3 	bl	80069b8 <CO_process>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <canopen_app_process+0xb4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	7a5a      	ldrb	r2, [r3, #9]
 8006ffe:	4b19      	ldr	r3, [pc, #100]	; (8007064 <canopen_app_process+0xb8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	09d2      	lsrs	r2, r2, #7
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <canopen_app_process+0xb4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	7a9a      	ldrb	r2, [r3, #10]
 8007010:	4b14      	ldr	r3, [pc, #80]	; (8007064 <canopen_app_process+0xb8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	09d2      	lsrs	r2, r2, #7
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d10f      	bne.n	8007040 <canopen_app_process+0x94>
            /* delete objects from memory */
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007020:	4b10      	ldr	r3, [pc, #64]	; (8007064 <canopen_app_process+0xb8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f865 	bl	80070f4 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 800702a:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <canopen_app_process+0xb4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f9eb 	bl	800640a <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8007034:	480c      	ldr	r0, [pc, #48]	; (8007068 <canopen_app_process+0xbc>)
 8007036:	f007 f8e7 	bl	800e208 <puts>
            canopen_app_resetCommunication(); // Reset Communication routine
 800703a:	f7ff fe99 	bl	8006d70 <canopen_app_resetCommunication>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 800703e:	e007      	b.n	8007050 <canopen_app_process+0xa4>
        } else if (reset_status == CO_RESET_APP) {
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d104      	bne.n	8007050 <canopen_app_process+0xa4>
            log_printf("CANopenNode Device Reset\n");
 8007046:	4809      	ldr	r0, [pc, #36]	; (800706c <canopen_app_process+0xc0>)
 8007048:	f007 f8de 	bl	800e208 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 800704c:	f002 fd0b 	bl	8009a66 <HAL_NVIC_SystemReset>
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000460 	.word	0x20000460
 800705c:	2000045c 	.word	0x2000045c
 8007060:	20000458 	.word	0x20000458
 8007064:	20000454 	.word	0x20000454
 8007068:	0800e9d8 	.word	0x0800e9d8
 800706c:	0800ea00 	.word	0x0800ea00

08007070 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007076:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <canopen_app_interrupt+0x80>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800707c:	f3ef 8210 	mrs	r2, PRIMASK
 8007080:	607a      	str	r2, [r7, #4]
  return(result);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007086:	b672      	cpsid	i
}
 8007088:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 800708a:	4b19      	ldr	r3, [pc, #100]	; (80070f0 <canopen_app_interrupt+0x80>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d120      	bne.n	80070d6 <canopen_app_interrupt+0x66>
 8007094:	4b16      	ldr	r3, [pc, #88]	; (80070f0 <canopen_app_interrupt+0x80>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80070a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070a8:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80070aa:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <canopen_app_interrupt+0x80>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fd75 	bl	8006ba2 <CO_process_SYNC>
 80070b8:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <canopen_app_interrupt+0x80>)
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	2300      	movs	r3, #0
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	f7ff fdad 	bl	8006c22 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <canopen_app_interrupt+0x80>)
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	2300      	movs	r3, #0
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	68f9      	ldr	r1, [r7, #12]
 80070d2:	f7ff fddf 	bl	8006c94 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <canopen_app_interrupt+0x80>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	f383 8810 	msr	PRIMASK, r3
}
 80070e6:	bf00      	nop
}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000458 	.word	0x20000458

080070f4 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fef5 	bl	8008ef6 <HAL_CAN_Stop>
#endif
    }
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	4618      	mov	r0, r3
 800712c:	f001 fe9f 	bl	8008e6e <HAL_CAN_Start>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	615a      	str	r2, [r3, #20]
        }
    }
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b090      	sub	sp, #64	; 0x40
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <CO_CANmodule_init+0x20>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <CO_CANmodule_init+0x20>
 800715e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007164:	f04f 33ff 	mov.w	r3, #4294967295
 8007168:	e0a1      	b.n	80072ae <CO_CANmodule_init+0x16a>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007170:	4a51      	ldr	r2, [pc, #324]	; (80072b8 <CO_CANmodule_init+0x174>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	887a      	ldrh	r2, [r7, #2]
 8007180:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007186:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800718e:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80071ba:	2300      	movs	r3, #0
 80071bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071be:	e02b      	b.n	8007218 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80071c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80071c2:	4613      	mov	r3, r2
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	2200      	movs	r2, #0
 80071d2:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80071d4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80071d6:	4613      	mov	r3, r2
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4413      	add	r3, r2
 80071e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071e8:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80071ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80071ec:	4613      	mov	r3, r2
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	461a      	mov	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4413      	add	r3, r2
 80071fa:	2200      	movs	r2, #0
 80071fc:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 80071fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	461a      	mov	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	2200      	movs	r2, #0
 8007210:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007214:	3301      	adds	r3, #1
 8007216:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007218:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800721a:	887b      	ldrh	r3, [r7, #2]
 800721c:	429a      	cmp	r2, r3
 800721e:	d3cf      	bcc.n	80071c0 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007220:	2300      	movs	r3, #0
 8007222:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007224:	e00c      	b.n	8007240 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8007226:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007228:	4613      	mov	r3, r2
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4413      	add	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	461a      	mov	r2, r3
 8007232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007234:	4413      	add	r3, r2
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800723a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800723c:	3301      	adds	r3, #1
 800723e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007240:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007242:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007246:	429a      	cmp	r2, r3
 8007248:	d3ed      	bcc.n	8007226 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	4798      	blx	r3
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	62bb      	str	r3, [r7, #40]	; 0x28
        FilterConfig.FilterBank = 0;
    } else {
        FilterConfig.FilterBank = 14;
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007254:	2300      	movs	r3, #0
 8007256:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007258:	2301      	movs	r3, #1
 800725a:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007268:	2300      	movs	r3, #0
 800726a:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800726c:	2300      	movs	r3, #0
 800726e:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007270:	2301      	movs	r3, #1
 8007272:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007274:	230e      	movs	r3, #14
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f107 0214 	add.w	r2, r7, #20
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fd29 	bl	8008cda <HAL_CAN_ConfigFilter>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <CO_CANmodule_init+0x150>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	e00c      	b.n	80072ae <CO_CANmodule_init+0x16a>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2113      	movs	r1, #19
 800729a:	4618      	mov	r0, r3
 800729c:	f002 f89b 	bl	80093d6 <HAL_CAN_ActivateNotification>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <CO_CANmodule_init+0x168>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80072a6:	f04f 33ff 	mov.w	r3, #4294967295
 80072aa:	e000      	b.n	80072ae <CO_CANmodule_init+0x16a>
    }
#endif

    return CO_ERROR_NO;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3740      	adds	r7, #64	; 0x40
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000468 	.word	0x20000468

080072bc <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <CO_CANmodule_disable+0x22>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fe0c 	bl	8008ef6 <HAL_CAN_Stop>
#endif
    }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	817b      	strh	r3, [r7, #10]
 80072fa:	460b      	mov	r3, r1
 80072fc:	813b      	strh	r3, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d03c      	beq.n	8007386 <CO_CANrxBufferInit+0x9e>
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	d039      	beq.n	8007386 <CO_CANrxBufferInit+0x9e>
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	2b00      	cmp	r3, #0
 8007316:	d036      	beq.n	8007386 <CO_CANrxBufferInit+0x9e>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	891b      	ldrh	r3, [r3, #8]
 800731c:	897a      	ldrh	r2, [r7, #10]
 800731e:	429a      	cmp	r2, r3
 8007320:	d231      	bcs.n	8007386 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6859      	ldr	r1, [r3, #4]
 8007326:	897a      	ldrh	r2, [r7, #10]
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007338:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800733e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007340:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007348:	b21b      	sxth	r3, r3
 800734a:	6a3a      	ldr	r2, [r7, #32]
 800734c:	2a00      	cmp	r2, #0
 800734e:	d001      	beq.n	8007354 <CO_CANrxBufferInit+0x6c>
 8007350:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <CO_CANrxBufferInit+0xb8>)
 8007352:	e000      	b.n	8007356 <CO_CANrxBufferInit+0x6e>
 8007354:	2200      	movs	r2, #0
 8007356:	4313      	orrs	r3, r2
 8007358:	b21b      	sxth	r3, r3
 800735a:	b29a      	uxth	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007368:	b21b      	sxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b21b      	sxth	r3, r3
 8007374:	b29a      	uxth	r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007382:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007384:	e002      	b.n	800738c <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007386:	23ff      	movs	r3, #255	; 0xff
 8007388:	75fb      	strb	r3, [r7, #23]
 800738a:	e000      	b.n	800738e <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800738c:	bf00      	nop
    }

    return ret;
 800738e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007392:	4618      	mov	r0, r3
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	ffff8000 	.word	0xffff8000

080073a4 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	817b      	strh	r3, [r7, #10]
 80073b2:	4613      	mov	r3, r2
 80073b4:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d024      	beq.n	800740a <CO_CANtxBufferInit+0x66>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8a1b      	ldrh	r3, [r3, #16]
 80073c4:	897a      	ldrh	r2, [r7, #10]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d21f      	bcs.n	800740a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68d9      	ldr	r1, [r3, #12]
 80073ce:	897a      	ldrh	r2, [r7, #10]
 80073d0:	4613      	mov	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	440b      	add	r3, r1
 80073da:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80073dc:	893b      	ldrh	r3, [r7, #8]
 80073de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	d002      	beq.n	80073ee <CO_CANtxBufferInit+0x4a>
 80073e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80073ec:	e000      	b.n	80073f0 <CO_CANtxBufferInit+0x4c>
 80073ee:	2200      	movs	r2, #0
 80073f0:	431a      	orrs	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80073fc:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2200      	movs	r2, #0
 8007402:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007408:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 800740a:	697b      	ldr	r3, [r7, #20]
}
 800740c:	4618      	mov	r0, r3
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f001 fe7b 	bl	8009128 <HAL_CAN_GetTxMailboxesFreeLevel>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d028      	beq.n	800748a <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007438:	4b16      	ldr	r3, [pc, #88]	; (8007494 <prv_send_can_message+0x7c>)
 800743a:	2200      	movs	r2, #0
 800743c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <prv_send_can_message+0x7c>)
 8007440:	2200      	movs	r2, #0
 8007442:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	791b      	ldrb	r3, [r3, #4]
 8007448:	461a      	mov	r2, r3
 800744a:	4b12      	ldr	r3, [pc, #72]	; (8007494 <prv_send_can_message+0x7c>)
 800744c:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007456:	4a0f      	ldr	r2, [pc, #60]	; (8007494 <prv_send_can_message+0x7c>)
 8007458:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	0b9b      	lsrs	r3, r3, #14
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	4a0b      	ldr	r2, [pc, #44]	; (8007494 <prv_send_can_message+0x7c>)
 8007466:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6898      	ldr	r0, [r3, #8]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	1d5a      	adds	r2, r3, #5
 8007472:	f107 0308 	add.w	r3, r7, #8
 8007476:	4907      	ldr	r1, [pc, #28]	; (8007494 <prv_send_can_message+0x7c>)
 8007478:	f001 fd86 	bl	8008f88 <HAL_CAN_AddTxMessage>
 800747c:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf0c      	ite	eq
 8007482:	2301      	moveq	r3, #1
 8007484:	2300      	movne	r3, #0
 8007486:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007488:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	2000046c 	.word	0x2000046c

08007498 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	8a5b      	ldrh	r3, [r3, #18]
 80074ba:	f043 0308 	orr.w	r3, r3, #8
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80074c4:	23f7      	movs	r3, #247	; 0xf7
 80074c6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c8:	f3ef 8310 	mrs	r3, PRIMASK
 80074cc:	613b      	str	r3, [r7, #16]
  return(result);
 80074ce:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80074d4:	b672      	cpsid	i
}
 80074d6:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ff9c 	bl	8007418 <prv_send_can_message>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	61da      	str	r2, [r3, #28]
 80074ee:	e009      	b.n	8007504 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2201      	movs	r2, #1
 80074f4:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3301      	adds	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f383 8810 	msr	PRIMASK, r3
}
 8007510:	bf00      	nop

    return err;
 8007512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 800751e:	b480      	push	{r7}
 8007520:	b087      	sub	sp, #28
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800752a:	f3ef 8310 	mrs	r3, PRIMASK
 800752e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007530:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007536:	b672      	cpsid	i
}
 8007538:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007548:	2301      	movs	r3, #1
 800754a:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d032      	beq.n	80075bc <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8a1b      	ldrh	r3, [r3, #16]
 800755a:	827b      	strh	r3, [r7, #18]
 800755c:	e02b      	b.n	80075b6 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68d9      	ldr	r1, [r3, #12]
 8007562:	8a7a      	ldrh	r2, [r7, #18]
 8007564:	4613      	mov	r3, r2
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	4413      	add	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	440b      	add	r3, r1
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01d      	beq.n	80075b0 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68d9      	ldr	r1, [r3, #12]
 8007578:	8a7a      	ldrh	r2, [r7, #18]
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	440b      	add	r3, r1
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d012      	beq.n	80075b0 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	8a7a      	ldrh	r2, [r7, #18]
 8007590:	4613      	mov	r3, r2
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4413      	add	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	440b      	add	r3, r1
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80075ac:	2302      	movs	r3, #2
 80075ae:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80075b0:	8a7b      	ldrh	r3, [r7, #18]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	827b      	strh	r3, [r7, #18]
 80075b6:	8a7b      	ldrh	r3, [r7, #18]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1d0      	bne.n	800755e <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f383 8810 	msr	PRIMASK, r3
}
 80075c8:	bf00      	nop
    if (tpdoDeleted) {
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d006      	beq.n	80075de <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	8a5b      	ldrh	r3, [r3, #18]
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	b29a      	uxth	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	825a      	strh	r2, [r3, #18]
    }
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
//// static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	429a      	cmp	r2, r3
 800760e:	d02e      	beq.n	800766e <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8a5b      	ldrh	r3, [r3, #18]
 8007614:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d004      	beq.n	8007630 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	f043 0304 	orr.w	r3, r3, #4
 800762c:	81fb      	strh	r3, [r7, #14]
 800762e:	e01b      	b.n	8007668 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8007630:	89fb      	ldrh	r3, [r7, #14]
 8007632:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8007646:	89fb      	ldrh	r3, [r7, #14]
 8007648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d005      	beq.n	8007668 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 800765c:	89fb      	ldrh	r3, [r7, #14]
 800765e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007662:	f043 0302 	orr.w	r3, r3, #2
 8007666:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	89fa      	ldrh	r2, [r7, #14]
 800766c:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	; 0x30
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8007688:	2300      	movs	r3, #0
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8007692:	f107 0314 	add.w	r3, r7, #20
 8007696:	3305      	adds	r3, #5
 8007698:	4a2c      	ldr	r2, [pc, #176]	; (800774c <prv_read_can_received_msg+0xd0>)
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f001 fd78 	bl	8009192 <HAL_CAN_GetRxMessage>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d14c      	bne.n	8007742 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80076a8:	4b28      	ldr	r3, [pc, #160]	; (800774c <prv_read_can_received_msg+0xd0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a27      	ldr	r2, [pc, #156]	; (800774c <prv_read_can_received_msg+0xd0>)
 80076ae:	68d2      	ldr	r2, [r2, #12]
 80076b0:	2a02      	cmp	r2, #2
 80076b2:	d102      	bne.n	80076ba <prv_read_can_received_msg+0x3e>
 80076b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80076b8:	e000      	b.n	80076bc <prv_read_can_received_msg+0x40>
 80076ba:	2200      	movs	r2, #0
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 80076c0:	4b22      	ldr	r3, [pc, #136]	; (800774c <prv_read_can_received_msg+0xd0>)
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 80076cc:	4b20      	ldr	r3, [pc, #128]	; (8007750 <prv_read_can_received_msg+0xd4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 80076d6:	be00      	bkpt	0x0000
 80076d8:	e01f      	b.n	800771a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80076da:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <prv_read_can_received_msg+0xd4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80076e2:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <prv_read_can_received_msg+0xd4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	891b      	ldrh	r3, [r3, #8]
 80076e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80076ea:	e013      	b.n	8007714 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	4053      	eors	r3, r2
 80076f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f8:	8852      	ldrh	r2, [r2, #2]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8007706:	e008      	b.n	800771a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007708:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800770a:	3b01      	subs	r3, #1
 800770c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	330c      	adds	r3, #12
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e8      	bne.n	80076ec <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800771a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800771e:	2b00      	cmp	r3, #0
 8007720:	d010      	beq.n	8007744 <prv_read_can_received_msg+0xc8>
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00d      	beq.n	8007744 <prv_read_can_received_msg+0xc8>
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007736:	6852      	ldr	r2, [r2, #4]
 8007738:	f107 0114 	add.w	r1, r7, #20
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	e000      	b.n	8007744 <prv_read_can_received_msg+0xc8>
        return;
 8007742:	bf00      	nop
    }
}
 8007744:	3730      	adds	r7, #48	; 0x30
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000484 	.word	0x20000484
 8007750:	20000468 	.word	0x20000468

08007754 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 800775c:	2200      	movs	r2, #0
 800775e:	2100      	movs	r1, #0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff ff8b 	bl	800767c <prv_read_can_received_msg>
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8007776:	2200      	movs	r2, #0
 8007778:	2101      	movs	r1, #1
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff ff7e 	bl	800767c <prv_read_can_received_msg>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d03d      	beq.n	8007824 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ae:	f3ef 8310 	mrs	r3, PRIMASK
 80077b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80077b4:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80077ba:	b672      	cpsid	i
}
 80077bc:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	8a1b      	ldrh	r3, [r3, #16]
 80077c2:	827b      	strh	r3, [r7, #18]
 80077c4:	e01e      	b.n	8007804 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d014      	beq.n	80077f8 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 80077ce:	6979      	ldr	r1, [r7, #20]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fe21 	bl	8007418 <prv_send_can_message>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00d      	beq.n	80077f8 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 80077f8:	8a7b      	ldrh	r3, [r7, #18]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	827b      	strh	r3, [r7, #18]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	3318      	adds	r3, #24
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	8a7b      	ldrh	r3, [r7, #18]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1dd      	bne.n	80077c6 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 800780a:	8a7b      	ldrh	r3, [r7, #18]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f383 8810 	msr	PRIMASK, r3
}
 8007822:	bf00      	nop
    }
}
 8007824:	bf00      	nop
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2101      	movs	r1, #1
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff ffa4 	bl	8007788 <CO_CANinterrupt_TX>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000468 	.word	0x20000468

0800784c <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2101      	movs	r1, #1
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff ff94 	bl	8007788 <CO_CANinterrupt_TX>
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000468 	.word	0x20000468

0800786c <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007874:	4b04      	ldr	r3, [pc, #16]	; (8007888 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2101      	movs	r1, #1
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff ff84 	bl	8007788 <CO_CANinterrupt_TX>
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000468 	.word	0x20000468

0800788c <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8007894:	4a09      	ldr	r2, [pc, #36]	; (80078bc <dma_printf_init+0x30>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 800789c:	4807      	ldr	r0, [pc, #28]	; (80078bc <dma_printf_init+0x30>)
 800789e:	f000 f87d 	bl	800799c <dma_ring_init>
    dmi.sending = false;
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <dma_printf_init+0x30>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <dma_printf_init+0x30>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	200004a0 	.word	0x200004a0

080078c0 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 80078c0:	b590      	push	{r4, r7, lr}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	4619      	mov	r1, r3
 80078ce:	4814      	ldr	r0, [pc, #80]	; (8007920 <dma_printf_putc+0x60>)
 80078d0:	f000 f8ae 	bl	8007a30 <dma_ring_putc>
    if(!dmi.sending){
 80078d4:	4b12      	ldr	r3, [pc, #72]	; (8007920 <dma_printf_putc+0x60>)
 80078d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d11b      	bne.n	8007916 <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80078de:	4810      	ldr	r0, [pc, #64]	; (8007920 <dma_printf_putc+0x60>)
 80078e0:	f000 f902 	bl	8007ae8 <dma_ring_available_linear>
 80078e4:	4603      	mov	r3, r0
 80078e6:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 80078e8:	89fb      	ldrh	r3, [r7, #14]
 80078ea:	4a0d      	ldr	r2, [pc, #52]	; (8007920 <dma_printf_putc+0x60>)
 80078ec:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <dma_printf_putc+0x60>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80078f8:	4b09      	ldr	r3, [pc, #36]	; (8007920 <dma_printf_putc+0x60>)
 80078fa:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 80078fe:	4808      	ldr	r0, [pc, #32]	; (8007920 <dma_printf_putc+0x60>)
 8007900:	f000 f915 	bl	8007b2e <dma_ring_get_r_ptr>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	4b05      	ldr	r3, [pc, #20]	; (8007920 <dma_printf_putc+0x60>)
 800790a:	4413      	add	r3, r2
 800790c:	89fa      	ldrh	r2, [r7, #14]
 800790e:	4619      	mov	r1, r3
 8007910:	4620      	mov	r0, r4
 8007912:	f004 fbb1 	bl	800c078 <HAL_UART_Transmit_DMA>
    }
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	bd90      	pop	{r4, r7, pc}
 800791e:	bf00      	nop
 8007920:	200004a0 	.word	0x200004a0

08007924 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <dma_printf_send_it+0x74>)
 800792e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d12b      	bne.n	8007990 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8007938:	4b17      	ldr	r3, [pc, #92]	; (8007998 <dma_printf_send_it+0x74>)
 800793a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800793e:	4619      	mov	r1, r3
 8007940:	4815      	ldr	r0, [pc, #84]	; (8007998 <dma_printf_send_it+0x74>)
 8007942:	f000 f901 	bl	8007b48 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8007946:	4814      	ldr	r0, [pc, #80]	; (8007998 <dma_printf_send_it+0x74>)
 8007948:	f000 f8ce 	bl	8007ae8 <dma_ring_available_linear>
 800794c:	4603      	mov	r3, r0
 800794e:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8007950:	89fb      	ldrh	r3, [r7, #14]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d017      	beq.n	8007986 <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 8007956:	89fb      	ldrh	r3, [r7, #14]
 8007958:	4a0f      	ldr	r2, [pc, #60]	; (8007998 <dma_printf_send_it+0x74>)
 800795a:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 800795e:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <dma_printf_send_it+0x74>)
 8007960:	2201      	movs	r2, #1
 8007962:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <dma_printf_send_it+0x74>)
 8007968:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 800796c:	480a      	ldr	r0, [pc, #40]	; (8007998 <dma_printf_send_it+0x74>)
 800796e:	f000 f8de 	bl	8007b2e <dma_ring_get_r_ptr>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	4b08      	ldr	r3, [pc, #32]	; (8007998 <dma_printf_send_it+0x74>)
 8007978:	4413      	add	r3, r2
 800797a:	89fa      	ldrh	r2, [r7, #14]
 800797c:	4619      	mov	r1, r3
 800797e:	4620      	mov	r0, r4
 8007980:	f004 fb7a 	bl	800c078 <HAL_UART_Transmit_DMA>
 8007984:	e005      	b.n	8007992 <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 8007986:	4b04      	ldr	r3, [pc, #16]	; (8007998 <dma_printf_send_it+0x74>)
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800798e:	e000      	b.n	8007992 <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8007990:	bf00      	nop
    }
}
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	bd90      	pop	{r4, r7, pc}
 8007998:	200004a0 	.word	0x200004a0

0800799c <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079aa:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <dma_ring_getc>:

int dma_ring_getc(struct dma_ring_buf *ring, uint8_t *c){
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  if(ring->r_ptr == ring->w_ptr) return RING_FAIL;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d101      	bne.n	80079f0 <dma_ring_getc+0x1e>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e019      	b.n	8007a24 <dma_ring_getc+0x52>
  uint16_t next_ptr = ring->r_ptr+1;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80079f6:	3301      	adds	r3, #1
 80079f8:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8007a00:	89fa      	ldrh	r2, [r7, #14]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d301      	bcc.n	8007a0a <dma_ring_getc+0x38>
 8007a06:	2300      	movs	r3, #0
 8007a08:	81fb      	strh	r3, [r7, #14]

  *c = ring->buf[ring->r_ptr];
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	5c9a      	ldrb	r2, [r3, r2]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	701a      	strb	r2, [r3, #0]
  ring->r_ptr = next_ptr;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	89fa      	ldrh	r2, [r7, #14]
 8007a1e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  return RING_SUCCESS;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <dma_ring_putc>:

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007a42:	3301      	adds	r3, #1
 8007a44:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8007a4c:	89fa      	ldrh	r2, [r7, #14]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d301      	bcc.n	8007a56 <dma_ring_putc+0x26>
 8007a52:	2300      	movs	r3, #0
 8007a54:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007a5c:	89fa      	ldrh	r2, [r7, #14]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d109      	bne.n	8007a76 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8007a68:	3301      	adds	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e00b      	b.n	8007a8e <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	78fa      	ldrb	r2, [r7, #3]
 8007a82:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	89fa      	ldrh	r2, [r7, #14]
 8007a88:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <dma_ring_available>:

int dma_ring_available(struct dma_ring_buf *ring){
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d308      	bcc.n	8007ac4 <dma_ring_available+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	e00b      	b.n	8007adc <dma_ring_available+0x42>
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007ad2:	4413      	add	r3, r2
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
 8007ada:	1a9b      	subs	r3, r3, r2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <dma_ring_available_linear>:
int dma_ring_available_linear(struct dma_ring_buf *ring){
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d308      	bcc.n	8007b12 <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	e007      	b.n	8007b22 <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8007b18:	461a      	mov	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007b20:	1ad3      	subs	r3, r2, r3
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  while(len > 0){
 8007b52:	e018      	b.n	8007b86 <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8007b62:	4293      	cmp	r3, r2
 8007b64:	db04      	blt.n	8007b70 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007b6e:	e007      	b.n	8007b80 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8007b76:	3301      	adds	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	603b      	str	r3, [r7, #0]
  while(len > 0){
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dce3      	bgt.n	8007b54 <dma_ring_forward_r_ptr+0xc>
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <dma_ring_set_w_ptr>:

void dma_ring_set_w_ptr(struct dma_ring_buf *ring, uint16_t w_ptr){
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	807b      	strh	r3, [r7, #2]
    ring->w_ptr = w_ptr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	887a      	ldrh	r2, [r7, #2]
 8007baa:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
    dsi.huart = scanf_huart;
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <dma_scanf_init+0x34>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
    dma_ring_init(&dsi.rx_ring);
 8007bcc:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <dma_scanf_init+0x34>)
 8007bce:	f7ff fee5 	bl	800799c <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <dma_scanf_init+0x34>)
 8007bd4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007bd8:	4a05      	ldr	r2, [pc, #20]	; (8007bf0 <dma_scanf_init+0x34>)
 8007bda:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8007bde:	4904      	ldr	r1, [pc, #16]	; (8007bf0 <dma_scanf_init+0x34>)
 8007be0:	4618      	mov	r0, r3
 8007be2:	f004 fac5 	bl	800c170 <HAL_UART_Receive_DMA>
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200008b4 	.word	0x200008b4

08007bf4 <dma_scanf_getc_blocking>:

int dma_scanf_getc_blocking(){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
    while(dma_ring_available(&dsi.rx_ring) == 0){
 8007bfa:	e00f      	b.n	8007c1c <dma_scanf_getc_blocking+0x28>
        dma_ring_set_w_ptr(&dsi.rx_ring, (uint16_t)((dsi.rx_ring.buf_size - dsi.huart->hdmarx->Instance->CNDTR)&0xFFFF));
 8007bfc:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <dma_scanf_getc_blocking+0x48>)
 8007bfe:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8007c02:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <dma_scanf_getc_blocking+0x48>)
 8007c04:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4619      	mov	r1, r3
 8007c16:	4809      	ldr	r0, [pc, #36]	; (8007c3c <dma_scanf_getc_blocking+0x48>)
 8007c18:	f7ff ffbf 	bl	8007b9a <dma_ring_set_w_ptr>
    while(dma_ring_available(&dsi.rx_ring) == 0){
 8007c1c:	4807      	ldr	r0, [pc, #28]	; (8007c3c <dma_scanf_getc_blocking+0x48>)
 8007c1e:	f7ff ff3c 	bl	8007a9a <dma_ring_available>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0e9      	beq.n	8007bfc <dma_scanf_getc_blocking+0x8>
    }
////    char c;
    uint8_t c;
    dma_ring_getc(&dsi.rx_ring, &c);
 8007c28:	1dfb      	adds	r3, r7, #7
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4803      	ldr	r0, [pc, #12]	; (8007c3c <dma_scanf_getc_blocking+0x48>)
 8007c2e:	f7ff fed0 	bl	80079d2 <dma_ring_getc>
    return c;
 8007c32:	79fb      	ldrb	r3, [r7, #7]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200008b4 	.word	0x200008b4

08007c40 <log_info>:
//
#include "main.h"
#include "log.h"
#include <stdarg.h>
#include <stdio.h>
void log_info(const char *msg, ...){
 8007c40:	b40f      	push	{r0, r1, r2, r3}
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
    fprintf(stdout, "[INFO]:");
 8007c48:	4b10      	ldr	r3, [pc, #64]	; (8007c8c <log_info+0x4c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2207      	movs	r2, #7
 8007c50:	2101      	movs	r1, #1
 8007c52:	480f      	ldr	r0, [pc, #60]	; (8007c90 <log_info+0x50>)
 8007c54:	f006 fa30 	bl	800e0b8 <fwrite>
    va_list ap;
    va_start(ap, msg);
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	607b      	str	r3, [r7, #4]
    vfprintf(stdout, msg, ap);
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <log_info+0x4c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6939      	ldr	r1, [r7, #16]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f005 fea1 	bl	800d9b0 <vfiprintf>
    va_end(ap);
    fputc('\r', stdout);
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <log_info+0x4c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4619      	mov	r1, r3
 8007c76:	200d      	movs	r0, #13
 8007c78:	f006 f9ac 	bl	800dfd4 <fputc>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c86:	b004      	add	sp, #16
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000434 	.word	0x20000434
 8007c90:	0800ea1c 	.word	0x0800ea1c

08007c94 <log_error>:

void log_error(const char *msg, ...){
 8007c94:	b40f      	push	{r0, r1, r2, r3}
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
    fprintf(stdout, "[ERROR]:");
 8007c9c:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <log_error+0x4c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2208      	movs	r2, #8
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	480f      	ldr	r0, [pc, #60]	; (8007ce4 <log_error+0x50>)
 8007ca8:	f006 fa06 	bl	800e0b8 <fwrite>
    va_list ap;
    va_start(ap, msg);
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	607b      	str	r3, [r7, #4]
    vfprintf(stdout, msg, ap);
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <log_error+0x4c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6939      	ldr	r1, [r7, #16]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f005 fe77 	bl	800d9b0 <vfiprintf>
    va_end(ap);
    fputc('\r', stdout);
 8007cc2:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <log_error+0x4c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	200d      	movs	r0, #13
 8007ccc:	f006 f982 	bl	800dfd4 <fputc>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cda:	b004      	add	sp, #16
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20000434 	.word	0x20000434
 8007ce4:	0800ea24 	.word	0x0800ea24

08007ce8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	static uint32_t c;
////	if(htim->Instance == htim7.Instance) {
	if (htim == canopenNodeSTM32->timerHandle) {
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d114      	bne.n	8007d26 <HAL_TIM_PeriodElapsedCallback+0x3e>
		HAL_IWDG_Refresh(&hiwdg);
 8007cfc:	480d      	ldr	r0, [pc, #52]	; (8007d34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007cfe:	f002 fb24 	bl	800a34a <HAL_IWDG_Refresh>
		canopen_app_interrupt();
 8007d02:	f7ff f9b5 	bl	8007070 <canopen_app_interrupt>
		c++;
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007d0e:	6013      	str	r3, [r2, #0]
		if (c >= 50) {
 8007d10:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b31      	cmp	r3, #49	; 0x31
 8007d16:	d906      	bls.n	8007d26 <HAL_TIM_PeriodElapsedCallback+0x3e>
////			flag = 1;
			c = 0;
 8007d18:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007d1e:	2108      	movs	r1, #8
 8007d20:	4806      	ldr	r0, [pc, #24]	; (8007d3c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007d22:	f002 faa9 	bl	800a278 <HAL_GPIO_TogglePin>
		}
	}
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000454 	.word	0x20000454
 8007d34:	20000ce8 	.word	0x20000ce8
 8007d38:	2000100c 	.word	0x2000100c
 8007d3c:	48000400 	.word	0x48000400

08007d40 <__io_putchar>:

int __io_putchar(int ch)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  dma_printf_putc(ch&0xFF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fdb7 	bl	80078c0 <dma_printf_putc>
  return ch;
 8007d52:	687b      	ldr	r3, [r7, #4]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <__io_getchar>:

int __io_getchar(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  return dma_scanf_getc_blocking();
 8007d60:	f7ff ff48 	bl	8007bf4 <dma_scanf_getc_blocking>
 8007d64:	4603      	mov	r3, r0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]

}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  dma_printf_send_it(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fdcc 	bl	8007924 <dma_printf_send_it>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d9a:	f000 fe2e 	bl	80089fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d9e:	f000 f86f 	bl	8007e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007da2:	f000 fa15 	bl	80081d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007da6:	f000 f9dd 	bl	8008164 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8007daa:	f000 f9ab 	bl	8008104 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8007dae:	f000 f8c7 	bl	8007f40 <MX_CAN1_Init>
  MX_IWDG_Init();
 8007db2:	f000 f8fb 	bl	8007fac <MX_IWDG_Init>
  MX_RTC_Init();
 8007db6:	f000 f917 	bl	8007fe8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8007dba:	f000 f973 	bl	80080a4 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8007dbe:	f000 f93b 	bl	8008038 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8007dc2:	4826      	ldr	r0, [pc, #152]	; (8007e5c <main+0xc8>)
 8007dc4:	f003 fde8 	bl	800b998 <HAL_TIM_Base_Start_IT>

  setbuf(stdin, NULL);
 8007dc8:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <main+0xcc>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f006 fa21 	bl	800e218 <setbuf>
  setbuf(stdout, NULL);
 8007dd6:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <main+0xcc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f006 fa1a 	bl	800e218 <setbuf>
  setbuf(stderr, NULL);
 8007de4:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <main+0xcc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f006 fa13 	bl	800e218 <setbuf>
  dma_printf_init(&huart2);
 8007df2:	481c      	ldr	r0, [pc, #112]	; (8007e64 <main+0xd0>)
 8007df4:	f7ff fd4a 	bl	800788c <dma_printf_init>
  dma_scanf_init(&huart2);
 8007df8:	481a      	ldr	r0, [pc, #104]	; (8007e64 <main+0xd0>)
 8007dfa:	f7ff fedf 	bl	8007bbc <dma_scanf_init>


  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007dfe:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <main+0xd4>)
 8007e00:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8007e02:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <main+0xd8>)
 8007e04:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.timerHandle = &htim7;
 8007e06:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <main+0xc8>)
 8007e08:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.desiredNodeID = 29;
 8007e0a:	231d      	movs	r3, #29
 8007e0c:	713b      	strb	r3, [r7, #4]
  canOpenNodeSTM32.baudrate = 125;
 8007e0e:	237d      	movs	r3, #125	; 0x7d
 8007e10:	71bb      	strb	r3, [r7, #6]
  canopen_app_init(&canOpenNodeSTM32);
 8007e12:	1d3b      	adds	r3, r7, #4
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe ff77 	bl	8006d08 <canopen_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int cnt = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
  while (1)
  {
    if (flag == 1)
 8007e1e:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <main+0xdc>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d117      	bne.n	8007e56 <main+0xc2>
	{
      flag = 0;
 8007e26:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <main+0xdc>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	2110      	movs	r1, #16
 8007e30:	4810      	ldr	r0, [pc, #64]	; (8007e74 <main+0xe0>)
 8007e32:	f002 fa09 	bl	800a248 <HAL_GPIO_WritePin>
	  log_info("RESULT:%d\r", cnt++);
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	61fa      	str	r2, [r7, #28]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	480e      	ldr	r0, [pc, #56]	; (8007e78 <main+0xe4>)
 8007e40:	f7ff fefe 	bl	8007c40 <log_info>
	  printf("RESULT:\t%d\r\n", cnt);
 8007e44:	69f9      	ldr	r1, [r7, #28]
 8007e46:	480d      	ldr	r0, [pc, #52]	; (8007e7c <main+0xe8>)
 8007e48:	f006 f944 	bl	800e0d4 <iprintf>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2110      	movs	r1, #16
 8007e50:	4808      	ldr	r0, [pc, #32]	; (8007e74 <main+0xe0>)
 8007e52:	f002 f9f9 	bl	800a248 <HAL_GPIO_WritePin>
    }

    canopen_app_process();
 8007e56:	f7ff f8a9 	bl	8006fac <canopen_app_process>
    if (flag == 1)
 8007e5a:	e7e0      	b.n	8007e1e <main+0x8a>
 8007e5c:	20000d1c 	.word	0x20000d1c
 8007e60:	20000434 	.word	0x20000434
 8007e64:	20000e60 	.word	0x20000e60
 8007e68:	20000cc0 	.word	0x20000cc0
 8007e6c:	08007f41 	.word	0x08007f41
 8007e70:	20001008 	.word	0x20001008
 8007e74:	48000400 	.word	0x48000400
 8007e78:	0800ea44 	.word	0x0800ea44
 8007e7c:	0800ea50 	.word	0x0800ea50

08007e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b096      	sub	sp, #88	; 0x58
 8007e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e86:	f107 0314 	add.w	r3, r7, #20
 8007e8a:	2244      	movs	r2, #68	; 0x44
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f006 fb6a 	bl	800e568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e94:	463b      	mov	r3, r7
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	605a      	str	r2, [r3, #4]
 8007e9c:	609a      	str	r2, [r3, #8]
 8007e9e:	60da      	str	r2, [r3, #12]
 8007ea0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007ea2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ea6:	f002 fa7f 	bl	800a3a8 <HAL_PWREx_ControlVoltageScaling>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007eb0:	f000 f9d8 	bl	8008264 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007eb4:	f002 fa5a 	bl	800a36c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007eb8:	4b20      	ldr	r3, [pc, #128]	; (8007f3c <SystemClock_Config+0xbc>)
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebe:	4a1f      	ldr	r2, [pc, #124]	; (8007f3c <SystemClock_Config+0xbc>)
 8007ec0:	f023 0318 	bic.w	r3, r3, #24
 8007ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8007ec8:	230d      	movs	r3, #13
 8007eca:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007ecc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007ed0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007eda:	2302      	movs	r3, #2
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8007ee6:	2314      	movs	r3, #20
 8007ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007eea:	2307      	movs	r3, #7
 8007eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ef6:	f107 0314 	add.w	r3, r7, #20
 8007efa:	4618      	mov	r0, r3
 8007efc:	f002 faaa 	bl	800a454 <HAL_RCC_OscConfig>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8007f06:	f000 f9ad 	bl	8008264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f0a:	230f      	movs	r3, #15
 8007f0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007f1e:	463b      	mov	r3, r7
 8007f20:	2104      	movs	r1, #4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f002 feaa 	bl	800ac7c <HAL_RCC_ClockConfig>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007f2e:	f000 f999 	bl	8008264 <Error_Handler>
  }
}
 8007f32:	bf00      	nop
 8007f34:	3758      	adds	r7, #88	; 0x58
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40021000 	.word	0x40021000

08007f40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007f44:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f46:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <MX_CAN1_Init+0x68>)
 8007f48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8007f4a:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f4c:	2228      	movs	r2, #40	; 0x28
 8007f4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007f50:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8007f5c:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f5e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8007f62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f6a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007f8a:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007f90:	4804      	ldr	r0, [pc, #16]	; (8007fa4 <MX_CAN1_Init+0x64>)
 8007f92:	f000 fda7 	bl	8008ae4 <HAL_CAN_Init>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007f9c:	f000 f962 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007fa0:	bf00      	nop
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20000cc0 	.word	0x20000cc0
 8007fa8:	40006400 	.word	0x40006400

08007fac <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <MX_IWDG_Init+0x34>)
 8007fb2:	4a0c      	ldr	r2, [pc, #48]	; (8007fe4 <MX_IWDG_Init+0x38>)
 8007fb4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8007fb6:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <MX_IWDG_Init+0x34>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <MX_IWDG_Init+0x34>)
 8007fbe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007fc2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <MX_IWDG_Init+0x34>)
 8007fc6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007fca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007fcc:	4804      	ldr	r0, [pc, #16]	; (8007fe0 <MX_IWDG_Init+0x34>)
 8007fce:	f002 f96d 	bl	800a2ac <HAL_IWDG_Init>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8007fd8:	f000 f944 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8007fdc:	bf00      	nop
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20000ce8 	.word	0x20000ce8
 8007fe4:	40003000 	.word	0x40003000

08007fe8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <MX_RTC_Init+0x48>)
 8007fee:	4a11      	ldr	r2, [pc, #68]	; (8008034 <MX_RTC_Init+0x4c>)
 8007ff0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <MX_RTC_Init+0x48>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <MX_RTC_Init+0x48>)
 8007ffa:	227f      	movs	r2, #127	; 0x7f
 8007ffc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <MX_RTC_Init+0x48>)
 8008000:	22ff      	movs	r2, #255	; 0xff
 8008002:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <MX_RTC_Init+0x48>)
 8008006:	2200      	movs	r2, #0
 8008008:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <MX_RTC_Init+0x48>)
 800800c:	2200      	movs	r2, #0
 800800e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <MX_RTC_Init+0x48>)
 8008012:	2200      	movs	r2, #0
 8008014:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <MX_RTC_Init+0x48>)
 8008018:	2200      	movs	r2, #0
 800801a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800801c:	4804      	ldr	r0, [pc, #16]	; (8008030 <MX_RTC_Init+0x48>)
 800801e:	f003 fb39 	bl	800b694 <HAL_RTC_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8008028:	f000 f91c 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800802c:	bf00      	nop
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000cf8 	.word	0x20000cf8
 8008034:	40002800 	.word	0x40002800

08008038 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800803e:	1d3b      	adds	r3, r7, #4
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008048:	4b14      	ldr	r3, [pc, #80]	; (800809c <MX_TIM7_Init+0x64>)
 800804a:	4a15      	ldr	r2, [pc, #84]	; (80080a0 <MX_TIM7_Init+0x68>)
 800804c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <MX_TIM7_Init+0x64>)
 8008050:	224f      	movs	r2, #79	; 0x4f
 8008052:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008054:	4b11      	ldr	r3, [pc, #68]	; (800809c <MX_TIM7_Init+0x64>)
 8008056:	2200      	movs	r2, #0
 8008058:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800805a:	4b10      	ldr	r3, [pc, #64]	; (800809c <MX_TIM7_Init+0x64>)
 800805c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008060:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008062:	4b0e      	ldr	r3, [pc, #56]	; (800809c <MX_TIM7_Init+0x64>)
 8008064:	2280      	movs	r2, #128	; 0x80
 8008066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008068:	480c      	ldr	r0, [pc, #48]	; (800809c <MX_TIM7_Init+0x64>)
 800806a:	f003 fc31 	bl	800b8d0 <HAL_TIM_Base_Init>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8008074:	f000 f8f6 	bl	8008264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008078:	2300      	movs	r3, #0
 800807a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	4619      	mov	r1, r3
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <MX_TIM7_Init+0x64>)
 8008086:	f003 ff1b 	bl	800bec0 <HAL_TIMEx_MasterConfigSynchronization>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8008090:	f000 f8e8 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000d1c 	.word	0x20000d1c
 80080a0:	40001400 	.word	0x40001400

080080a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80080a8:	4b14      	ldr	r3, [pc, #80]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080aa:	4a15      	ldr	r2, [pc, #84]	; (8008100 <MX_USART1_UART_Init+0x5c>)
 80080ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080be:	2200      	movs	r2, #0
 80080c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080c2:	4b0e      	ldr	r3, [pc, #56]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080ca:	220c      	movs	r2, #12
 80080cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80080da:	4b08      	ldr	r3, [pc, #32]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080dc:	2200      	movs	r2, #0
 80080de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80080e6:	4805      	ldr	r0, [pc, #20]	; (80080fc <MX_USART1_UART_Init+0x58>)
 80080e8:	f003 ff78 	bl	800bfdc <HAL_UART_Init>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80080f2:	f000 f8b7 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80080f6:	bf00      	nop
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000dd8 	.word	0x20000dd8
 8008100:	40013800 	.word	0x40013800

08008104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008108:	4b14      	ldr	r3, [pc, #80]	; (800815c <MX_USART2_UART_Init+0x58>)
 800810a:	4a15      	ldr	r2, [pc, #84]	; (8008160 <MX_USART2_UART_Init+0x5c>)
 800810c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008116:	4b11      	ldr	r3, [pc, #68]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008118:	2200      	movs	r2, #0
 800811a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800811c:	4b0f      	ldr	r3, [pc, #60]	; (800815c <MX_USART2_UART_Init+0x58>)
 800811e:	2200      	movs	r2, #0
 8008120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008122:	4b0e      	ldr	r3, [pc, #56]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008124:	2200      	movs	r2, #0
 8008126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <MX_USART2_UART_Init+0x58>)
 800812a:	220c      	movs	r2, #12
 800812c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008130:	2200      	movs	r2, #0
 8008132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008134:	4b09      	ldr	r3, [pc, #36]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008136:	2200      	movs	r2, #0
 8008138:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <MX_USART2_UART_Init+0x58>)
 800813c:	2200      	movs	r2, #0
 800813e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008142:	2200      	movs	r2, #0
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008146:	4805      	ldr	r0, [pc, #20]	; (800815c <MX_USART2_UART_Init+0x58>)
 8008148:	f003 ff48 	bl	800bfdc <HAL_UART_Init>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008152:	f000 f887 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008156:	bf00      	nop
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000e60 	.word	0x20000e60
 8008160:	40004400 	.word	0x40004400

08008164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800816a:	4b18      	ldr	r3, [pc, #96]	; (80081cc <MX_DMA_Init+0x68>)
 800816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816e:	4a17      	ldr	r2, [pc, #92]	; (80081cc <MX_DMA_Init+0x68>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	6493      	str	r3, [r2, #72]	; 0x48
 8008176:	4b15      	ldr	r3, [pc, #84]	; (80081cc <MX_DMA_Init+0x68>)
 8008178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8008182:	2200      	movs	r2, #0
 8008184:	2100      	movs	r1, #0
 8008186:	200e      	movs	r0, #14
 8008188:	f001 fc43 	bl	8009a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800818c:	200e      	movs	r0, #14
 800818e:	f001 fc5c 	bl	8009a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008192:	2200      	movs	r2, #0
 8008194:	2100      	movs	r1, #0
 8008196:	200f      	movs	r0, #15
 8008198:	f001 fc3b 	bl	8009a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800819c:	200f      	movs	r0, #15
 800819e:	f001 fc54 	bl	8009a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	2010      	movs	r0, #16
 80081a8:	f001 fc33 	bl	8009a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80081ac:	2010      	movs	r0, #16
 80081ae:	f001 fc4c 	bl	8009a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	2011      	movs	r0, #17
 80081b8:	f001 fc2b 	bl	8009a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80081bc:	2011      	movs	r0, #17
 80081be:	f001 fc44 	bl	8009a4a <HAL_NVIC_EnableIRQ>

}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40021000 	.word	0x40021000

080081d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	605a      	str	r2, [r3, #4]
 80081e0:	609a      	str	r2, [r3, #8]
 80081e2:	60da      	str	r2, [r3, #12]
 80081e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081e6:	4b1d      	ldr	r3, [pc, #116]	; (800825c <MX_GPIO_Init+0x8c>)
 80081e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ea:	4a1c      	ldr	r2, [pc, #112]	; (800825c <MX_GPIO_Init+0x8c>)
 80081ec:	f043 0304 	orr.w	r3, r3, #4
 80081f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <MX_GPIO_Init+0x8c>)
 80081f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	60bb      	str	r3, [r7, #8]
 80081fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081fe:	4b17      	ldr	r3, [pc, #92]	; (800825c <MX_GPIO_Init+0x8c>)
 8008200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008202:	4a16      	ldr	r2, [pc, #88]	; (800825c <MX_GPIO_Init+0x8c>)
 8008204:	f043 0301 	orr.w	r3, r3, #1
 8008208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <MX_GPIO_Init+0x8c>)
 800820c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <MX_GPIO_Init+0x8c>)
 8008218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821a:	4a10      	ldr	r2, [pc, #64]	; (800825c <MX_GPIO_Init+0x8c>)
 800821c:	f043 0302 	orr.w	r3, r3, #2
 8008220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008222:	4b0e      	ldr	r3, [pc, #56]	; (800825c <MX_GPIO_Init+0x8c>)
 8008224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	603b      	str	r3, [r7, #0]
 800822c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800822e:	2200      	movs	r2, #0
 8008230:	2138      	movs	r1, #56	; 0x38
 8008232:	480b      	ldr	r0, [pc, #44]	; (8008260 <MX_GPIO_Init+0x90>)
 8008234:	f002 f808 	bl	800a248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8008238:	2338      	movs	r3, #56	; 0x38
 800823a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800823c:	2301      	movs	r3, #1
 800823e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008244:	2300      	movs	r3, #0
 8008246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008248:	f107 030c 	add.w	r3, r7, #12
 800824c:	4619      	mov	r1, r3
 800824e:	4804      	ldr	r0, [pc, #16]	; (8008260 <MX_GPIO_Init+0x90>)
 8008250:	f001 fe90 	bl	8009f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008254:	bf00      	nop
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	40021000 	.word	0x40021000
 8008260:	48000400 	.word	0x48000400

08008264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008268:	b672      	cpsid	i
}
 800826a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800826c:	e7fe      	b.n	800826c <Error_Handler+0x8>
	...

08008270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <HAL_MspInit+0x44>)
 8008278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827a:	4a0e      	ldr	r2, [pc, #56]	; (80082b4 <HAL_MspInit+0x44>)
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	6613      	str	r3, [r2, #96]	; 0x60
 8008282:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <HAL_MspInit+0x44>)
 8008284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	607b      	str	r3, [r7, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <HAL_MspInit+0x44>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <HAL_MspInit+0x44>)
 8008294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008298:	6593      	str	r3, [r2, #88]	; 0x58
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <HAL_MspInit+0x44>)
 800829c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40021000 	.word	0x40021000

080082b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082c0:	f107 0314 	add.w	r3, r7, #20
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	605a      	str	r2, [r3, #4]
 80082ca:	609a      	str	r2, [r3, #8]
 80082cc:	60da      	str	r2, [r3, #12]
 80082ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a28      	ldr	r2, [pc, #160]	; (8008378 <HAL_CAN_MspInit+0xc0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d149      	bne.n	800836e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80082da:	4b28      	ldr	r3, [pc, #160]	; (800837c <HAL_CAN_MspInit+0xc4>)
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	4a27      	ldr	r2, [pc, #156]	; (800837c <HAL_CAN_MspInit+0xc4>)
 80082e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082e4:	6593      	str	r3, [r2, #88]	; 0x58
 80082e6:	4b25      	ldr	r3, [pc, #148]	; (800837c <HAL_CAN_MspInit+0xc4>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082f2:	4b22      	ldr	r3, [pc, #136]	; (800837c <HAL_CAN_MspInit+0xc4>)
 80082f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f6:	4a21      	ldr	r2, [pc, #132]	; (800837c <HAL_CAN_MspInit+0xc4>)
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082fe:	4b1f      	ldr	r3, [pc, #124]	; (800837c <HAL_CAN_MspInit+0xc4>)
 8008300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800830a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800830e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008310:	2302      	movs	r3, #2
 8008312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008318:	2303      	movs	r3, #3
 800831a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800831c:	2309      	movs	r3, #9
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	4619      	mov	r1, r3
 8008326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800832a:	f001 fe23 	bl	8009f74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800832e:	2200      	movs	r2, #0
 8008330:	2100      	movs	r1, #0
 8008332:	2013      	movs	r0, #19
 8008334:	f001 fb6d 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8008338:	2013      	movs	r0, #19
 800833a:	f001 fb86 	bl	8009a4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800833e:	2200      	movs	r2, #0
 8008340:	2100      	movs	r1, #0
 8008342:	2014      	movs	r0, #20
 8008344:	f001 fb65 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008348:	2014      	movs	r0, #20
 800834a:	f001 fb7e 	bl	8009a4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800834e:	2200      	movs	r2, #0
 8008350:	2100      	movs	r1, #0
 8008352:	2015      	movs	r0, #21
 8008354:	f001 fb5d 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008358:	2015      	movs	r0, #21
 800835a:	f001 fb76 	bl	8009a4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800835e:	2200      	movs	r2, #0
 8008360:	2100      	movs	r1, #0
 8008362:	2016      	movs	r0, #22
 8008364:	f001 fb55 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8008368:	2016      	movs	r0, #22
 800836a:	f001 fb6e 	bl	8009a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800836e:	bf00      	nop
 8008370:	3728      	adds	r7, #40	; 0x28
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40006400 	.word	0x40006400
 800837c:	40021000 	.word	0x40021000

08008380 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b098      	sub	sp, #96	; 0x60
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008388:	f107 030c 	add.w	r3, r7, #12
 800838c:	2254      	movs	r2, #84	; 0x54
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f006 f8e9 	bl	800e568 <memset>
  if(hrtc->Instance==RTC)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a0f      	ldr	r2, [pc, #60]	; (80083d8 <HAL_RTC_MspInit+0x58>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d117      	bne.n	80083d0 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80083a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80083a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083ac:	f107 030c 	add.w	r3, r7, #12
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 fe87 	bl	800b0c4 <HAL_RCCEx_PeriphCLKConfig>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80083bc:	f7ff ff52 	bl	8008264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <HAL_RTC_MspInit+0x5c>)
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c6:	4a05      	ldr	r2, [pc, #20]	; (80083dc <HAL_RTC_MspInit+0x5c>)
 80083c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80083d0:	bf00      	nop
 80083d2:	3760      	adds	r7, #96	; 0x60
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40002800 	.word	0x40002800
 80083dc:	40021000 	.word	0x40021000

080083e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a0d      	ldr	r2, [pc, #52]	; (8008424 <HAL_TIM_Base_MspInit+0x44>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d113      	bne.n	800841a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80083f2:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <HAL_TIM_Base_MspInit+0x48>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	4a0c      	ldr	r2, [pc, #48]	; (8008428 <HAL_TIM_Base_MspInit+0x48>)
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	6593      	str	r3, [r2, #88]	; 0x58
 80083fe:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <HAL_TIM_Base_MspInit+0x48>)
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	2037      	movs	r0, #55	; 0x37
 8008410:	f001 faff 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008414:	2037      	movs	r0, #55	; 0x37
 8008416:	f001 fb18 	bl	8009a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40001400 	.word	0x40001400
 8008428:	40021000 	.word	0x40021000

0800842c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b0a0      	sub	sp, #128	; 0x80
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	609a      	str	r2, [r3, #8]
 8008440:	60da      	str	r2, [r3, #12]
 8008442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	2254      	movs	r2, #84	; 0x54
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f006 f88b 	bl	800e568 <memset>
  if(huart->Instance==USART1)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4aa2      	ldr	r2, [pc, #648]	; (80086e0 <HAL_UART_MspInit+0x2b4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	f040 8093 	bne.w	8008584 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800845e:	2301      	movs	r3, #1
 8008460:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008462:	2300      	movs	r3, #0
 8008464:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008466:	f107 0318 	add.w	r3, r7, #24
 800846a:	4618      	mov	r0, r3
 800846c:	f002 fe2a 	bl	800b0c4 <HAL_RCCEx_PeriphCLKConfig>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008476:	f7ff fef5 	bl	8008264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800847a:	4b9a      	ldr	r3, [pc, #616]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 800847c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800847e:	4a99      	ldr	r2, [pc, #612]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 8008480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008484:	6613      	str	r3, [r2, #96]	; 0x60
 8008486:	4b97      	ldr	r3, [pc, #604]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 8008488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008492:	4b94      	ldr	r3, [pc, #592]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 8008494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008496:	4a93      	ldr	r2, [pc, #588]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800849e:	4b91      	ldr	r3, [pc, #580]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80084a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80084aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80084ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b0:	2302      	movs	r3, #2
 80084b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084b8:	2303      	movs	r3, #3
 80084ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80084bc:	2307      	movs	r3, #7
 80084be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80084c4:	4619      	mov	r1, r3
 80084c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084ca:	f001 fd53 	bl	8009f74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80084ce:	4b86      	ldr	r3, [pc, #536]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084d0:	4a86      	ldr	r2, [pc, #536]	; (80086ec <HAL_UART_MspInit+0x2c0>)
 80084d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80084d4:	4b84      	ldr	r3, [pc, #528]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084d6:	2202      	movs	r2, #2
 80084d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084da:	4b83      	ldr	r3, [pc, #524]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084dc:	2200      	movs	r2, #0
 80084de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084e0:	4b81      	ldr	r3, [pc, #516]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80084e6:	4b80      	ldr	r3, [pc, #512]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084e8:	2280      	movs	r2, #128	; 0x80
 80084ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80084ec:	4b7e      	ldr	r3, [pc, #504]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80084f2:	4b7d      	ldr	r3, [pc, #500]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80084f8:	4b7b      	ldr	r3, [pc, #492]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80084fe:	4b7a      	ldr	r3, [pc, #488]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 8008500:	2200      	movs	r2, #0
 8008502:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008504:	4878      	ldr	r0, [pc, #480]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 8008506:	f001 fabf 	bl	8009a88 <HAL_DMA_Init>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8008510:	f7ff fea8 	bl	8008264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a74      	ldr	r2, [pc, #464]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 8008518:	675a      	str	r2, [r3, #116]	; 0x74
 800851a:	4a73      	ldr	r2, [pc, #460]	; (80086e8 <HAL_UART_MspInit+0x2bc>)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008520:	4b73      	ldr	r3, [pc, #460]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008522:	4a74      	ldr	r2, [pc, #464]	; (80086f4 <HAL_UART_MspInit+0x2c8>)
 8008524:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8008526:	4b72      	ldr	r3, [pc, #456]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008528:	2202      	movs	r2, #2
 800852a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800852c:	4b70      	ldr	r3, [pc, #448]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 800852e:	2210      	movs	r2, #16
 8008530:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008532:	4b6f      	ldr	r3, [pc, #444]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008534:	2200      	movs	r2, #0
 8008536:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008538:	4b6d      	ldr	r3, [pc, #436]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 800853a:	2280      	movs	r2, #128	; 0x80
 800853c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800853e:	4b6c      	ldr	r3, [pc, #432]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008540:	2200      	movs	r2, #0
 8008542:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008544:	4b6a      	ldr	r3, [pc, #424]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008546:	2200      	movs	r2, #0
 8008548:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800854a:	4b69      	ldr	r3, [pc, #420]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 800854c:	2200      	movs	r2, #0
 800854e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008550:	4b67      	ldr	r3, [pc, #412]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008552:	2200      	movs	r2, #0
 8008554:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008556:	4866      	ldr	r0, [pc, #408]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 8008558:	f001 fa96 	bl	8009a88 <HAL_DMA_Init>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8008562:	f7ff fe7f 	bl	8008264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a61      	ldr	r2, [pc, #388]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 800856a:	671a      	str	r2, [r3, #112]	; 0x70
 800856c:	4a60      	ldr	r2, [pc, #384]	; (80086f0 <HAL_UART_MspInit+0x2c4>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008572:	2200      	movs	r2, #0
 8008574:	2100      	movs	r1, #0
 8008576:	2025      	movs	r0, #37	; 0x25
 8008578:	f001 fa4b 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800857c:	2025      	movs	r0, #37	; 0x25
 800857e:	f001 fa64 	bl	8009a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008582:	e0a8      	b.n	80086d6 <HAL_UART_MspInit+0x2aa>
  else if(huart->Instance==USART2)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a5b      	ldr	r2, [pc, #364]	; (80086f8 <HAL_UART_MspInit+0x2cc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f040 80a3 	bne.w	80086d6 <HAL_UART_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008590:	2302      	movs	r3, #2
 8008592:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008594:	2300      	movs	r3, #0
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008598:	f107 0318 	add.w	r3, r7, #24
 800859c:	4618      	mov	r0, r3
 800859e:	f002 fd91 	bl	800b0c4 <HAL_RCCEx_PeriphCLKConfig>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <HAL_UART_MspInit+0x180>
      Error_Handler();
 80085a8:	f7ff fe5c 	bl	8008264 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80085ac:	4b4d      	ldr	r3, [pc, #308]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80085ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b0:	4a4c      	ldr	r2, [pc, #304]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80085b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085b6:	6593      	str	r3, [r2, #88]	; 0x58
 80085b8:	4b4a      	ldr	r3, [pc, #296]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80085ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085c4:	4b47      	ldr	r3, [pc, #284]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80085c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c8:	4a46      	ldr	r2, [pc, #280]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085d0:	4b44      	ldr	r3, [pc, #272]	; (80086e4 <HAL_UART_MspInit+0x2b8>)
 80085d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	60bb      	str	r3, [r7, #8]
 80085da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80085dc:	2304      	movs	r3, #4
 80085de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e0:	2302      	movs	r3, #2
 80085e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085e8:	2303      	movs	r3, #3
 80085ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80085ec:	2307      	movs	r3, #7
 80085ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80085f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80085f4:	4619      	mov	r1, r3
 80085f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085fa:	f001 fcbb 	bl	8009f74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80085fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008602:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008604:	2302      	movs	r3, #2
 8008606:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008608:	2300      	movs	r3, #0
 800860a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800860c:	2303      	movs	r3, #3
 800860e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8008610:	2303      	movs	r3, #3
 8008612:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008614:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008618:	4619      	mov	r1, r3
 800861a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800861e:	f001 fca9 	bl	8009f74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8008622:	4b36      	ldr	r3, [pc, #216]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008624:	4a36      	ldr	r2, [pc, #216]	; (8008700 <HAL_UART_MspInit+0x2d4>)
 8008626:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8008628:	4b34      	ldr	r3, [pc, #208]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 800862a:	2202      	movs	r2, #2
 800862c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800862e:	4b33      	ldr	r3, [pc, #204]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008630:	2200      	movs	r2, #0
 8008632:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008634:	4b31      	ldr	r3, [pc, #196]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008636:	2200      	movs	r2, #0
 8008638:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800863a:	4b30      	ldr	r3, [pc, #192]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 800863c:	2280      	movs	r2, #128	; 0x80
 800863e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008640:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008642:	2200      	movs	r2, #0
 8008644:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008646:	4b2d      	ldr	r3, [pc, #180]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008648:	2200      	movs	r2, #0
 800864a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 800864e:	2200      	movs	r2, #0
 8008650:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008652:	4b2a      	ldr	r3, [pc, #168]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008654:	2200      	movs	r2, #0
 8008656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008658:	4828      	ldr	r0, [pc, #160]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 800865a:	f001 fa15 	bl	8009a88 <HAL_DMA_Init>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8008664:	f7ff fdfe 	bl	8008264 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a24      	ldr	r2, [pc, #144]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 800866c:	675a      	str	r2, [r3, #116]	; 0x74
 800866e:	4a23      	ldr	r2, [pc, #140]	; (80086fc <HAL_UART_MspInit+0x2d0>)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8008674:	4b23      	ldr	r3, [pc, #140]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 8008676:	4a24      	ldr	r2, [pc, #144]	; (8008708 <HAL_UART_MspInit+0x2dc>)
 8008678:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800867a:	4b22      	ldr	r3, [pc, #136]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 800867c:	2202      	movs	r2, #2
 800867e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008680:	4b20      	ldr	r3, [pc, #128]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 8008682:	2210      	movs	r2, #16
 8008684:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008686:	4b1f      	ldr	r3, [pc, #124]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 8008688:	2200      	movs	r2, #0
 800868a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800868c:	4b1d      	ldr	r3, [pc, #116]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 800868e:	2280      	movs	r2, #128	; 0x80
 8008690:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008692:	4b1c      	ldr	r3, [pc, #112]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 8008694:	2200      	movs	r2, #0
 8008696:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008698:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 800869a:	2200      	movs	r2, #0
 800869c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800869e:	4b19      	ldr	r3, [pc, #100]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80086a4:	4b17      	ldr	r3, [pc, #92]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80086aa:	4816      	ldr	r0, [pc, #88]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 80086ac:	f001 f9ec 	bl	8009a88 <HAL_DMA_Init>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <HAL_UART_MspInit+0x28e>
      Error_Handler();
 80086b6:	f7ff fdd5 	bl	8008264 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a11      	ldr	r2, [pc, #68]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 80086be:	671a      	str	r2, [r3, #112]	; 0x70
 80086c0:	4a10      	ldr	r2, [pc, #64]	; (8008704 <HAL_UART_MspInit+0x2d8>)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80086c6:	2200      	movs	r2, #0
 80086c8:	2100      	movs	r1, #0
 80086ca:	2026      	movs	r0, #38	; 0x26
 80086cc:	f001 f9a1 	bl	8009a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80086d0:	2026      	movs	r0, #38	; 0x26
 80086d2:	f001 f9ba 	bl	8009a4a <HAL_NVIC_EnableIRQ>
}
 80086d6:	bf00      	nop
 80086d8:	3780      	adds	r7, #128	; 0x80
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40013800 	.word	0x40013800
 80086e4:	40021000 	.word	0x40021000
 80086e8:	20000ee8 	.word	0x20000ee8
 80086ec:	40020058 	.word	0x40020058
 80086f0:	20000f30 	.word	0x20000f30
 80086f4:	40020044 	.word	0x40020044
 80086f8:	40004400 	.word	0x40004400
 80086fc:	20000f78 	.word	0x20000f78
 8008700:	4002006c 	.word	0x4002006c
 8008704:	20000fc0 	.word	0x20000fc0
 8008708:	40020080 	.word	0x40020080

0800870c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008710:	e7fe      	b.n	8008710 <NMI_Handler+0x4>

08008712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008712:	b480      	push	{r7}
 8008714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008716:	e7fe      	b.n	8008716 <HardFault_Handler+0x4>

08008718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800871c:	e7fe      	b.n	800871c <MemManage_Handler+0x4>

0800871e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008722:	e7fe      	b.n	8008722 <BusFault_Handler+0x4>

08008724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008728:	e7fe      	b.n	8008728 <UsageFault_Handler+0x4>

0800872a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800872a:	b480      	push	{r7}
 800872c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800872e:	bf00      	nop
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800873c:	bf00      	nop
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008746:	b480      	push	{r7}
 8008748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800874a:	bf00      	nop
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008758:	f000 f9a4 	bl	8008aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800875c:	bf00      	nop
 800875e:	bd80      	pop	{r7, pc}

08008760 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008764:	4802      	ldr	r0, [pc, #8]	; (8008770 <DMA1_Channel4_IRQHandler+0x10>)
 8008766:	f001 fb26 	bl	8009db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800876a:	bf00      	nop
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000f30 	.word	0x20000f30

08008774 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008778:	4802      	ldr	r0, [pc, #8]	; (8008784 <DMA1_Channel5_IRQHandler+0x10>)
 800877a:	f001 fb1c 	bl	8009db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800877e:	bf00      	nop
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20000ee8 	.word	0x20000ee8

08008788 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800878c:	4802      	ldr	r0, [pc, #8]	; (8008798 <DMA1_Channel6_IRQHandler+0x10>)
 800878e:	f001 fb12 	bl	8009db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008792:	bf00      	nop
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000f78 	.word	0x20000f78

0800879c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80087a0:	4802      	ldr	r0, [pc, #8]	; (80087ac <DMA1_Channel7_IRQHandler+0x10>)
 80087a2:	f001 fb08 	bl	8009db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80087a6:	bf00      	nop
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000fc0 	.word	0x20000fc0

080087b0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80087b4:	4802      	ldr	r0, [pc, #8]	; (80087c0 <CAN1_TX_IRQHandler+0x10>)
 80087b6:	f000 fe34 	bl	8009422 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80087ba:	bf00      	nop
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000cc0 	.word	0x20000cc0

080087c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80087c8:	4802      	ldr	r0, [pc, #8]	; (80087d4 <CAN1_RX0_IRQHandler+0x10>)
 80087ca:	f000 fe2a 	bl	8009422 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000cc0 	.word	0x20000cc0

080087d8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80087dc:	4802      	ldr	r0, [pc, #8]	; (80087e8 <CAN1_RX1_IRQHandler+0x10>)
 80087de:	f000 fe20 	bl	8009422 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000cc0 	.word	0x20000cc0

080087ec <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80087f0:	4802      	ldr	r0, [pc, #8]	; (80087fc <CAN1_SCE_IRQHandler+0x10>)
 80087f2:	f000 fe16 	bl	8009422 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80087f6:	bf00      	nop
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000cc0 	.word	0x20000cc0

08008800 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008804:	4802      	ldr	r0, [pc, #8]	; (8008810 <USART1_IRQHandler+0x10>)
 8008806:	f003 fcff 	bl	800c208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800880a:	bf00      	nop
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000dd8 	.word	0x20000dd8

08008814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008818:	4802      	ldr	r0, [pc, #8]	; (8008824 <USART2_IRQHandler+0x10>)
 800881a:	f003 fcf5 	bl	800c208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000e60 	.word	0x20000e60

08008828 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800882c:	4802      	ldr	r0, [pc, #8]	; (8008838 <TIM7_IRQHandler+0x10>)
 800882e:	f003 f907 	bl	800ba40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008832:	bf00      	nop
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000d1c 	.word	0x20000d1c

0800883c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008848:	2300      	movs	r3, #0
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	e00a      	b.n	8008864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800884e:	f7ff fa85 	bl	8007d5c <__io_getchar>
 8008852:	4601      	mov	r1, r0
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	60ba      	str	r2, [r7, #8]
 800885a:	b2ca      	uxtb	r2, r1
 800885c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	3301      	adds	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	429a      	cmp	r2, r3
 800886a:	dbf0      	blt.n	800884e <_read+0x12>
  }

  return len;
 800886c:	687b      	ldr	r3, [r7, #4]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b086      	sub	sp, #24
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	e009      	b.n	800889c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	60ba      	str	r2, [r7, #8]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff fa55 	bl	8007d40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	3301      	adds	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	dbf1      	blt.n	8008888 <_write+0x12>
  }
  return len;
 80088a4:	687b      	ldr	r3, [r7, #4]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <_close>:

int _close(int file)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088d6:	605a      	str	r2, [r3, #4]
  return 0;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <_isatty>:

int _isatty(int file)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80088ee:	2301      	movs	r3, #1
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008920:	4a14      	ldr	r2, [pc, #80]	; (8008974 <_sbrk+0x5c>)
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <_sbrk+0x60>)
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800892c:	4b13      	ldr	r3, [pc, #76]	; (800897c <_sbrk+0x64>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d102      	bne.n	800893a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008934:	4b11      	ldr	r3, [pc, #68]	; (800897c <_sbrk+0x64>)
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <_sbrk+0x68>)
 8008938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <_sbrk+0x64>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	429a      	cmp	r2, r3
 8008946:	d207      	bcs.n	8008958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008948:	f005 fe6c 	bl	800e624 <__errno>
 800894c:	4603      	mov	r3, r0
 800894e:	220c      	movs	r2, #12
 8008950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	e009      	b.n	800896c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008958:	4b08      	ldr	r3, [pc, #32]	; (800897c <_sbrk+0x64>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <_sbrk+0x64>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4413      	add	r3, r2
 8008966:	4a05      	ldr	r2, [pc, #20]	; (800897c <_sbrk+0x64>)
 8008968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20010000 	.word	0x20010000
 8008978:	00000400 	.word	0x00000400
 800897c:	20001010 	.word	0x20001010
 8008980:	20001168 	.word	0x20001168

08008984 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008988:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <SystemInit+0x20>)
 800898a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898e:	4a05      	ldr	r2, [pc, #20]	; (80089a4 <SystemInit+0x20>)
 8008990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008998:	bf00      	nop
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	e000ed00 	.word	0xe000ed00

080089a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80089a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80089e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80089ac:	f7ff ffea 	bl	8008984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80089b0:	480c      	ldr	r0, [pc, #48]	; (80089e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80089b2:	490d      	ldr	r1, [pc, #52]	; (80089e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80089b4:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <LoopForever+0xe>)
  movs r3, #0
 80089b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089b8:	e002      	b.n	80089c0 <LoopCopyDataInit>

080089ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089be:	3304      	adds	r3, #4

080089c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089c4:	d3f9      	bcc.n	80089ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089c6:	4a0a      	ldr	r2, [pc, #40]	; (80089f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80089c8:	4c0a      	ldr	r4, [pc, #40]	; (80089f4 <LoopForever+0x16>)
  movs r3, #0
 80089ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089cc:	e001      	b.n	80089d2 <LoopFillZerobss>

080089ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089d0:	3204      	adds	r2, #4

080089d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089d4:	d3fb      	bcc.n	80089ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80089d6:	f005 fe2b 	bl	800e630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80089da:	f7ff f9db 	bl	8007d94 <main>

080089de <LoopForever>:

LoopForever:
    b LoopForever
 80089de:	e7fe      	b.n	80089de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80089e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80089e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089e8:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 80089ec:	0800f200 	.word	0x0800f200
  ldr r2, =_sbss
 80089f0:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 80089f4:	20001164 	.word	0x20001164

080089f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80089f8:	e7fe      	b.n	80089f8 <ADC1_IRQHandler>

080089fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a04:	2003      	movs	r0, #3
 8008a06:	f000 fff9 	bl	80099fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f000 f80e 	bl	8008a2c <HAL_InitTick>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	71fb      	strb	r3, [r7, #7]
 8008a1a:	e001      	b.n	8008a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008a1c:	f7ff fc28 	bl	8008270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008a20:	79fb      	ldrb	r3, [r7, #7]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008a38:	4b17      	ldr	r3, [pc, #92]	; (8008a98 <HAL_InitTick+0x6c>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d023      	beq.n	8008a88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008a40:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <HAL_InitTick+0x70>)
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <HAL_InitTick+0x6c>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 f809 	bl	8009a6e <HAL_SYSTICK_Config>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10f      	bne.n	8008a82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b0f      	cmp	r3, #15
 8008a66:	d809      	bhi.n	8008a7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a68:	2200      	movs	r2, #0
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	f000 ffcf 	bl	8009a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008a74:	4a0a      	ldr	r2, [pc, #40]	; (8008aa0 <HAL_InitTick+0x74>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e007      	b.n	8008a8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e004      	b.n	8008a8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	e001      	b.n	8008a8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200003d8 	.word	0x200003d8
 8008a9c:	200003d0 	.word	0x200003d0
 8008aa0:	200003d4 	.word	0x200003d4

08008aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008aa8:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <HAL_IncTick+0x20>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <HAL_IncTick+0x24>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <HAL_IncTick+0x24>)
 8008ab6:	6013      	str	r3, [r2, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	200003d8 	.word	0x200003d8
 8008ac8:	20001014 	.word	0x20001014

08008acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
  return uwTick;
 8008ad0:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <HAL_GetTick+0x14>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20001014 	.word	0x20001014

08008ae4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e0ed      	b.n	8008cd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d102      	bne.n	8008b08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff fbd8 	bl	80082b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b18:	f7ff ffd8 	bl	8008acc <HAL_GetTick>
 8008b1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b1e:	e012      	b.n	8008b46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b20:	f7ff ffd4 	bl	8008acc <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b0a      	cmp	r3, #10
 8008b2c:	d90b      	bls.n	8008b46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e0c5      	b.n	8008cd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0e5      	beq.n	8008b20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0202 	bic.w	r2, r2, #2
 8008b62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b64:	f7ff ffb2 	bl	8008acc <HAL_GetTick>
 8008b68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b6a:	e012      	b.n	8008b92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b6c:	f7ff ffae 	bl	8008acc <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b0a      	cmp	r3, #10
 8008b78:	d90b      	bls.n	8008b92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2205      	movs	r2, #5
 8008b8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e09f      	b.n	8008cd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e5      	bne.n	8008b6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	7e1b      	ldrb	r3, [r3, #24]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d108      	bne.n	8008bba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	e007      	b.n	8008bca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7e5b      	ldrb	r3, [r3, #25]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d108      	bne.n	8008be4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	e007      	b.n	8008bf4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	7e9b      	ldrb	r3, [r3, #26]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d108      	bne.n	8008c0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0220 	orr.w	r2, r2, #32
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	e007      	b.n	8008c1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0220 	bic.w	r2, r2, #32
 8008c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7edb      	ldrb	r3, [r3, #27]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d108      	bne.n	8008c38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 0210 	bic.w	r2, r2, #16
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	e007      	b.n	8008c48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0210 	orr.w	r2, r2, #16
 8008c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	7f1b      	ldrb	r3, [r3, #28]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d108      	bne.n	8008c62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0208 	orr.w	r2, r2, #8
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e007      	b.n	8008c72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0208 	bic.w	r2, r2, #8
 8008c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7f5b      	ldrb	r3, [r3, #29]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d108      	bne.n	8008c8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0204 	orr.w	r2, r2, #4
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e007      	b.n	8008c9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0204 	bic.w	r2, r2, #4
 8008c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	ea42 0103 	orr.w	r1, r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b087      	sub	sp, #28
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cf0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008cf2:	7cfb      	ldrb	r3, [r7, #19]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d003      	beq.n	8008d00 <HAL_CAN_ConfigFilter+0x26>
 8008cf8:	7cfb      	ldrb	r3, [r7, #19]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	f040 80aa 	bne.w	8008e54 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d06:	f043 0201 	orr.w	r2, r3, #1
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	2201      	movs	r2, #1
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	401a      	ands	r2, r3
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d123      	bne.n	8008d82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	43db      	mvns	r3, r3
 8008d44:	401a      	ands	r2, r3
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008d5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	3248      	adds	r2, #72	; 0x48
 8008d62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008d78:	6979      	ldr	r1, [r7, #20]
 8008d7a:	3348      	adds	r3, #72	; 0x48
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	440b      	add	r3, r1
 8008d80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d122      	bne.n	8008dd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008daa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	3248      	adds	r2, #72	; 0x48
 8008db0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008dc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008dc6:	6979      	ldr	r1, [r7, #20]
 8008dc8:	3348      	adds	r3, #72	; 0x48
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	440b      	add	r3, r1
 8008dce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	401a      	ands	r2, r3
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008dea:	e007      	b.n	8008dfc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	431a      	orrs	r2, r3
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d109      	bne.n	8008e18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	401a      	ands	r2, r3
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008e16:	e007      	b.n	8008e28 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d107      	bne.n	8008e40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e46:	f023 0201 	bic.w	r2, r3, #1
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	e006      	b.n	8008e62 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
  }
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d12e      	bne.n	8008ee0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e9a:	f7ff fe17 	bl	8008acc <HAL_GetTick>
 8008e9e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008ea0:	e012      	b.n	8008ec8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008ea2:	f7ff fe13 	bl	8008acc <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b0a      	cmp	r3, #10
 8008eae:	d90b      	bls.n	8008ec8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2205      	movs	r2, #5
 8008ec0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e012      	b.n	8008eee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	e006      	b.n	8008eee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
  }
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d133      	bne.n	8008f72 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0201 	orr.w	r2, r2, #1
 8008f18:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f1a:	f7ff fdd7 	bl	8008acc <HAL_GetTick>
 8008f1e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008f20:	e012      	b.n	8008f48 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f22:	f7ff fdd3 	bl	8008acc <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b0a      	cmp	r3, #10
 8008f2e:	d90b      	bls.n	8008f48 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2205      	movs	r2, #5
 8008f40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e01b      	b.n	8008f80 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0e5      	beq.n	8008f22 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0202 	bic.w	r2, r2, #2
 8008f64:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e006      	b.n	8008f80 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
  }
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008fa6:	7ffb      	ldrb	r3, [r7, #31]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d003      	beq.n	8008fb4 <HAL_CAN_AddTxMessage+0x2c>
 8008fac:	7ffb      	ldrb	r3, [r7, #31]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	f040 80ad 	bne.w	800910e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d105      	bne.n	8008fd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 8095 	beq.w	80090fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	0e1b      	lsrs	r3, r3, #24
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008fde:	2201      	movs	r2, #1
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	409a      	lsls	r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10d      	bne.n	800900c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008ffa:	68f9      	ldr	r1, [r7, #12]
 8008ffc:	6809      	ldr	r1, [r1, #0]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	3318      	adds	r3, #24
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	440b      	add	r3, r1
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e00f      	b.n	800902c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009016:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800901c:	68f9      	ldr	r1, [r7, #12]
 800901e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009020:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	3318      	adds	r3, #24
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	440b      	add	r3, r1
 800902a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	3318      	adds	r3, #24
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	440b      	add	r3, r1
 800903c:	3304      	adds	r3, #4
 800903e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	7d1b      	ldrb	r3, [r3, #20]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d111      	bne.n	800906c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	3318      	adds	r3, #24
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	4413      	add	r3, r2
 8009054:	3304      	adds	r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	6811      	ldr	r1, [r2, #0]
 800905c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	3318      	adds	r3, #24
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	440b      	add	r3, r1
 8009068:	3304      	adds	r3, #4
 800906a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3307      	adds	r3, #7
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	061a      	lsls	r2, r3, #24
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3306      	adds	r3, #6
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	041b      	lsls	r3, r3, #16
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3305      	adds	r3, #5
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	021b      	lsls	r3, r3, #8
 8009086:	4313      	orrs	r3, r2
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	3204      	adds	r2, #4
 800908c:	7812      	ldrb	r2, [r2, #0]
 800908e:	4610      	mov	r0, r2
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	6811      	ldr	r1, [r2, #0]
 8009094:	ea43 0200 	orr.w	r2, r3, r0
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	440b      	add	r3, r1
 800909e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80090a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3303      	adds	r3, #3
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	061a      	lsls	r2, r3, #24
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3302      	adds	r3, #2
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3301      	adds	r3, #1
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	4313      	orrs	r3, r2
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	4610      	mov	r0, r2
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	6811      	ldr	r1, [r2, #0]
 80090ca:	ea43 0200 	orr.w	r2, r3, r0
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	440b      	add	r3, r1
 80090d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80090d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	3318      	adds	r3, #24
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	4413      	add	r3, r2
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	6811      	ldr	r1, [r2, #0]
 80090ec:	f043 0201 	orr.w	r2, r3, #1
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	3318      	adds	r3, #24
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	440b      	add	r3, r1
 80090f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e00e      	b.n	800911c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e006      	b.n	800911c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
  }
}
 800911c:	4618      	mov	r0, r3
 800911e:	3724      	adds	r7, #36	; 0x24
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800913a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d002      	beq.n	8009148 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d11d      	bne.n	8009184 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3301      	adds	r3, #1
 800915a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3301      	adds	r3, #1
 800916e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3301      	adds	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d003      	beq.n	80091b6 <HAL_CAN_GetRxMessage+0x24>
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	f040 8103 	bne.w	80093bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10e      	bne.n	80091da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d116      	bne.n	80091f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e0f7      	b.n	80093ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d107      	bne.n	80091f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e0e8      	b.n	80093ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	331b      	adds	r3, #27
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	4413      	add	r3, r2
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0204 	and.w	r2, r3, #4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10c      	bne.n	8009230 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	331b      	adds	r3, #27
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	4413      	add	r3, r2
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	0d5b      	lsrs	r3, r3, #21
 8009226:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e00b      	b.n	8009248 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	331b      	adds	r3, #27
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	4413      	add	r3, r2
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	08db      	lsrs	r3, r3, #3
 8009240:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	331b      	adds	r3, #27
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	4413      	add	r3, r2
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0202 	and.w	r2, r3, #2
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	331b      	adds	r3, #27
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	4413      	add	r3, r2
 800926a:	3304      	adds	r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0308 	and.w	r3, r3, #8
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2208      	movs	r2, #8
 800927a:	611a      	str	r2, [r3, #16]
 800927c:	e00b      	b.n	8009296 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	331b      	adds	r3, #27
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	4413      	add	r3, r2
 800928a:	3304      	adds	r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	331b      	adds	r3, #27
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	4413      	add	r3, r2
 80092a2:	3304      	adds	r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	331b      	adds	r3, #27
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	4413      	add	r3, r2
 80092ba:	3304      	adds	r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	0c1b      	lsrs	r3, r3, #16
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	011b      	lsls	r3, r3, #4
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	0a1a      	lsrs	r2, r3, #8
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	4413      	add	r3, r2
 8009300:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	0c1a      	lsrs	r2, r3, #16
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	3302      	adds	r3, #2
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	4413      	add	r3, r2
 800931a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	0e1a      	lsrs	r2, r3, #24
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	3303      	adds	r3, #3
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	4413      	add	r3, r2
 8009334:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	3304      	adds	r3, #4
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	4413      	add	r3, r2
 800934c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	0a1a      	lsrs	r2, r3, #8
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	3305      	adds	r3, #5
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	4413      	add	r3, r2
 8009366:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	0c1a      	lsrs	r2, r3, #16
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	3306      	adds	r3, #6
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	4413      	add	r3, r2
 8009380:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	0e1a      	lsrs	r2, r3, #24
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	3307      	adds	r3, #7
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d108      	bne.n	80093a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0220 	orr.w	r2, r2, #32
 80093a4:	60da      	str	r2, [r3, #12]
 80093a6:	e007      	b.n	80093b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0220 	orr.w	r2, r2, #32
 80093b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e006      	b.n	80093ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
  }
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d002      	beq.n	80093f4 <HAL_CAN_ActivateNotification+0x1e>
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d109      	bne.n	8009408 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6959      	ldr	r1, [r3, #20]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	e006      	b.n	8009416 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
  }
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b08a      	sub	sp, #40	; 0x28
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d07c      	beq.n	8009562 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d023      	beq.n	80094ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2201      	movs	r2, #1
 8009478:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d003      	beq.n	800948c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fe f9d1 	bl	800782c <HAL_CAN_TxMailbox0CompleteCallback>
 800948a:	e016      	b.n	80094ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d004      	beq.n	80094a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
 800949e:	e00c      	b.n	80094ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
 80094b2:	e002      	b.n	80094ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f96b 	bl	8009790 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d024      	beq.n	800950e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7fe f9b7 	bl	800784c <HAL_CAN_TxMailbox1CompleteCallback>
 80094de:	e016      	b.n	800950e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80094f0:	627b      	str	r3, [r7, #36]	; 0x24
 80094f2:	e00c      	b.n	800950e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
 8009506:	e002      	b.n	800950e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f94b 	bl	80097a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d024      	beq.n	8009562 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009520:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7fe f99d 	bl	800786c <HAL_CAN_TxMailbox2CompleteCallback>
 8009532:	e016      	b.n	8009562 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
 8009546:	e00c      	b.n	8009562 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
 800955a:	e002      	b.n	8009562 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f92b 	bl	80097b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	f003 0308 	and.w	r3, r3, #8
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00c      	beq.n	8009586 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b00      	cmp	r3, #0
 8009574:	d007      	beq.n	8009586 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800957c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2210      	movs	r2, #16
 8009584:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2208      	movs	r2, #8
 80095a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f912 	bl	80097cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7fe f8c7 	bl	8007754 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f003 0310 	and.w	r3, r3, #16
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2210      	movs	r2, #16
 80095e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d006      	beq.n	800960c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2208      	movs	r2, #8
 8009604:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8ea 	bl	80097e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	f003 0303 	and.w	r3, r3, #3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7fe f8a2 	bl	800776e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	f003 0310 	and.w	r3, r3, #16
 800963a:	2b00      	cmp	r3, #0
 800963c:	d006      	beq.n	800964c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2210      	movs	r2, #16
 8009644:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f8d4 	bl	80097f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	f003 0308 	and.w	r3, r3, #8
 800965c:	2b00      	cmp	r3, #0
 800965e:	d006      	beq.n	800966e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2208      	movs	r2, #8
 8009666:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f8cd 	bl	8009808 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d07b      	beq.n	8009770 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d072      	beq.n	8009768 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d008      	beq.n	800969e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	f043 0301 	orr.w	r3, r3, #1
 800969c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d008      	beq.n	80096ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	f043 0302 	orr.w	r3, r3, #2
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	f043 0304 	orr.w	r3, r3, #4
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d043      	beq.n	8009768 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d03e      	beq.n	8009768 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d02b      	beq.n	800974c <HAL_CAN_IRQHandler+0x32a>
 80096f4:	2b60      	cmp	r3, #96	; 0x60
 80096f6:	d82e      	bhi.n	8009756 <HAL_CAN_IRQHandler+0x334>
 80096f8:	2b50      	cmp	r3, #80	; 0x50
 80096fa:	d022      	beq.n	8009742 <HAL_CAN_IRQHandler+0x320>
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d82a      	bhi.n	8009756 <HAL_CAN_IRQHandler+0x334>
 8009700:	2b40      	cmp	r3, #64	; 0x40
 8009702:	d019      	beq.n	8009738 <HAL_CAN_IRQHandler+0x316>
 8009704:	2b40      	cmp	r3, #64	; 0x40
 8009706:	d826      	bhi.n	8009756 <HAL_CAN_IRQHandler+0x334>
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	d010      	beq.n	800972e <HAL_CAN_IRQHandler+0x30c>
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d822      	bhi.n	8009756 <HAL_CAN_IRQHandler+0x334>
 8009710:	2b10      	cmp	r3, #16
 8009712:	d002      	beq.n	800971a <HAL_CAN_IRQHandler+0x2f8>
 8009714:	2b20      	cmp	r3, #32
 8009716:	d005      	beq.n	8009724 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009718:	e01d      	b.n	8009756 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	f043 0308 	orr.w	r3, r3, #8
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009722:	e019      	b.n	8009758 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	f043 0310 	orr.w	r3, r3, #16
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800972c:	e014      	b.n	8009758 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	f043 0320 	orr.w	r3, r3, #32
 8009734:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009736:	e00f      	b.n	8009758 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009740:	e00a      	b.n	8009758 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800974a:	e005      	b.n	8009758 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009754:	e000      	b.n	8009758 <HAL_CAN_IRQHandler+0x336>
            break;
 8009756:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009766:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2204      	movs	r2, #4
 800976e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f84a 	bl	800981c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009788:	bf00      	nop
 800978a:	3728      	adds	r7, #40	; 0x28
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <__NVIC_SetPriorityGrouping+0x44>)
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800984c:	4013      	ands	r3, r2
 800984e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800985c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <__NVIC_SetPriorityGrouping+0x44>)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	60d3      	str	r3, [r2, #12]
}
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <__NVIC_GetPriorityGrouping+0x18>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	0a1b      	lsrs	r3, r3, #8
 8009882:	f003 0307 	and.w	r3, r3, #7
}
 8009886:	4618      	mov	r0, r3
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800989e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	db0b      	blt.n	80098be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 021f 	and.w	r2, r3, #31
 80098ac:	4907      	ldr	r1, [pc, #28]	; (80098cc <__NVIC_EnableIRQ+0x38>)
 80098ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	2001      	movs	r0, #1
 80098b6:	fa00 f202 	lsl.w	r2, r0, r2
 80098ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	e000e100 	.word	0xe000e100

080098d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	db0a      	blt.n	80098fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	490c      	ldr	r1, [pc, #48]	; (800991c <__NVIC_SetPriority+0x4c>)
 80098ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ee:	0112      	lsls	r2, r2, #4
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	440b      	add	r3, r1
 80098f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098f8:	e00a      	b.n	8009910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	4908      	ldr	r1, [pc, #32]	; (8009920 <__NVIC_SetPriority+0x50>)
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	f003 030f 	and.w	r3, r3, #15
 8009906:	3b04      	subs	r3, #4
 8009908:	0112      	lsls	r2, r2, #4
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	440b      	add	r3, r1
 800990e:	761a      	strb	r2, [r3, #24]
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	e000e100 	.word	0xe000e100
 8009920:	e000ed00 	.word	0xe000ed00

08009924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009924:	b480      	push	{r7}
 8009926:	b089      	sub	sp, #36	; 0x24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	2b04      	cmp	r3, #4
 8009940:	bf28      	it	cs
 8009942:	2304      	movcs	r3, #4
 8009944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	3304      	adds	r3, #4
 800994a:	2b06      	cmp	r3, #6
 800994c:	d902      	bls.n	8009954 <NVIC_EncodePriority+0x30>
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	3b03      	subs	r3, #3
 8009952:	e000      	b.n	8009956 <NVIC_EncodePriority+0x32>
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	43da      	mvns	r2, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	401a      	ands	r2, r3
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800996c:	f04f 31ff 	mov.w	r1, #4294967295
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	fa01 f303 	lsl.w	r3, r1, r3
 8009976:	43d9      	mvns	r1, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800997c:	4313      	orrs	r3, r2
         );
}
 800997e:	4618      	mov	r0, r3
 8009980:	3724      	adds	r7, #36	; 0x24
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009990:	f3bf 8f4f 	dsb	sy
}
 8009994:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <__NVIC_SystemReset+0x24>)
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800999e:	4904      	ldr	r1, [pc, #16]	; (80099b0 <__NVIC_SystemReset+0x24>)
 80099a0:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <__NVIC_SystemReset+0x28>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80099a6:	f3bf 8f4f 	dsb	sy
}
 80099aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80099ac:	bf00      	nop
 80099ae:	e7fd      	b.n	80099ac <__NVIC_SystemReset+0x20>
 80099b0:	e000ed00 	.word	0xe000ed00
 80099b4:	05fa0004 	.word	0x05fa0004

080099b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099c8:	d301      	bcc.n	80099ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099ca:	2301      	movs	r3, #1
 80099cc:	e00f      	b.n	80099ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099ce:	4a0a      	ldr	r2, [pc, #40]	; (80099f8 <SysTick_Config+0x40>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099d6:	210f      	movs	r1, #15
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	f7ff ff78 	bl	80098d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <SysTick_Config+0x40>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099e6:	4b04      	ldr	r3, [pc, #16]	; (80099f8 <SysTick_Config+0x40>)
 80099e8:	2207      	movs	r2, #7
 80099ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	e000e010 	.word	0xe000e010

080099fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff ff13 	bl	8009830 <__NVIC_SetPriorityGrouping>
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b086      	sub	sp, #24
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	4603      	mov	r3, r0
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009a24:	f7ff ff28 	bl	8009878 <__NVIC_GetPriorityGrouping>
 8009a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	68b9      	ldr	r1, [r7, #8]
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	f7ff ff78 	bl	8009924 <NVIC_EncodePriority>
 8009a34:	4602      	mov	r2, r0
 8009a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff ff47 	bl	80098d0 <__NVIC_SetPriority>
}
 8009a42:	bf00      	nop
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	4603      	mov	r3, r0
 8009a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff ff1b 	bl	8009894 <__NVIC_EnableIRQ>
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009a6a:	f7ff ff8f 	bl	800998c <__NVIC_SystemReset>

08009a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff ff9e 	bl	80099b8 <SysTick_Config>
 8009a7c:	4603      	mov	r3, r0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e098      	b.n	8009bcc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4b4d      	ldr	r3, [pc, #308]	; (8009bd8 <HAL_DMA_Init+0x150>)
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d80f      	bhi.n	8009ac6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	4b4b      	ldr	r3, [pc, #300]	; (8009bdc <HAL_DMA_Init+0x154>)
 8009aae:	4413      	add	r3, r2
 8009ab0:	4a4b      	ldr	r2, [pc, #300]	; (8009be0 <HAL_DMA_Init+0x158>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	009a      	lsls	r2, r3, #2
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a48      	ldr	r2, [pc, #288]	; (8009be4 <HAL_DMA_Init+0x15c>)
 8009ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8009ac4:	e00e      	b.n	8009ae4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	4b46      	ldr	r3, [pc, #280]	; (8009be8 <HAL_DMA_Init+0x160>)
 8009ace:	4413      	add	r3, r2
 8009ad0:	4a43      	ldr	r2, [pc, #268]	; (8009be0 <HAL_DMA_Init+0x158>)
 8009ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad6:	091b      	lsrs	r3, r3, #4
 8009ad8:	009a      	lsls	r2, r3, #2
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a42      	ldr	r2, [pc, #264]	; (8009bec <HAL_DMA_Init+0x164>)
 8009ae2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b3e:	d039      	beq.n	8009bb4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	4a27      	ldr	r2, [pc, #156]	; (8009be4 <HAL_DMA_Init+0x15c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d11a      	bne.n	8009b80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009b4a:	4b29      	ldr	r3, [pc, #164]	; (8009bf0 <HAL_DMA_Init+0x168>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	f003 031c 	and.w	r3, r3, #28
 8009b56:	210f      	movs	r1, #15
 8009b58:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5c:	43db      	mvns	r3, r3
 8009b5e:	4924      	ldr	r1, [pc, #144]	; (8009bf0 <HAL_DMA_Init+0x168>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b64:	4b22      	ldr	r3, [pc, #136]	; (8009bf0 <HAL_DMA_Init+0x168>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6859      	ldr	r1, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b70:	f003 031c 	and.w	r3, r3, #28
 8009b74:	fa01 f303 	lsl.w	r3, r1, r3
 8009b78:	491d      	ldr	r1, [pc, #116]	; (8009bf0 <HAL_DMA_Init+0x168>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	600b      	str	r3, [r1, #0]
 8009b7e:	e019      	b.n	8009bb4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009b80:	4b1c      	ldr	r3, [pc, #112]	; (8009bf4 <HAL_DMA_Init+0x16c>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b88:	f003 031c 	and.w	r3, r3, #28
 8009b8c:	210f      	movs	r1, #15
 8009b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b92:	43db      	mvns	r3, r3
 8009b94:	4917      	ldr	r1, [pc, #92]	; (8009bf4 <HAL_DMA_Init+0x16c>)
 8009b96:	4013      	ands	r3, r2
 8009b98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b9a:	4b16      	ldr	r3, [pc, #88]	; (8009bf4 <HAL_DMA_Init+0x16c>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6859      	ldr	r1, [r3, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba6:	f003 031c 	and.w	r3, r3, #28
 8009baa:	fa01 f303 	lsl.w	r3, r1, r3
 8009bae:	4911      	ldr	r1, [pc, #68]	; (8009bf4 <HAL_DMA_Init+0x16c>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	40020407 	.word	0x40020407
 8009bdc:	bffdfff8 	.word	0xbffdfff8
 8009be0:	cccccccd 	.word	0xcccccccd
 8009be4:	40020000 	.word	0x40020000
 8009be8:	bffdfbf8 	.word	0xbffdfbf8
 8009bec:	40020400 	.word	0x40020400
 8009bf0:	400200a8 	.word	0x400200a8
 8009bf4:	400204a8 	.word	0x400204a8

08009bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_DMA_Start_IT+0x20>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e04b      	b.n	8009cb0 <HAL_DMA_Start_IT+0xb8>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d13a      	bne.n	8009ca2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f95f 	bl	8009f14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d008      	beq.n	8009c70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 020e 	orr.w	r2, r2, #14
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	e00f      	b.n	8009c90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0204 	bic.w	r2, r2, #4
 8009c7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 020a 	orr.w	r2, r2, #10
 8009c8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	e005      	b.n	8009cae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009caa:	2302      	movs	r3, #2
 8009cac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d008      	beq.n	8009ce2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e022      	b.n	8009d28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 020e 	bic.w	r2, r2, #14
 8009cf0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 0201 	bic.w	r2, r2, #1
 8009d00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d06:	f003 021c 	and.w	r2, r3, #28
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	2101      	movs	r1, #1
 8009d10:	fa01 f202 	lsl.w	r2, r1, r2
 8009d14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d005      	beq.n	8009d58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2204      	movs	r2, #4
 8009d50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	73fb      	strb	r3, [r7, #15]
 8009d56:	e029      	b.n	8009dac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 020e 	bic.w	r2, r2, #14
 8009d66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0201 	bic.w	r2, r2, #1
 8009d76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7c:	f003 021c 	and.w	r2, r3, #28
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d84:	2101      	movs	r1, #1
 8009d86:	fa01 f202 	lsl.w	r2, r1, r2
 8009d8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	4798      	blx	r3
    }
  }
  return status;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd2:	f003 031c 	and.w	r3, r3, #28
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	409a      	lsls	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d026      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x7a>
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d021      	beq.n	8009e30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d107      	bne.n	8009e0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0204 	bic.w	r2, r2, #4
 8009e08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0e:	f003 021c 	and.w	r2, r3, #28
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e16:	2104      	movs	r1, #4
 8009e18:	fa01 f202 	lsl.w	r2, r1, r2
 8009e1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d071      	beq.n	8009f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009e2e:	e06c      	b.n	8009f0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e34:	f003 031c 	and.w	r3, r3, #28
 8009e38:	2202      	movs	r2, #2
 8009e3a:	409a      	lsls	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d02e      	beq.n	8009ea2 <HAL_DMA_IRQHandler+0xec>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d029      	beq.n	8009ea2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0320 	and.w	r3, r3, #32
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 020a 	bic.w	r2, r2, #10
 8009e6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e78:	f003 021c 	and.w	r2, r3, #28
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e80:	2102      	movs	r1, #2
 8009e82:	fa01 f202 	lsl.w	r2, r1, r2
 8009e86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d038      	beq.n	8009f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009ea0:	e033      	b.n	8009f0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea6:	f003 031c 	and.w	r3, r3, #28
 8009eaa:	2208      	movs	r2, #8
 8009eac:	409a      	lsls	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d02a      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x156>
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d025      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 020e 	bic.w	r2, r2, #14
 8009ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed4:	f003 021c 	and.w	r2, r3, #28
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009edc:	2101      	movs	r1, #1
 8009ede:	fa01 f202 	lsl.w	r2, r1, r2
 8009ee2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d004      	beq.n	8009f0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
}
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f26:	f003 021c 	and.w	r2, r3, #28
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	2101      	movs	r1, #1
 8009f30:	fa01 f202 	lsl.w	r2, r1, r2
 8009f34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	2b10      	cmp	r3, #16
 8009f44:	d108      	bne.n	8009f58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009f56:	e007      	b.n	8009f68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	60da      	str	r2, [r3, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f82:	e148      	b.n	800a216 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	2101      	movs	r1, #1
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f90:	4013      	ands	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 813a 	beq.w	800a210 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d005      	beq.n	8009fb4 <HAL_GPIO_Init+0x40>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d130      	bne.n	800a016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	68da      	ldr	r2, [r3, #12]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fea:	2201      	movs	r2, #1
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff2:	43db      	mvns	r3, r3
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	091b      	lsrs	r3, r3, #4
 800a000:	f003 0201 	and.w	r2, r3, #1
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	fa02 f303 	lsl.w	r3, r2, r3
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d017      	beq.n	800a052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	2203      	movs	r2, #3
 800a02e:	fa02 f303 	lsl.w	r3, r2, r3
 800a032:	43db      	mvns	r3, r3
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4013      	ands	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	fa02 f303 	lsl.w	r3, r2, r3
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f003 0303 	and.w	r3, r3, #3
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d123      	bne.n	800a0a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	08da      	lsrs	r2, r3, #3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3208      	adds	r2, #8
 800a066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f003 0307 	and.w	r3, r3, #7
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	220f      	movs	r2, #15
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	43db      	mvns	r3, r3
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4013      	ands	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	691a      	ldr	r2, [r3, #16]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	fa02 f303 	lsl.w	r3, r2, r3
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	08da      	lsrs	r2, r3, #3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3208      	adds	r2, #8
 800a0a0:	6939      	ldr	r1, [r7, #16]
 800a0a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b6:	43db      	mvns	r3, r3
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f003 0203 	and.w	r2, r3, #3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 8094 	beq.w	800a210 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0e8:	4b52      	ldr	r3, [pc, #328]	; (800a234 <HAL_GPIO_Init+0x2c0>)
 800a0ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ec:	4a51      	ldr	r2, [pc, #324]	; (800a234 <HAL_GPIO_Init+0x2c0>)
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	6613      	str	r3, [r2, #96]	; 0x60
 800a0f4:	4b4f      	ldr	r3, [pc, #316]	; (800a234 <HAL_GPIO_Init+0x2c0>)
 800a0f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	60bb      	str	r3, [r7, #8]
 800a0fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a100:	4a4d      	ldr	r2, [pc, #308]	; (800a238 <HAL_GPIO_Init+0x2c4>)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	089b      	lsrs	r3, r3, #2
 800a106:	3302      	adds	r3, #2
 800a108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a10c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	220f      	movs	r2, #15
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	43db      	mvns	r3, r3
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	4013      	ands	r3, r2
 800a122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a12a:	d00d      	beq.n	800a148 <HAL_GPIO_Init+0x1d4>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a43      	ldr	r2, [pc, #268]	; (800a23c <HAL_GPIO_Init+0x2c8>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d007      	beq.n	800a144 <HAL_GPIO_Init+0x1d0>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a42      	ldr	r2, [pc, #264]	; (800a240 <HAL_GPIO_Init+0x2cc>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d101      	bne.n	800a140 <HAL_GPIO_Init+0x1cc>
 800a13c:	2302      	movs	r3, #2
 800a13e:	e004      	b.n	800a14a <HAL_GPIO_Init+0x1d6>
 800a140:	2307      	movs	r3, #7
 800a142:	e002      	b.n	800a14a <HAL_GPIO_Init+0x1d6>
 800a144:	2301      	movs	r3, #1
 800a146:	e000      	b.n	800a14a <HAL_GPIO_Init+0x1d6>
 800a148:	2300      	movs	r3, #0
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	f002 0203 	and.w	r2, r2, #3
 800a150:	0092      	lsls	r2, r2, #2
 800a152:	4093      	lsls	r3, r2
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a15a:	4937      	ldr	r1, [pc, #220]	; (800a238 <HAL_GPIO_Init+0x2c4>)
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	089b      	lsrs	r3, r3, #2
 800a160:	3302      	adds	r3, #2
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a168:	4b36      	ldr	r3, [pc, #216]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	43db      	mvns	r3, r3
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4013      	ands	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d003      	beq.n	800a18c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4313      	orrs	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a18c:	4a2d      	ldr	r2, [pc, #180]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a192:	4b2c      	ldr	r3, [pc, #176]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	43db      	mvns	r3, r3
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	4013      	ands	r3, r2
 800a1a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1b6:	4a23      	ldr	r2, [pc, #140]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a1bc:	4b21      	ldr	r3, [pc, #132]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	43db      	mvns	r3, r3
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a1e0:	4a18      	ldr	r2, [pc, #96]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a1e6:	4b17      	ldr	r3, [pc, #92]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	43db      	mvns	r3, r3
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4313      	orrs	r3, r2
 800a208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a20a:	4a0e      	ldr	r2, [pc, #56]	; (800a244 <HAL_GPIO_Init+0x2d0>)
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	3301      	adds	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	f47f aeaf 	bne.w	8009f84 <HAL_GPIO_Init+0x10>
  }
}
 800a226:	bf00      	nop
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	40021000 	.word	0x40021000
 800a238:	40010000 	.word	0x40010000
 800a23c:	48000400 	.word	0x48000400
 800a240:	48000800 	.word	0x48000800
 800a244:	40010400 	.word	0x40010400

0800a248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	807b      	strh	r3, [r7, #2]
 800a254:	4613      	mov	r3, r2
 800a256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a258:	787b      	ldrb	r3, [r7, #1]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a25e:	887a      	ldrh	r2, [r7, #2]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a264:	e002      	b.n	800a26c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a266:	887a      	ldrh	r2, [r7, #2]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a28a:	887a      	ldrh	r2, [r7, #2]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4013      	ands	r3, r2
 800a290:	041a      	lsls	r2, r3, #16
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	43d9      	mvns	r1, r3
 800a296:	887b      	ldrh	r3, [r7, #2]
 800a298:	400b      	ands	r3, r1
 800a29a:	431a      	orrs	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	619a      	str	r2, [r3, #24]
}
 800a2a0:	bf00      	nop
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e041      	b.n	800a342 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a2c6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f245 5255 	movw	r2, #21845	; 0x5555
 800a2d0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6852      	ldr	r2, [r2, #4]
 800a2da:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	6892      	ldr	r2, [r2, #8]
 800a2e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a2e6:	f7fe fbf1 	bl	8008acc <HAL_GetTick>
 800a2ea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a2ec:	e00f      	b.n	800a30e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a2ee:	f7fe fbed 	bl	8008acc <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b31      	cmp	r3, #49	; 0x31
 800a2fa:	d908      	bls.n	800a30e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e019      	b.n	800a342 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	f003 0307 	and.w	r3, r3, #7
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e8      	bne.n	800a2ee <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691a      	ldr	r2, [r3, #16]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	429a      	cmp	r2, r3
 800a328:	d005      	beq.n	800a336 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68d2      	ldr	r2, [r2, #12]
 800a332:	611a      	str	r2, [r3, #16]
 800a334:	e004      	b.n	800a340 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a33e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a35a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a370:	4b05      	ldr	r3, [pc, #20]	; (800a388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a04      	ldr	r2, [pc, #16]	; (800a388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a37a:	6013      	str	r3, [r2, #0]
}
 800a37c:	bf00      	nop
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	40007000 	.word	0x40007000

0800a38c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a390:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a398:	4618      	mov	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	40007000 	.word	0x40007000

0800a3a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3b6:	d130      	bne.n	800a41a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a3b8:	4b23      	ldr	r3, [pc, #140]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c4:	d038      	beq.n	800a438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3c6:	4b20      	ldr	r3, [pc, #128]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3ce:	4a1e      	ldr	r2, [pc, #120]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2232      	movs	r2, #50	; 0x32
 800a3dc:	fb02 f303 	mul.w	r3, r2, r3
 800a3e0:	4a1b      	ldr	r2, [pc, #108]	; (800a450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	0c9b      	lsrs	r3, r3, #18
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3ec:	e002      	b.n	800a3f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3f4:	4b14      	ldr	r3, [pc, #80]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a400:	d102      	bne.n	800a408 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f2      	bne.n	800a3ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a408:	4b0f      	ldr	r3, [pc, #60]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a414:	d110      	bne.n	800a438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e00f      	b.n	800a43a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a41a:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a426:	d007      	beq.n	800a438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a428:	4b07      	ldr	r3, [pc, #28]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a430:	4a05      	ldr	r2, [pc, #20]	; (800a448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40007000 	.word	0x40007000
 800a44c:	200003d0 	.word	0x200003d0
 800a450:	431bde83 	.word	0x431bde83

0800a454 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	f000 bc02 	b.w	800ac6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a468:	4b96      	ldr	r3, [pc, #600]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f003 030c 	and.w	r3, r3, #12
 800a470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a472:	4b94      	ldr	r3, [pc, #592]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 80e4 	beq.w	800a652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d007      	beq.n	800a4a0 <HAL_RCC_OscConfig+0x4c>
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b0c      	cmp	r3, #12
 800a494:	f040 808b 	bne.w	800a5ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	f040 8087 	bne.w	800a5ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a4a0:	4b88      	ldr	r3, [pc, #544]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <HAL_RCC_OscConfig+0x64>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e3d9      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1a      	ldr	r2, [r3, #32]
 800a4bc:	4b81      	ldr	r3, [pc, #516]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <HAL_RCC_OscConfig+0x7e>
 800a4c8:	4b7e      	ldr	r3, [pc, #504]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4d0:	e005      	b.n	800a4de <HAL_RCC_OscConfig+0x8a>
 800a4d2:	4b7c      	ldr	r3, [pc, #496]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4d8:	091b      	lsrs	r3, r3, #4
 800a4da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d223      	bcs.n	800a52a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fd8c 	bl	800b004 <RCC_SetFlashLatencyFromMSIRange>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e3ba      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4f6:	4b73      	ldr	r3, [pc, #460]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a72      	ldr	r2, [pc, #456]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a4fc:	f043 0308 	orr.w	r3, r3, #8
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	4b70      	ldr	r3, [pc, #448]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	496d      	ldr	r1, [pc, #436]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a510:	4313      	orrs	r3, r2
 800a512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a514:	4b6b      	ldr	r3, [pc, #428]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	4968      	ldr	r1, [pc, #416]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a524:	4313      	orrs	r3, r2
 800a526:	604b      	str	r3, [r1, #4]
 800a528:	e025      	b.n	800a576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a52a:	4b66      	ldr	r3, [pc, #408]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a65      	ldr	r2, [pc, #404]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a530:	f043 0308 	orr.w	r3, r3, #8
 800a534:	6013      	str	r3, [r2, #0]
 800a536:	4b63      	ldr	r3, [pc, #396]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	4960      	ldr	r1, [pc, #384]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a544:	4313      	orrs	r3, r2
 800a546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a548:	4b5e      	ldr	r3, [pc, #376]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	495b      	ldr	r1, [pc, #364]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d109      	bne.n	800a576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fd4c 	bl	800b004 <RCC_SetFlashLatencyFromMSIRange>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e37a      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a576:	f000 fc81 	bl	800ae7c <HAL_RCC_GetSysClockFreq>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b51      	ldr	r3, [pc, #324]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	091b      	lsrs	r3, r3, #4
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	4950      	ldr	r1, [pc, #320]	; (800a6c8 <HAL_RCC_OscConfig+0x274>)
 800a588:	5ccb      	ldrb	r3, [r1, r3]
 800a58a:	f003 031f 	and.w	r3, r3, #31
 800a58e:	fa22 f303 	lsr.w	r3, r2, r3
 800a592:	4a4e      	ldr	r2, [pc, #312]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a596:	4b4e      	ldr	r3, [pc, #312]	; (800a6d0 <HAL_RCC_OscConfig+0x27c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fa46 	bl	8008a2c <HAL_InitTick>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d052      	beq.n	800a650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	e35e      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d032      	beq.n	800a61c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a5b6:	4b43      	ldr	r3, [pc, #268]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a42      	ldr	r2, [pc, #264]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a5c2:	f7fe fa83 	bl	8008acc <HAL_GetTick>
 800a5c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a5c8:	e008      	b.n	800a5dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5ca:	f7fe fa7f 	bl	8008acc <HAL_GetTick>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d901      	bls.n	800a5dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e347      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a5dc:	4b39      	ldr	r3, [pc, #228]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0f0      	beq.n	800a5ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5e8:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a35      	ldr	r2, [pc, #212]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a5ee:	f043 0308 	orr.w	r3, r3, #8
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	4b33      	ldr	r3, [pc, #204]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	4930      	ldr	r1, [pc, #192]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a602:	4313      	orrs	r3, r2
 800a604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a606:	4b2f      	ldr	r3, [pc, #188]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	492b      	ldr	r1, [pc, #172]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a616:	4313      	orrs	r3, r2
 800a618:	604b      	str	r3, [r1, #4]
 800a61a:	e01a      	b.n	800a652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a61c:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a28      	ldr	r2, [pc, #160]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a622:	f023 0301 	bic.w	r3, r3, #1
 800a626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a628:	f7fe fa50 	bl	8008acc <HAL_GetTick>
 800a62c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a630:	f7fe fa4c 	bl	8008acc <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e314      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a642:	4b20      	ldr	r3, [pc, #128]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1f0      	bne.n	800a630 <HAL_RCC_OscConfig+0x1dc>
 800a64e:	e000      	b.n	800a652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d073      	beq.n	800a746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b08      	cmp	r3, #8
 800a662:	d005      	beq.n	800a670 <HAL_RCC_OscConfig+0x21c>
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b0c      	cmp	r3, #12
 800a668:	d10e      	bne.n	800a688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d10b      	bne.n	800a688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a670:	4b14      	ldr	r3, [pc, #80]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d063      	beq.n	800a744 <HAL_RCC_OscConfig+0x2f0>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d15f      	bne.n	800a744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e2f1      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a690:	d106      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x24c>
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a0b      	ldr	r2, [pc, #44]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	e025      	b.n	800a6ec <HAL_RCC_OscConfig+0x298>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6a8:	d114      	bne.n	800a6d4 <HAL_RCC_OscConfig+0x280>
 800a6aa:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a05      	ldr	r2, [pc, #20]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a6b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	4b03      	ldr	r3, [pc, #12]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a02      	ldr	r2, [pc, #8]	; (800a6c4 <HAL_RCC_OscConfig+0x270>)
 800a6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	e013      	b.n	800a6ec <HAL_RCC_OscConfig+0x298>
 800a6c4:	40021000 	.word	0x40021000
 800a6c8:	0800f174 	.word	0x0800f174
 800a6cc:	200003d0 	.word	0x200003d0
 800a6d0:	200003d4 	.word	0x200003d4
 800a6d4:	4ba0      	ldr	r3, [pc, #640]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a9f      	ldr	r2, [pc, #636]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a6da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	4b9d      	ldr	r3, [pc, #628]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a9c      	ldr	r2, [pc, #624]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a6e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d013      	beq.n	800a71c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f4:	f7fe f9ea 	bl	8008acc <HAL_GetTick>
 800a6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6fa:	e008      	b.n	800a70e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6fc:	f7fe f9e6 	bl	8008acc <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b64      	cmp	r3, #100	; 0x64
 800a708:	d901      	bls.n	800a70e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e2ae      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a70e:	4b92      	ldr	r3, [pc, #584]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0f0      	beq.n	800a6fc <HAL_RCC_OscConfig+0x2a8>
 800a71a:	e014      	b.n	800a746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a71c:	f7fe f9d6 	bl	8008acc <HAL_GetTick>
 800a720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a724:	f7fe f9d2 	bl	8008acc <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b64      	cmp	r3, #100	; 0x64
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e29a      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a736:	4b88      	ldr	r3, [pc, #544]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f0      	bne.n	800a724 <HAL_RCC_OscConfig+0x2d0>
 800a742:	e000      	b.n	800a746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d060      	beq.n	800a814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b04      	cmp	r3, #4
 800a756:	d005      	beq.n	800a764 <HAL_RCC_OscConfig+0x310>
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	2b0c      	cmp	r3, #12
 800a75c:	d119      	bne.n	800a792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d116      	bne.n	800a792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a764:	4b7c      	ldr	r3, [pc, #496]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <HAL_RCC_OscConfig+0x328>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e277      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a77c:	4b76      	ldr	r3, [pc, #472]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	061b      	lsls	r3, r3, #24
 800a78a:	4973      	ldr	r1, [pc, #460]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a790:	e040      	b.n	800a814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d023      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a79a:	4b6f      	ldr	r3, [pc, #444]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a6e      	ldr	r2, [pc, #440]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a7a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a6:	f7fe f991 	bl	8008acc <HAL_GetTick>
 800a7aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a7ac:	e008      	b.n	800a7c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ae:	f7fe f98d 	bl	8008acc <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d901      	bls.n	800a7c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e255      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a7c0:	4b65      	ldr	r3, [pc, #404]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0f0      	beq.n	800a7ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7cc:	4b62      	ldr	r3, [pc, #392]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	061b      	lsls	r3, r3, #24
 800a7da:	495f      	ldr	r1, [pc, #380]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	604b      	str	r3, [r1, #4]
 800a7e0:	e018      	b.n	800a814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7e2:	4b5d      	ldr	r3, [pc, #372]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a5c      	ldr	r2, [pc, #368]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a7e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ee:	f7fe f96d 	bl	8008acc <HAL_GetTick>
 800a7f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a7f4:	e008      	b.n	800a808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7f6:	f7fe f969 	bl	8008acc <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	2b02      	cmp	r3, #2
 800a802:	d901      	bls.n	800a808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e231      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a808:	4b53      	ldr	r3, [pc, #332]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1f0      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d03c      	beq.n	800a89a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01c      	beq.n	800a862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a828:	4b4b      	ldr	r3, [pc, #300]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a82a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a82e:	4a4a      	ldr	r2, [pc, #296]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a838:	f7fe f948 	bl	8008acc <HAL_GetTick>
 800a83c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a840:	f7fe f944 	bl	8008acc <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e20c      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a852:	4b41      	ldr	r3, [pc, #260]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0ef      	beq.n	800a840 <HAL_RCC_OscConfig+0x3ec>
 800a860:	e01b      	b.n	800a89a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a862:	4b3d      	ldr	r3, [pc, #244]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a868:	4a3b      	ldr	r2, [pc, #236]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a872:	f7fe f92b 	bl	8008acc <HAL_GetTick>
 800a876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a878:	e008      	b.n	800a88c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a87a:	f7fe f927 	bl	8008acc <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d901      	bls.n	800a88c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e1ef      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a88c:	4b32      	ldr	r3, [pc, #200]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a88e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1ef      	bne.n	800a87a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80a6 	beq.w	800a9f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a8ac:	4b2a      	ldr	r3, [pc, #168]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a8ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10d      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8b8:	4b27      	ldr	r3, [pc, #156]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8bc:	4a26      	ldr	r2, [pc, #152]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a8be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c2:	6593      	str	r3, [r2, #88]	; 0x58
 800a8c4:	4b24      	ldr	r3, [pc, #144]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a8c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8cc:	60bb      	str	r3, [r7, #8]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8d4:	4b21      	ldr	r3, [pc, #132]	; (800a95c <HAL_RCC_OscConfig+0x508>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d118      	bne.n	800a912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8e0:	4b1e      	ldr	r3, [pc, #120]	; (800a95c <HAL_RCC_OscConfig+0x508>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1d      	ldr	r2, [pc, #116]	; (800a95c <HAL_RCC_OscConfig+0x508>)
 800a8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8ec:	f7fe f8ee 	bl	8008acc <HAL_GetTick>
 800a8f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8f4:	f7fe f8ea 	bl	8008acc <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e1b2      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a906:	4b15      	ldr	r3, [pc, #84]	; (800a95c <HAL_RCC_OscConfig+0x508>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f0      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d108      	bne.n	800a92c <HAL_RCC_OscConfig+0x4d8>
 800a91a:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a920:	4a0d      	ldr	r2, [pc, #52]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a92a:	e029      	b.n	800a980 <HAL_RCC_OscConfig+0x52c>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	2b05      	cmp	r3, #5
 800a932:	d115      	bne.n	800a960 <HAL_RCC_OscConfig+0x50c>
 800a934:	4b08      	ldr	r3, [pc, #32]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a93a:	4a07      	ldr	r2, [pc, #28]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a93c:	f043 0304 	orr.w	r3, r3, #4
 800a940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a944:	4b04      	ldr	r3, [pc, #16]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94a:	4a03      	ldr	r2, [pc, #12]	; (800a958 <HAL_RCC_OscConfig+0x504>)
 800a94c:	f043 0301 	orr.w	r3, r3, #1
 800a950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a954:	e014      	b.n	800a980 <HAL_RCC_OscConfig+0x52c>
 800a956:	bf00      	nop
 800a958:	40021000 	.word	0x40021000
 800a95c:	40007000 	.word	0x40007000
 800a960:	4b9a      	ldr	r3, [pc, #616]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a966:	4a99      	ldr	r2, [pc, #612]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a968:	f023 0301 	bic.w	r3, r3, #1
 800a96c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a970:	4b96      	ldr	r3, [pc, #600]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a976:	4a95      	ldr	r2, [pc, #596]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a978:	f023 0304 	bic.w	r3, r3, #4
 800a97c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d016      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a988:	f7fe f8a0 	bl	8008acc <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a98e:	e00a      	b.n	800a9a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a990:	f7fe f89c 	bl	8008acc <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e162      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9a6:	4b89      	ldr	r3, [pc, #548]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0ed      	beq.n	800a990 <HAL_RCC_OscConfig+0x53c>
 800a9b4:	e015      	b.n	800a9e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b6:	f7fe f889 	bl	8008acc <HAL_GetTick>
 800a9ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a9bc:	e00a      	b.n	800a9d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9be:	f7fe f885 	bl	8008acc <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e14b      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a9d4:	4b7d      	ldr	r3, [pc, #500]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1ed      	bne.n	800a9be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a9e2:	7ffb      	ldrb	r3, [r7, #31]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d105      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9e8:	4b78      	ldr	r3, [pc, #480]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ec:	4a77      	ldr	r2, [pc, #476]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800a9ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d03c      	beq.n	800aa7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01c      	beq.n	800aa42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa08:	4b70      	ldr	r3, [pc, #448]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa0e:	4a6f      	ldr	r2, [pc, #444]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa10:	f043 0301 	orr.w	r3, r3, #1
 800aa14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa18:	f7fe f858 	bl	8008acc <HAL_GetTick>
 800aa1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa1e:	e008      	b.n	800aa32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa20:	f7fe f854 	bl	8008acc <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e11c      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa32:	4b66      	ldr	r3, [pc, #408]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0ef      	beq.n	800aa20 <HAL_RCC_OscConfig+0x5cc>
 800aa40:	e01b      	b.n	800aa7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa42:	4b62      	ldr	r3, [pc, #392]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa48:	4a60      	ldr	r2, [pc, #384]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa4a:	f023 0301 	bic.w	r3, r3, #1
 800aa4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa52:	f7fe f83b 	bl	8008acc <HAL_GetTick>
 800aa56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aa58:	e008      	b.n	800aa6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa5a:	f7fe f837 	bl	8008acc <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d901      	bls.n	800aa6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e0ff      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aa6c:	4b57      	ldr	r3, [pc, #348]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1ef      	bne.n	800aa5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 80f3 	beq.w	800ac6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f040 80c9 	bne.w	800ac20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800aa8e:	4b4f      	ldr	r3, [pc, #316]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f003 0203 	and.w	r2, r3, #3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d12c      	bne.n	800aafc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaac:	3b01      	subs	r3, #1
 800aaae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d123      	bne.n	800aafc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d11b      	bne.n	800aafc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d113      	bne.n	800aafc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	3b01      	subs	r3, #1
 800aae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d109      	bne.n	800aafc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	085b      	lsrs	r3, r3, #1
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d06b      	beq.n	800abd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	2b0c      	cmp	r3, #12
 800ab00:	d062      	beq.n	800abc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ab02:	4b32      	ldr	r3, [pc, #200]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e0ac      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ab12:	4b2e      	ldr	r3, [pc, #184]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a2d      	ldr	r2, [pc, #180]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ab1e:	f7fd ffd5 	bl	8008acc <HAL_GetTick>
 800ab22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab24:	e008      	b.n	800ab38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab26:	f7fd ffd1 	bl	8008acc <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d901      	bls.n	800ab38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e099      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab38:	4b24      	ldr	r3, [pc, #144]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1f0      	bne.n	800ab26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab44:	4b21      	ldr	r3, [pc, #132]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <HAL_RCC_OscConfig+0x77c>)
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab54:	3a01      	subs	r2, #1
 800ab56:	0112      	lsls	r2, r2, #4
 800ab58:	4311      	orrs	r1, r2
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab5e:	0212      	lsls	r2, r2, #8
 800ab60:	4311      	orrs	r1, r2
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ab66:	0852      	lsrs	r2, r2, #1
 800ab68:	3a01      	subs	r2, #1
 800ab6a:	0552      	lsls	r2, r2, #21
 800ab6c:	4311      	orrs	r1, r2
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ab72:	0852      	lsrs	r2, r2, #1
 800ab74:	3a01      	subs	r2, #1
 800ab76:	0652      	lsls	r2, r2, #25
 800ab78:	4311      	orrs	r1, r2
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab7e:	06d2      	lsls	r2, r2, #27
 800ab80:	430a      	orrs	r2, r1
 800ab82:	4912      	ldr	r1, [pc, #72]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a0f      	ldr	r2, [pc, #60]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab94:	4b0d      	ldr	r3, [pc, #52]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4a0c      	ldr	r2, [pc, #48]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800ab9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aba0:	f7fd ff94 	bl	8008acc <HAL_GetTick>
 800aba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aba6:	e008      	b.n	800abba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aba8:	f7fd ff90 	bl	8008acc <HAL_GetTick>
 800abac:	4602      	mov	r2, r0
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d901      	bls.n	800abba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e058      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abba:	4b04      	ldr	r3, [pc, #16]	; (800abcc <HAL_RCC_OscConfig+0x778>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f0      	beq.n	800aba8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800abc6:	e050      	b.n	800ac6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e04f      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
 800abcc:	40021000 	.word	0x40021000
 800abd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abd4:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d144      	bne.n	800ac6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800abe0:	4b24      	ldr	r3, [pc, #144]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a23      	ldr	r2, [pc, #140]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800abe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800abec:	4b21      	ldr	r3, [pc, #132]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4a20      	ldr	r2, [pc, #128]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800abf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800abf8:	f7fd ff68 	bl	8008acc <HAL_GetTick>
 800abfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abfe:	e008      	b.n	800ac12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac00:	f7fd ff64 	bl	8008acc <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d901      	bls.n	800ac12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e02c      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac12:	4b18      	ldr	r3, [pc, #96]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0f0      	beq.n	800ac00 <HAL_RCC_OscConfig+0x7ac>
 800ac1e:	e024      	b.n	800ac6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	2b0c      	cmp	r3, #12
 800ac24:	d01f      	beq.n	800ac66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac26:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a12      	ldr	r2, [pc, #72]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800ac2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac32:	f7fd ff4b 	bl	8008acc <HAL_GetTick>
 800ac36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac38:	e008      	b.n	800ac4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac3a:	f7fd ff47 	bl	8008acc <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d901      	bls.n	800ac4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e00f      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1f0      	bne.n	800ac3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	4905      	ldr	r1, [pc, #20]	; (800ac74 <HAL_RCC_OscConfig+0x820>)
 800ac5e:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <HAL_RCC_OscConfig+0x824>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	60cb      	str	r3, [r1, #12]
 800ac64:	e001      	b.n	800ac6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3720      	adds	r7, #32
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	40021000 	.word	0x40021000
 800ac78:	feeefffc 	.word	0xfeeefffc

0800ac7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e0e7      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac90:	4b75      	ldr	r3, [pc, #468]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0307 	and.w	r3, r3, #7
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d910      	bls.n	800acc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac9e:	4b72      	ldr	r3, [pc, #456]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f023 0207 	bic.w	r2, r3, #7
 800aca6:	4970      	ldr	r1, [pc, #448]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	4313      	orrs	r3, r2
 800acac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acae:	4b6e      	ldr	r3, [pc, #440]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d001      	beq.n	800acc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e0cf      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0302 	and.w	r3, r3, #2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	4b66      	ldr	r3, [pc, #408]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acd8:	429a      	cmp	r2, r3
 800acda:	d908      	bls.n	800acee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acdc:	4b63      	ldr	r3, [pc, #396]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	4960      	ldr	r1, [pc, #384]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800acea:	4313      	orrs	r3, r2
 800acec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d04c      	beq.n	800ad94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	d107      	bne.n	800ad12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad02:	4b5a      	ldr	r3, [pc, #360]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d121      	bne.n	800ad52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e0a6      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d107      	bne.n	800ad2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad1a:	4b54      	ldr	r3, [pc, #336]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d115      	bne.n	800ad52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e09a      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d107      	bne.n	800ad42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad32:	4b4e      	ldr	r3, [pc, #312]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e08e      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad42:	4b4a      	ldr	r3, [pc, #296]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e086      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad52:	4b46      	ldr	r3, [pc, #280]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f023 0203 	bic.w	r2, r3, #3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	4943      	ldr	r1, [pc, #268]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad60:	4313      	orrs	r3, r2
 800ad62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad64:	f7fd feb2 	bl	8008acc <HAL_GetTick>
 800ad68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad6a:	e00a      	b.n	800ad82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad6c:	f7fd feae 	bl	8008acc <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e06e      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad82:	4b3a      	ldr	r3, [pc, #232]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f003 020c 	and.w	r2, r3, #12
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d1eb      	bne.n	800ad6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d010      	beq.n	800adc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689a      	ldr	r2, [r3, #8]
 800ada4:	4b31      	ldr	r3, [pc, #196]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adac:	429a      	cmp	r2, r3
 800adae:	d208      	bcs.n	800adc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb0:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	492b      	ldr	r1, [pc, #172]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800adbe:	4313      	orrs	r3, r2
 800adc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800adc2:	4b29      	ldr	r3, [pc, #164]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d210      	bcs.n	800adf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800add0:	4b25      	ldr	r3, [pc, #148]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f023 0207 	bic.w	r2, r3, #7
 800add8:	4923      	ldr	r1, [pc, #140]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	4313      	orrs	r3, r2
 800adde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ade0:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <HAL_RCC_ClockConfig+0x1ec>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0307 	and.w	r3, r3, #7
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d001      	beq.n	800adf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e036      	b.n	800ae60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d008      	beq.n	800ae10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adfe:	4b1b      	ldr	r3, [pc, #108]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	4918      	ldr	r1, [pc, #96]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0308 	and.w	r3, r3, #8
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d009      	beq.n	800ae30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae1c:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	4910      	ldr	r1, [pc, #64]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae30:	f000 f824 	bl	800ae7c <HAL_RCC_GetSysClockFreq>
 800ae34:	4602      	mov	r2, r0
 800ae36:	4b0d      	ldr	r3, [pc, #52]	; (800ae6c <HAL_RCC_ClockConfig+0x1f0>)
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	091b      	lsrs	r3, r3, #4
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	490b      	ldr	r1, [pc, #44]	; (800ae70 <HAL_RCC_ClockConfig+0x1f4>)
 800ae42:	5ccb      	ldrb	r3, [r1, r3]
 800ae44:	f003 031f 	and.w	r3, r3, #31
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	4a09      	ldr	r2, [pc, #36]	; (800ae74 <HAL_RCC_ClockConfig+0x1f8>)
 800ae4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ae50:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <HAL_RCC_ClockConfig+0x1fc>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fd fde9 	bl	8008a2c <HAL_InitTick>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	72fb      	strb	r3, [r7, #11]

  return status;
 800ae5e:	7afb      	ldrb	r3, [r7, #11]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	40022000 	.word	0x40022000
 800ae6c:	40021000 	.word	0x40021000
 800ae70:	0800f174 	.word	0x0800f174
 800ae74:	200003d0 	.word	0x200003d0
 800ae78:	200003d4 	.word	0x200003d4

0800ae7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b089      	sub	sp, #36	; 0x24
 800ae80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]
 800ae86:	2300      	movs	r3, #0
 800ae88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae8a:	4b3e      	ldr	r3, [pc, #248]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	f003 030c 	and.w	r3, r3, #12
 800ae92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae94:	4b3b      	ldr	r3, [pc, #236]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x34>
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2b0c      	cmp	r3, #12
 800aea8:	d121      	bne.n	800aeee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d11e      	bne.n	800aeee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aeb0:	4b34      	ldr	r3, [pc, #208]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0308 	and.w	r3, r3, #8
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d107      	bne.n	800aecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aebc:	4b31      	ldr	r3, [pc, #196]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800aebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	61fb      	str	r3, [r7, #28]
 800aeca:	e005      	b.n	800aed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aecc:	4b2d      	ldr	r3, [pc, #180]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	091b      	lsrs	r3, r3, #4
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aed8:	4a2b      	ldr	r2, [pc, #172]	; (800af88 <HAL_RCC_GetSysClockFreq+0x10c>)
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10d      	bne.n	800af04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aeec:	e00a      	b.n	800af04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d102      	bne.n	800aefa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aef4:	4b25      	ldr	r3, [pc, #148]	; (800af8c <HAL_RCC_GetSysClockFreq+0x110>)
 800aef6:	61bb      	str	r3, [r7, #24]
 800aef8:	e004      	b.n	800af04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d101      	bne.n	800af04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af00:	4b23      	ldr	r3, [pc, #140]	; (800af90 <HAL_RCC_GetSysClockFreq+0x114>)
 800af02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	2b0c      	cmp	r3, #12
 800af08:	d134      	bne.n	800af74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af0a:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b02      	cmp	r3, #2
 800af18:	d003      	beq.n	800af22 <HAL_RCC_GetSysClockFreq+0xa6>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d003      	beq.n	800af28 <HAL_RCC_GetSysClockFreq+0xac>
 800af20:	e005      	b.n	800af2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800af22:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <HAL_RCC_GetSysClockFreq+0x110>)
 800af24:	617b      	str	r3, [r7, #20]
      break;
 800af26:	e005      	b.n	800af34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800af28:	4b19      	ldr	r3, [pc, #100]	; (800af90 <HAL_RCC_GetSysClockFreq+0x114>)
 800af2a:	617b      	str	r3, [r7, #20]
      break;
 800af2c:	e002      	b.n	800af34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	617b      	str	r3, [r7, #20]
      break;
 800af32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af34:	4b13      	ldr	r3, [pc, #76]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	091b      	lsrs	r3, r3, #4
 800af3a:	f003 0307 	and.w	r3, r3, #7
 800af3e:	3301      	adds	r3, #1
 800af40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800af42:	4b10      	ldr	r3, [pc, #64]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	0a1b      	lsrs	r3, r3, #8
 800af48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	fb03 f202 	mul.w	r2, r3, r2
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	fbb2 f3f3 	udiv	r3, r2, r3
 800af58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800af5a:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <HAL_RCC_GetSysClockFreq+0x108>)
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	0e5b      	lsrs	r3, r3, #25
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	3301      	adds	r3, #1
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800af74:	69bb      	ldr	r3, [r7, #24]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3724      	adds	r7, #36	; 0x24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	40021000 	.word	0x40021000
 800af88:	0800f18c 	.word	0x0800f18c
 800af8c:	00f42400 	.word	0x00f42400
 800af90:	007a1200 	.word	0x007a1200

0800af94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af94:	b480      	push	{r7}
 800af96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af98:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <HAL_RCC_GetHCLKFreq+0x14>)
 800af9a:	681b      	ldr	r3, [r3, #0]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	200003d0 	.word	0x200003d0

0800afac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800afb0:	f7ff fff0 	bl	800af94 <HAL_RCC_GetHCLKFreq>
 800afb4:	4602      	mov	r2, r0
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	0a1b      	lsrs	r3, r3, #8
 800afbc:	f003 0307 	and.w	r3, r3, #7
 800afc0:	4904      	ldr	r1, [pc, #16]	; (800afd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800afc2:	5ccb      	ldrb	r3, [r1, r3]
 800afc4:	f003 031f 	and.w	r3, r3, #31
 800afc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afcc:	4618      	mov	r0, r3
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	40021000 	.word	0x40021000
 800afd4:	0800f184 	.word	0x0800f184

0800afd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800afdc:	f7ff ffda 	bl	800af94 <HAL_RCC_GetHCLKFreq>
 800afe0:	4602      	mov	r2, r0
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <HAL_RCC_GetPCLK2Freq+0x24>)
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	0adb      	lsrs	r3, r3, #11
 800afe8:	f003 0307 	and.w	r3, r3, #7
 800afec:	4904      	ldr	r1, [pc, #16]	; (800b000 <HAL_RCC_GetPCLK2Freq+0x28>)
 800afee:	5ccb      	ldrb	r3, [r1, r3]
 800aff0:	f003 031f 	and.w	r3, r3, #31
 800aff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aff8:	4618      	mov	r0, r3
 800affa:	bd80      	pop	{r7, pc}
 800affc:	40021000 	.word	0x40021000
 800b000:	0800f184 	.word	0x0800f184

0800b004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b00c:	2300      	movs	r3, #0
 800b00e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b010:	4b2a      	ldr	r3, [pc, #168]	; (800b0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b01c:	f7ff f9b6 	bl	800a38c <HAL_PWREx_GetVoltageRange>
 800b020:	6178      	str	r0, [r7, #20]
 800b022:	e014      	b.n	800b04e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b024:	4b25      	ldr	r3, [pc, #148]	; (800b0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b028:	4a24      	ldr	r2, [pc, #144]	; (800b0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b02a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b02e:	6593      	str	r3, [r2, #88]	; 0x58
 800b030:	4b22      	ldr	r3, [pc, #136]	; (800b0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b03c:	f7ff f9a6 	bl	800a38c <HAL_PWREx_GetVoltageRange>
 800b040:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b042:	4b1e      	ldr	r3, [pc, #120]	; (800b0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b046:	4a1d      	ldr	r2, [pc, #116]	; (800b0bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b04c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b054:	d10b      	bne.n	800b06e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b80      	cmp	r3, #128	; 0x80
 800b05a:	d919      	bls.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2ba0      	cmp	r3, #160	; 0xa0
 800b060:	d902      	bls.n	800b068 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b062:	2302      	movs	r3, #2
 800b064:	613b      	str	r3, [r7, #16]
 800b066:	e013      	b.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b068:	2301      	movs	r3, #1
 800b06a:	613b      	str	r3, [r7, #16]
 800b06c:	e010      	b.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d902      	bls.n	800b07a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b074:	2303      	movs	r3, #3
 800b076:	613b      	str	r3, [r7, #16]
 800b078:	e00a      	b.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b80      	cmp	r3, #128	; 0x80
 800b07e:	d102      	bne.n	800b086 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b080:	2302      	movs	r3, #2
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	e004      	b.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b70      	cmp	r3, #112	; 0x70
 800b08a:	d101      	bne.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b08c:	2301      	movs	r3, #1
 800b08e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b090:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f023 0207 	bic.w	r2, r3, #7
 800b098:	4909      	ldr	r1, [pc, #36]	; (800b0c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0307 	and.w	r3, r3, #7
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d001      	beq.n	800b0b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e000      	b.n	800b0b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3718      	adds	r7, #24
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	40021000 	.word	0x40021000
 800b0c0:	40022000 	.word	0x40022000

0800b0c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d031      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0e8:	d01a      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b0ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0ee:	d814      	bhi.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b0f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0f8:	d10f      	bne.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b0fa:	4b5d      	ldr	r3, [pc, #372]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	4a5c      	ldr	r2, [pc, #368]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b104:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b106:	e00c      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3304      	adds	r3, #4
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f9ce 	bl	800b4b0 <RCCEx_PLLSAI1_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b118:	e003      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	74fb      	strb	r3, [r7, #19]
      break;
 800b11e:	e000      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b120:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b122:	7cfb      	ldrb	r3, [r7, #19]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10b      	bne.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b128:	4b51      	ldr	r3, [pc, #324]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b12e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b136:	494e      	ldr	r1, [pc, #312]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b13e:	e001      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b140:	7cfb      	ldrb	r3, [r7, #19]
 800b142:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 809e 	beq.w	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b152:	2300      	movs	r3, #0
 800b154:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b156:	4b46      	ldr	r3, [pc, #280]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00d      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b16c:	4b40      	ldr	r3, [pc, #256]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b170:	4a3f      	ldr	r2, [pc, #252]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b176:	6593      	str	r3, [r2, #88]	; 0x58
 800b178:	4b3d      	ldr	r3, [pc, #244]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b180:	60bb      	str	r3, [r7, #8]
 800b182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b184:	2301      	movs	r3, #1
 800b186:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b188:	4b3a      	ldr	r3, [pc, #232]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a39      	ldr	r2, [pc, #228]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b18e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b194:	f7fd fc9a 	bl	8008acc <HAL_GetTick>
 800b198:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b19a:	e009      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b19c:	f7fd fc96 	bl	8008acc <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d902      	bls.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	74fb      	strb	r3, [r7, #19]
        break;
 800b1ae:	e005      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b1b0:	4b30      	ldr	r3, [pc, #192]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d0ef      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b1bc:	7cfb      	ldrb	r3, [r7, #19]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d15a      	bne.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b1c2:	4b2b      	ldr	r3, [pc, #172]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01e      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d019      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b1de:	4b24      	ldr	r3, [pc, #144]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1ea:	4b21      	ldr	r3, [pc, #132]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f0:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b1f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1fa:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b200:	4a1b      	ldr	r2, [pc, #108]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b20a:	4a19      	ldr	r2, [pc, #100]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d016      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b21c:	f7fd fc56 	bl	8008acc <HAL_GetTick>
 800b220:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b222:	e00b      	b.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b224:	f7fd fc52 	bl	8008acc <HAL_GetTick>
 800b228:	4602      	mov	r2, r0
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b232:	4293      	cmp	r3, r2
 800b234:	d902      	bls.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	74fb      	strb	r3, [r7, #19]
            break;
 800b23a:	e006      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b23c:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0ec      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b24a:	7cfb      	ldrb	r3, [r7, #19]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25e:	4904      	ldr	r1, [pc, #16]	; (800b270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b260:	4313      	orrs	r3, r2
 800b262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b266:	e009      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b268:	7cfb      	ldrb	r3, [r7, #19]
 800b26a:	74bb      	strb	r3, [r7, #18]
 800b26c:	e006      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b26e:	bf00      	nop
 800b270:	40021000 	.word	0x40021000
 800b274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b278:	7cfb      	ldrb	r3, [r7, #19]
 800b27a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b27c:	7c7b      	ldrb	r3, [r7, #17]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d105      	bne.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b282:	4b8a      	ldr	r3, [pc, #552]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	4a89      	ldr	r2, [pc, #548]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b28c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b29a:	4b84      	ldr	r3, [pc, #528]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a0:	f023 0203 	bic.w	r2, r3, #3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	4980      	ldr	r1, [pc, #512]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0302 	and.w	r3, r3, #2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b2bc:	4b7b      	ldr	r3, [pc, #492]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c2:	f023 020c 	bic.w	r2, r3, #12
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	4978      	ldr	r1, [pc, #480]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2de:	4b73      	ldr	r3, [pc, #460]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ec:	496f      	ldr	r1, [pc, #444]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00a      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b300:	4b6a      	ldr	r3, [pc, #424]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b306:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30e:	4967      	ldr	r1, [pc, #412]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b310:	4313      	orrs	r3, r2
 800b312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00a      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b322:	4b62      	ldr	r3, [pc, #392]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b330:	495e      	ldr	r1, [pc, #376]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b332:	4313      	orrs	r3, r2
 800b334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00a      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b344:	4b59      	ldr	r3, [pc, #356]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b352:	4956      	ldr	r1, [pc, #344]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b354:	4313      	orrs	r3, r2
 800b356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00a      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b366:	4b51      	ldr	r3, [pc, #324]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b36c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b374:	494d      	ldr	r1, [pc, #308]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b376:	4313      	orrs	r3, r2
 800b378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d028      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b388:	4b48      	ldr	r3, [pc, #288]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	4945      	ldr	r1, [pc, #276]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b398:	4313      	orrs	r3, r2
 800b39a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3a6:	d106      	bne.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3a8:	4b40      	ldr	r3, [pc, #256]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	4a3f      	ldr	r2, [pc, #252]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b3ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3b2:	60d3      	str	r3, [r2, #12]
 800b3b4:	e011      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3be:	d10c      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 f872 	bl	800b4b0 <RCCEx_PLLSAI1_Config>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b3d0:	7cfb      	ldrb	r3, [r7, #19]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800b3d6:	7cfb      	ldrb	r3, [r7, #19]
 800b3d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d028      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3e6:	4b31      	ldr	r3, [pc, #196]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f4:	492d      	ldr	r1, [pc, #180]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b404:	d106      	bne.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b406:	4b29      	ldr	r3, [pc, #164]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	4a28      	ldr	r2, [pc, #160]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b410:	60d3      	str	r3, [r2, #12]
 800b412:	e011      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b41c:	d10c      	bne.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3304      	adds	r3, #4
 800b422:	2101      	movs	r1, #1
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f843 	bl	800b4b0 <RCCEx_PLLSAI1_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b42e:	7cfb      	ldrb	r3, [r7, #19]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800b434:	7cfb      	ldrb	r3, [r7, #19]
 800b436:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01c      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b444:	4b19      	ldr	r3, [pc, #100]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b44a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b452:	4916      	ldr	r1, [pc, #88]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b454:	4313      	orrs	r3, r2
 800b456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b45e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b462:	d10c      	bne.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3304      	adds	r3, #4
 800b468:	2102      	movs	r1, #2
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f820 	bl	800b4b0 <RCCEx_PLLSAI1_Config>
 800b470:	4603      	mov	r3, r0
 800b472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b474:	7cfb      	ldrb	r3, [r7, #19]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800b47a:	7cfb      	ldrb	r3, [r7, #19]
 800b47c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00a      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b48a:	4b08      	ldr	r3, [pc, #32]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b490:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b498:	4904      	ldr	r1, [pc, #16]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b4a0:	7cbb      	ldrb	r3, [r7, #18]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	40021000 	.word	0x40021000

0800b4b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4be:	4b74      	ldr	r3, [pc, #464]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d018      	beq.n	800b4fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b4ca:	4b71      	ldr	r3, [pc, #452]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	f003 0203 	and.w	r2, r3, #3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d10d      	bne.n	800b4f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
       ||
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b4e2:	4b6b      	ldr	r3, [pc, #428]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	091b      	lsrs	r3, r3, #4
 800b4e8:	f003 0307 	and.w	r3, r3, #7
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
       ||
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d047      	beq.n	800b586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	73fb      	strb	r3, [r7, #15]
 800b4fa:	e044      	b.n	800b586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b03      	cmp	r3, #3
 800b502:	d018      	beq.n	800b536 <RCCEx_PLLSAI1_Config+0x86>
 800b504:	2b03      	cmp	r3, #3
 800b506:	d825      	bhi.n	800b554 <RCCEx_PLLSAI1_Config+0xa4>
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d002      	beq.n	800b512 <RCCEx_PLLSAI1_Config+0x62>
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d009      	beq.n	800b524 <RCCEx_PLLSAI1_Config+0x74>
 800b510:	e020      	b.n	800b554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b512:	4b5f      	ldr	r3, [pc, #380]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d11d      	bne.n	800b55a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b522:	e01a      	b.n	800b55a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b524:	4b5a      	ldr	r3, [pc, #360]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d116      	bne.n	800b55e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b534:	e013      	b.n	800b55e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b536:	4b56      	ldr	r3, [pc, #344]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10f      	bne.n	800b562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b542:	4b53      	ldr	r3, [pc, #332]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b552:	e006      	b.n	800b562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	73fb      	strb	r3, [r7, #15]
      break;
 800b558:	e004      	b.n	800b564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b55a:	bf00      	nop
 800b55c:	e002      	b.n	800b564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b55e:	bf00      	nop
 800b560:	e000      	b.n	800b564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b562:	bf00      	nop
    }

    if(status == HAL_OK)
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10d      	bne.n	800b586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b56a:	4b49      	ldr	r3, [pc, #292]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6819      	ldr	r1, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	011b      	lsls	r3, r3, #4
 800b57e:	430b      	orrs	r3, r1
 800b580:	4943      	ldr	r1, [pc, #268]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b582:	4313      	orrs	r3, r2
 800b584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d17c      	bne.n	800b686 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b58c:	4b40      	ldr	r3, [pc, #256]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a3f      	ldr	r2, [pc, #252]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b598:	f7fd fa98 	bl	8008acc <HAL_GetTick>
 800b59c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b59e:	e009      	b.n	800b5b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b5a0:	f7fd fa94 	bl	8008acc <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d902      	bls.n	800b5b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	73fb      	strb	r3, [r7, #15]
        break;
 800b5b2:	e005      	b.n	800b5c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b5b4:	4b36      	ldr	r3, [pc, #216]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1ef      	bne.n	800b5a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d15f      	bne.n	800b686 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d110      	bne.n	800b5ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5cc:	4b30      	ldr	r3, [pc, #192]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b5d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	6892      	ldr	r2, [r2, #8]
 800b5dc:	0211      	lsls	r1, r2, #8
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68d2      	ldr	r2, [r2, #12]
 800b5e2:	06d2      	lsls	r2, r2, #27
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	492a      	ldr	r1, [pc, #168]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	610b      	str	r3, [r1, #16]
 800b5ec:	e027      	b.n	800b63e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d112      	bne.n	800b61a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5f4:	4b26      	ldr	r3, [pc, #152]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b5fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	6892      	ldr	r2, [r2, #8]
 800b604:	0211      	lsls	r1, r2, #8
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	6912      	ldr	r2, [r2, #16]
 800b60a:	0852      	lsrs	r2, r2, #1
 800b60c:	3a01      	subs	r2, #1
 800b60e:	0552      	lsls	r2, r2, #21
 800b610:	430a      	orrs	r2, r1
 800b612:	491f      	ldr	r1, [pc, #124]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b614:	4313      	orrs	r3, r2
 800b616:	610b      	str	r3, [r1, #16]
 800b618:	e011      	b.n	800b63e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b61a:	4b1d      	ldr	r3, [pc, #116]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6892      	ldr	r2, [r2, #8]
 800b62a:	0211      	lsls	r1, r2, #8
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	6952      	ldr	r2, [r2, #20]
 800b630:	0852      	lsrs	r2, r2, #1
 800b632:	3a01      	subs	r2, #1
 800b634:	0652      	lsls	r2, r2, #25
 800b636:	430a      	orrs	r2, r1
 800b638:	4915      	ldr	r1, [pc, #84]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b63e:	4b14      	ldr	r3, [pc, #80]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a13      	ldr	r2, [pc, #76]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b648:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b64a:	f7fd fa3f 	bl	8008acc <HAL_GetTick>
 800b64e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b650:	e009      	b.n	800b666 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b652:	f7fd fa3b 	bl	8008acc <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d902      	bls.n	800b666 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b660:	2303      	movs	r3, #3
 800b662:	73fb      	strb	r3, [r7, #15]
          break;
 800b664:	e005      	b.n	800b672 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b666:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0ef      	beq.n	800b652 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b67a:	691a      	ldr	r2, [r3, #16]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	699b      	ldr	r3, [r3, #24]
 800b680:	4903      	ldr	r1, [pc, #12]	; (800b690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b682:	4313      	orrs	r3, r2
 800b684:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	40021000 	.word	0x40021000

0800b694 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d079      	beq.n	800b79a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7fc fe60 	bl	8008380 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f003 0310 	and.w	r3, r3, #16
 800b6d2:	2b10      	cmp	r3, #16
 800b6d4:	d058      	beq.n	800b788 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	22ca      	movs	r2, #202	; 0xca
 800b6dc:	625a      	str	r2, [r3, #36]	; 0x24
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2253      	movs	r2, #83	; 0x53
 800b6e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f880 	bl	800b7ec <RTC_EnterInitMode>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d127      	bne.n	800b746 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b708:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6899      	ldr	r1, [r3, #8]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	431a      	orrs	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	68d2      	ldr	r2, [r2, #12]
 800b730:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6919      	ldr	r1, [r3, #16]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	041a      	lsls	r2, r3, #16
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f884 	bl	800b854 <RTC_ExitInitMode>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d113      	bne.n	800b77e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0203 	bic.w	r2, r2, #3
 800b764:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69da      	ldr	r2, [r3, #28]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	431a      	orrs	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	430a      	orrs	r2, r1
 800b77c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	22ff      	movs	r2, #255	; 0xff
 800b784:	625a      	str	r2, [r3, #36]	; 0x24
 800b786:	e001      	b.n	800b78c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d103      	bne.n	800b79a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a0d      	ldr	r2, [pc, #52]	; (800b7e8 <HAL_RTC_WaitForSynchro+0x44>)
 800b7b2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800b7b4:	f7fd f98a 	bl	8008acc <HAL_GetTick>
 800b7b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b7ba:	e009      	b.n	800b7d0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b7bc:	f7fd f986 	bl	8008acc <HAL_GetTick>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7ca:	d901      	bls.n	800b7d0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e007      	b.n	800b7e0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0ee      	beq.n	800b7bc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	0003ff5f 	.word	0x0003ff5f

0800b7ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d120      	bne.n	800b848 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f04f 32ff 	mov.w	r2, #4294967295
 800b80e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b810:	f7fd f95c 	bl	8008acc <HAL_GetTick>
 800b814:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b816:	e00d      	b.n	800b834 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b818:	f7fd f958 	bl	8008acc <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b826:	d905      	bls.n	800b834 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b828:	2303      	movs	r3, #3
 800b82a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2203      	movs	r2, #3
 800b830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d102      	bne.n	800b848 <RTC_EnterInitMode+0x5c>
 800b842:	7bfb      	ldrb	r3, [r7, #15]
 800b844:	2b03      	cmp	r3, #3
 800b846:	d1e7      	bne.n	800b818 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b860:	4b1a      	ldr	r3, [pc, #104]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	4a19      	ldr	r2, [pc, #100]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b86a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b86c:	4b17      	ldr	r3, [pc, #92]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f003 0320 	and.w	r3, r3, #32
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10c      	bne.n	800b892 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ff93 	bl	800b7a4 <HAL_RTC_WaitForSynchro>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d01e      	beq.n	800b8c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2203      	movs	r2, #3
 800b888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	73fb      	strb	r3, [r7, #15]
 800b890:	e017      	b.n	800b8c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b892:	4b0e      	ldr	r3, [pc, #56]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	4a0d      	ldr	r2, [pc, #52]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b898:	f023 0320 	bic.w	r3, r3, #32
 800b89c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7ff ff80 	bl	800b7a4 <HAL_RTC_WaitForSynchro>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	4a04      	ldr	r2, [pc, #16]	; (800b8cc <RTC_ExitInitMode+0x78>)
 800b8bc:	f043 0320 	orr.w	r3, r3, #32
 800b8c0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	40002800 	.word	0x40002800

0800b8d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e054      	b.n	800b98c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d111      	bne.n	800b912 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa84 	bl	800be04 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a23      	ldr	r2, [pc, #140]	; (800b994 <HAL_TIM_Base_Init+0xc4>)
 800b908:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2202      	movs	r2, #2
 800b916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3304      	adds	r3, #4
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f000 fa09 	bl	800bd3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	080083e1 	.word	0x080083e1

0800b998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d001      	beq.n	800b9b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e03b      	b.n	800ba28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f042 0201 	orr.w	r2, r2, #1
 800b9c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a19      	ldr	r2, [pc, #100]	; (800ba34 <HAL_TIM_Base_Start_IT+0x9c>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d009      	beq.n	800b9e6 <HAL_TIM_Base_Start_IT+0x4e>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9da:	d004      	beq.n	800b9e6 <HAL_TIM_Base_Start_IT+0x4e>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a15      	ldr	r2, [pc, #84]	; (800ba38 <HAL_TIM_Base_Start_IT+0xa0>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d115      	bne.n	800ba12 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	689a      	ldr	r2, [r3, #8]
 800b9ec:	4b13      	ldr	r3, [pc, #76]	; (800ba3c <HAL_TIM_Base_Start_IT+0xa4>)
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b06      	cmp	r3, #6
 800b9f6:	d015      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x8c>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fe:	d011      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0201 	orr.w	r2, r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba10:	e008      	b.n	800ba24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f042 0201 	orr.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e000      	b.n	800ba26 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	40012c00 	.word	0x40012c00
 800ba38:	40014000 	.word	0x40014000
 800ba3c:	00010007 	.word	0x00010007

0800ba40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d026      	beq.n	800bab0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f003 0302 	and.w	r3, r3, #2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d021      	beq.n	800bab0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f06f 0202 	mvn.w	r2, #2
 800ba74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	4798      	blx	r3
 800ba94:	e009      	b.n	800baaa <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d026      	beq.n	800bb08 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d021      	beq.n	800bb08 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f06f 0204 	mvn.w	r2, #4
 800bacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2202      	movs	r2, #2
 800bad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d005      	beq.n	800baee <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	4798      	blx	r3
 800baec:	e009      	b.n	800bb02 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f003 0308 	and.w	r3, r3, #8
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d026      	beq.n	800bb60 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d021      	beq.n	800bb60 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0208 	mvn.w	r2, #8
 800bb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2204      	movs	r2, #4
 800bb2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	f003 0303 	and.w	r3, r3, #3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	4798      	blx	r3
 800bb44:	e009      	b.n	800bb5a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	f003 0310 	and.w	r3, r3, #16
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d026      	beq.n	800bbb8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f003 0310 	and.w	r3, r3, #16
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d021      	beq.n	800bbb8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f06f 0210 	mvn.w	r2, #16
 800bb7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2208      	movs	r2, #8
 800bb82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	4798      	blx	r3
 800bb9c:	e009      	b.n	800bbb2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00e      	beq.n	800bbe0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d009      	beq.n	800bbe0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f06f 0201 	mvn.w	r2, #1
 800bbd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00e      	beq.n	800bc08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00e      	beq.n	800bc30 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d009      	beq.n	800bc30 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00e      	beq.n	800bc58 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d009      	beq.n	800bc58 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	f003 0320 	and.w	r3, r3, #32
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00e      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x240>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f003 0320 	and.w	r3, r3, #32
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d009      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x240>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f06f 0220 	mvn.w	r2, #32
 800bc74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc80:	bf00      	nop
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a2a      	ldr	r2, [pc, #168]	; (800bdf8 <TIM_Base_SetConfig+0xbc>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d003      	beq.n	800bd5c <TIM_Base_SetConfig+0x20>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd5a:	d108      	bne.n	800bd6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a21      	ldr	r2, [pc, #132]	; (800bdf8 <TIM_Base_SetConfig+0xbc>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00b      	beq.n	800bd8e <TIM_Base_SetConfig+0x52>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd7c:	d007      	beq.n	800bd8e <TIM_Base_SetConfig+0x52>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a1e      	ldr	r2, [pc, #120]	; (800bdfc <TIM_Base_SetConfig+0xc0>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d003      	beq.n	800bd8e <TIM_Base_SetConfig+0x52>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a1d      	ldr	r2, [pc, #116]	; (800be00 <TIM_Base_SetConfig+0xc4>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d108      	bne.n	800bda0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a0c      	ldr	r2, [pc, #48]	; (800bdf8 <TIM_Base_SetConfig+0xbc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d007      	beq.n	800bddc <TIM_Base_SetConfig+0xa0>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a0b      	ldr	r2, [pc, #44]	; (800bdfc <TIM_Base_SetConfig+0xc0>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d003      	beq.n	800bddc <TIM_Base_SetConfig+0xa0>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a0a      	ldr	r2, [pc, #40]	; (800be00 <TIM_Base_SetConfig+0xc4>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d103      	bne.n	800bde4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	691a      	ldr	r2, [r3, #16]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	615a      	str	r2, [r3, #20]
}
 800bdea:	bf00      	nop
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	40012c00 	.word	0x40012c00
 800bdfc:	40014000 	.word	0x40014000
 800be00:	40014400 	.word	0x40014400

0800be04 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a1e      	ldr	r2, [pc, #120]	; (800be88 <TIM_ResetCallback+0x84>)
 800be10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a1d      	ldr	r2, [pc, #116]	; (800be8c <TIM_ResetCallback+0x88>)
 800be18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a1c      	ldr	r2, [pc, #112]	; (800be90 <TIM_ResetCallback+0x8c>)
 800be20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <TIM_ResetCallback+0x90>)
 800be28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a1a      	ldr	r2, [pc, #104]	; (800be98 <TIM_ResetCallback+0x94>)
 800be30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a19      	ldr	r2, [pc, #100]	; (800be9c <TIM_ResetCallback+0x98>)
 800be38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a18      	ldr	r2, [pc, #96]	; (800bea0 <TIM_ResetCallback+0x9c>)
 800be40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a17      	ldr	r2, [pc, #92]	; (800bea4 <TIM_ResetCallback+0xa0>)
 800be48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a16      	ldr	r2, [pc, #88]	; (800bea8 <TIM_ResetCallback+0xa4>)
 800be50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a15      	ldr	r2, [pc, #84]	; (800beac <TIM_ResetCallback+0xa8>)
 800be58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a14      	ldr	r2, [pc, #80]	; (800beb0 <TIM_ResetCallback+0xac>)
 800be60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a13      	ldr	r2, [pc, #76]	; (800beb4 <TIM_ResetCallback+0xb0>)
 800be68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a12      	ldr	r2, [pc, #72]	; (800beb8 <TIM_ResetCallback+0xb4>)
 800be70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a11      	ldr	r2, [pc, #68]	; (800bebc <TIM_ResetCallback+0xb8>)
 800be78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	08007ce9 	.word	0x08007ce9
 800be8c:	0800bc89 	.word	0x0800bc89
 800be90:	0800bd01 	.word	0x0800bd01
 800be94:	0800bd15 	.word	0x0800bd15
 800be98:	0800bcb1 	.word	0x0800bcb1
 800be9c:	0800bcc5 	.word	0x0800bcc5
 800bea0:	0800bc9d 	.word	0x0800bc9d
 800bea4:	0800bcd9 	.word	0x0800bcd9
 800bea8:	0800bced 	.word	0x0800bced
 800beac:	0800bd29 	.word	0x0800bd29
 800beb0:	0800bf8d 	.word	0x0800bf8d
 800beb4:	0800bfa1 	.word	0x0800bfa1
 800beb8:	0800bfb5 	.word	0x0800bfb5
 800bebc:	0800bfc9 	.word	0x0800bfc9

0800bec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d101      	bne.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bed4:	2302      	movs	r3, #2
 800bed6:	e04f      	b.n	800bf78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2202      	movs	r2, #2
 800bee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a21      	ldr	r2, [pc, #132]	; (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d108      	bne.n	800bf14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a14      	ldr	r2, [pc, #80]	; (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d009      	beq.n	800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf40:	d004      	beq.n	800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a10      	ldr	r2, [pc, #64]	; (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d10c      	bne.n	800bf66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	40012c00 	.word	0x40012c00
 800bf88:	40014000 	.word	0x40014000

0800bf8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e040      	b.n	800c070 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7fc fa14 	bl	800842c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2224      	movs	r2, #36	; 0x24
 800c008:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f022 0201 	bic.w	r2, r2, #1
 800c018:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fe30 	bl	800cc88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fc01 	bl	800c830 <UART_SetConfig>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b01      	cmp	r3, #1
 800c032:	d101      	bne.n	800c038 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e01b      	b.n	800c070 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	689a      	ldr	r2, [r3, #8]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f042 0201 	orr.w	r2, r2, #1
 800c066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 feaf 	bl	800cdcc <UART_CheckIdleState>
 800c06e:	4603      	mov	r3, r0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	4613      	mov	r3, r2
 800c084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	d165      	bne.n	800c15a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_UART_Transmit_DMA+0x22>
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e05e      	b.n	800c15c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	88fa      	ldrh	r2, [r7, #6]
 800c0a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	88fa      	ldrh	r2, [r7, #6]
 800c0b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2221      	movs	r2, #33	; 0x21
 800c0c0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d027      	beq.n	800c11a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ce:	4a25      	ldr	r2, [pc, #148]	; (800c164 <HAL_UART_Transmit_DMA+0xec>)
 800c0d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d6:	4a24      	ldr	r2, [pc, #144]	; (800c168 <HAL_UART_Transmit_DMA+0xf0>)
 800c0d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0de:	4a23      	ldr	r2, [pc, #140]	; (800c16c <HAL_UART_Transmit_DMA+0xf4>)
 800c0e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3328      	adds	r3, #40	; 0x28
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	88fb      	ldrh	r3, [r7, #6]
 800c0fe:	f7fd fd7b 	bl	8009bf8 <HAL_DMA_Start_IT>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d008      	beq.n	800c11a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2210      	movs	r2, #16
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2220      	movs	r2, #32
 800c114:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e020      	b.n	800c15c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2240      	movs	r2, #64	; 0x40
 800c120:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	613b      	str	r3, [r7, #16]
   return(result);
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3308      	adds	r3, #8
 800c140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c142:	623a      	str	r2, [r7, #32]
 800c144:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	69f9      	ldr	r1, [r7, #28]
 800c148:	6a3a      	ldr	r2, [r7, #32]
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e5      	bne.n	800c122 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e000      	b.n	800c15c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c15a:	2302      	movs	r3, #2
  }
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3728      	adds	r7, #40	; 0x28
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	0800d241 	.word	0x0800d241
 800c168:	0800d2db 	.word	0x0800d2db
 800c16c:	0800d461 	.word	0x0800d461

0800c170 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b08a      	sub	sp, #40	; 0x28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c184:	2b20      	cmp	r3, #32
 800c186:	d137      	bne.n	800c1f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <HAL_UART_Receive_DMA+0x24>
 800c18e:	88fb      	ldrh	r3, [r7, #6]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	e030      	b.n	800c1fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a18      	ldr	r2, [pc, #96]	; (800c204 <HAL_UART_Receive_DMA+0x94>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d01f      	beq.n	800c1e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d018      	beq.n	800c1e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	623b      	str	r3, [r7, #32]
 800c1d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	6a3a      	ldr	r2, [r7, #32]
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e6      	bne.n	800c1b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c1e8:	88fb      	ldrh	r3, [r7, #6]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 fefc 	bl	800cfec <UART_Start_Receive_DMA>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	e000      	b.n	800c1fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c1f8:	2302      	movs	r3, #2
  }
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3728      	adds	r7, #40	; 0x28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	40008000 	.word	0x40008000

0800c208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b0ba      	sub	sp, #232	; 0xe8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c22e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c232:	f640 030f 	movw	r3, #2063	; 0x80f
 800c236:	4013      	ands	r3, r2
 800c238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c23c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c240:	2b00      	cmp	r3, #0
 800c242:	d115      	bne.n	800c270 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c248:	f003 0320 	and.w	r3, r3, #32
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00f      	beq.n	800c270 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c254:	f003 0320 	and.w	r3, r3, #32
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d009      	beq.n	800c270 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 82ae 	beq.w	800c7c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
      }
      return;
 800c26e:	e2a8      	b.n	800c7c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 8117 	beq.w	800c4a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d106      	bne.n	800c294 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c28a:	4b85      	ldr	r3, [pc, #532]	; (800c4a0 <HAL_UART_IRQHandler+0x298>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 810a 	beq.w	800c4a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d011      	beq.n	800c2c4 <HAL_UART_IRQHandler+0xbc>
 800c2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ba:	f043 0201 	orr.w	r2, r3, #1
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d011      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xec>
 800c2d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ea:	f043 0204 	orr.w	r2, r3, #4
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2f8:	f003 0304 	and.w	r3, r3, #4
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d011      	beq.n	800c324 <HAL_UART_IRQHandler+0x11c>
 800c300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2204      	movs	r2, #4
 800c312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31a:	f043 0202 	orr.w	r2, r3, #2
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c328:	f003 0308 	and.w	r3, r3, #8
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d017      	beq.n	800c360 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c334:	f003 0320 	and.w	r3, r3, #32
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d105      	bne.n	800c348 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c33c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c340:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2208      	movs	r2, #8
 800c34e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c356:	f043 0208 	orr.w	r2, r3, #8
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d012      	beq.n	800c392 <HAL_UART_IRQHandler+0x18a>
 800c36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00c      	beq.n	800c392 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c388:	f043 0220 	orr.w	r2, r3, #32
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8214 	beq.w	800c7c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00d      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ae:	f003 0320 	and.w	r3, r3, #32
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d007      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d003      	beq.n	800c3c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3da:	2b40      	cmp	r3, #64	; 0x40
 800c3dc:	d005      	beq.n	800c3ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c3de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d04f      	beq.n	800c48a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fec4 	bl	800d178 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fa:	2b40      	cmp	r3, #64	; 0x40
 800c3fc:	d141      	bne.n	800c482 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3308      	adds	r3, #8
 800c404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c40c:	e853 3f00 	ldrex	r3, [r3]
 800c410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c41c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3308      	adds	r3, #8
 800c426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c42a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c42e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c43a:	e841 2300 	strex	r3, r2, [r1]
 800c43e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1d9      	bne.n	800c3fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d013      	beq.n	800c47a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c456:	4a13      	ldr	r2, [pc, #76]	; (800c4a4 <HAL_UART_IRQHandler+0x29c>)
 800c458:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fd fc68 	bl	8009d34 <HAL_DMA_Abort_IT>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d017      	beq.n	800c49a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c478:	e00f      	b.n	800c49a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f9c2 	bl	800c804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c480:	e00b      	b.n	800c49a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f9be 	bl	800c804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c488:	e007      	b.n	800c49a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f9ba 	bl	800c804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c498:	e195      	b.n	800c7c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c49a:	bf00      	nop
    return;
 800c49c:	e193      	b.n	800c7c6 <HAL_UART_IRQHandler+0x5be>
 800c49e:	bf00      	nop
 800c4a0:	04000120 	.word	0x04000120
 800c4a4:	0800d4df 	.word	0x0800d4df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	f040 814e 	bne.w	800c74e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b6:	f003 0310 	and.w	r3, r3, #16
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 8147 	beq.w	800c74e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 8140 	beq.w	800c74e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2210      	movs	r2, #16
 800c4d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e0:	2b40      	cmp	r3, #64	; 0x40
 800c4e2:	f040 80b8 	bne.w	800c656 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 8167 	beq.w	800c7ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c506:	429a      	cmp	r2, r3
 800c508:	f080 815f 	bcs.w	800c7ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c512:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 0320 	and.w	r3, r3, #32
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 8086 	bne.w	800c634 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c53c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c556:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c55e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c56a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1da      	bne.n	800c528 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3308      	adds	r3, #8
 800c578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c57c:	e853 3f00 	ldrex	r3, [r3]
 800c580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c584:	f023 0301 	bic.w	r3, r3, #1
 800c588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c59a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c59e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e1      	bne.n	800c572 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e3      	bne.n	800c5ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5fc:	e853 3f00 	ldrex	r3, [r3]
 800c600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c604:	f023 0310 	bic.w	r3, r3, #16
 800c608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	461a      	mov	r2, r3
 800c612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c616:	65bb      	str	r3, [r7, #88]	; 0x58
 800c618:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e4      	bne.n	800c5f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fd fb42 	bl	8009cb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2202      	movs	r2, #2
 800c638:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c646:	b29b      	uxth	r3, r3
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f8e2 	bl	800c818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c654:	e0b9      	b.n	800c7ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c662:	b29b      	uxth	r3, r3
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c670:	b29b      	uxth	r3, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	f000 80ab 	beq.w	800c7ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 80a6 	beq.w	800c7ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	e853 3f00 	ldrex	r3, [r3]
 800c68e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ac:	e841 2300 	strex	r3, r2, [r1]
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e4      	bne.n	800c682 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3308      	adds	r3, #8
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	e853 3f00 	ldrex	r3, [r3]
 800c6c6:	623b      	str	r3, [r7, #32]
   return(result);
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	f023 0301 	bic.w	r3, r3, #1
 800c6ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3308      	adds	r3, #8
 800c6d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6dc:	633a      	str	r2, [r7, #48]	; 0x30
 800c6de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e4:	e841 2300 	strex	r3, r2, [r1]
 800c6e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1e3      	bne.n	800c6b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2220      	movs	r2, #32
 800c6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	e853 3f00 	ldrex	r3, [r3]
 800c710:	60fb      	str	r3, [r7, #12]
   return(result);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f023 0310 	bic.w	r3, r3, #16
 800c718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	461a      	mov	r2, r3
 800c722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c726:	61fb      	str	r3, [r7, #28]
 800c728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	69b9      	ldr	r1, [r7, #24]
 800c72c:	69fa      	ldr	r2, [r7, #28]
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	617b      	str	r3, [r7, #20]
   return(result);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e4      	bne.n	800c704 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2202      	movs	r2, #2
 800c73e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f866 	bl	800c818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c74c:	e03f      	b.n	800c7ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00e      	beq.n	800c778 <HAL_UART_IRQHandler+0x570>
 800c75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d008      	beq.n	800c778 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c76e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fef4 	bl	800d55e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c776:	e02d      	b.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c77c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00e      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d008      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01c      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	4798      	blx	r3
    }
    return;
 800c7a0:	e017      	b.n	800c7d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d012      	beq.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
 800c7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00c      	beq.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fea5 	bl	800d50a <UART_EndTransmit_IT>
    return;
 800c7c0:	e008      	b.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c7c2:	bf00      	nop
 800c7c4:	e006      	b.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c7c6:	bf00      	nop
 800c7c8:	e004      	b.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c7ca:	bf00      	nop
 800c7cc:	e002      	b.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c7ce:	bf00      	nop
 800c7d0:	e000      	b.n	800c7d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c7d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c7d4:	37e8      	adds	r7, #232	; 0xe8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop

0800c7dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c824:	bf00      	nop
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c834:	b08a      	sub	sp, #40	; 0x28
 800c836:	af00      	add	r7, sp, #0
 800c838:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	431a      	orrs	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	431a      	orrs	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	4313      	orrs	r3, r2
 800c856:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	4bb4      	ldr	r3, [pc, #720]	; (800cb30 <UART_SetConfig+0x300>)
 800c860:	4013      	ands	r3, r2
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	6812      	ldr	r2, [r2, #0]
 800c866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c868:	430b      	orrs	r3, r1
 800c86a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	68da      	ldr	r2, [r3, #12]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4aa9      	ldr	r2, [pc, #676]	; (800cb34 <UART_SetConfig+0x304>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d004      	beq.n	800c89c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c898:	4313      	orrs	r3, r2
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4aa0      	ldr	r2, [pc, #640]	; (800cb38 <UART_SetConfig+0x308>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d126      	bne.n	800c908 <UART_SetConfig+0xd8>
 800c8ba:	4ba0      	ldr	r3, [pc, #640]	; (800cb3c <UART_SetConfig+0x30c>)
 800c8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8c0:	f003 0303 	and.w	r3, r3, #3
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d81b      	bhi.n	800c900 <UART_SetConfig+0xd0>
 800c8c8:	a201      	add	r2, pc, #4	; (adr r2, 800c8d0 <UART_SetConfig+0xa0>)
 800c8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ce:	bf00      	nop
 800c8d0:	0800c8e1 	.word	0x0800c8e1
 800c8d4:	0800c8f1 	.word	0x0800c8f1
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c8f9 	.word	0x0800c8f9
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8e6:	e080      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8ee:	e07c      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c8f0:	2304      	movs	r3, #4
 800c8f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8f6:	e078      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8fe:	e074      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c900:	2310      	movs	r3, #16
 800c902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c906:	e070      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a8c      	ldr	r2, [pc, #560]	; (800cb40 <UART_SetConfig+0x310>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d138      	bne.n	800c984 <UART_SetConfig+0x154>
 800c912:	4b8a      	ldr	r3, [pc, #552]	; (800cb3c <UART_SetConfig+0x30c>)
 800c914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c918:	f003 030c 	and.w	r3, r3, #12
 800c91c:	2b0c      	cmp	r3, #12
 800c91e:	d82d      	bhi.n	800c97c <UART_SetConfig+0x14c>
 800c920:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <UART_SetConfig+0xf8>)
 800c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c95d 	.word	0x0800c95d
 800c92c:	0800c97d 	.word	0x0800c97d
 800c930:	0800c97d 	.word	0x0800c97d
 800c934:	0800c97d 	.word	0x0800c97d
 800c938:	0800c96d 	.word	0x0800c96d
 800c93c:	0800c97d 	.word	0x0800c97d
 800c940:	0800c97d 	.word	0x0800c97d
 800c944:	0800c97d 	.word	0x0800c97d
 800c948:	0800c965 	.word	0x0800c965
 800c94c:	0800c97d 	.word	0x0800c97d
 800c950:	0800c97d 	.word	0x0800c97d
 800c954:	0800c97d 	.word	0x0800c97d
 800c958:	0800c975 	.word	0x0800c975
 800c95c:	2300      	movs	r3, #0
 800c95e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c962:	e042      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c964:	2302      	movs	r3, #2
 800c966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c96a:	e03e      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c972:	e03a      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c97a:	e036      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c982:	e032      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a6a      	ldr	r2, [pc, #424]	; (800cb34 <UART_SetConfig+0x304>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d12a      	bne.n	800c9e4 <UART_SetConfig+0x1b4>
 800c98e:	4b6b      	ldr	r3, [pc, #428]	; (800cb3c <UART_SetConfig+0x30c>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c99c:	d01a      	beq.n	800c9d4 <UART_SetConfig+0x1a4>
 800c99e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9a2:	d81b      	bhi.n	800c9dc <UART_SetConfig+0x1ac>
 800c9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9a8:	d00c      	beq.n	800c9c4 <UART_SetConfig+0x194>
 800c9aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9ae:	d815      	bhi.n	800c9dc <UART_SetConfig+0x1ac>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <UART_SetConfig+0x18c>
 800c9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9b8:	d008      	beq.n	800c9cc <UART_SetConfig+0x19c>
 800c9ba:	e00f      	b.n	800c9dc <UART_SetConfig+0x1ac>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9c2:	e012      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9ca:	e00e      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c9cc:	2304      	movs	r3, #4
 800c9ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9d2:	e00a      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c9d4:	2308      	movs	r3, #8
 800c9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9da:	e006      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c9dc:	2310      	movs	r3, #16
 800c9de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9e2:	e002      	b.n	800c9ea <UART_SetConfig+0x1ba>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a51      	ldr	r2, [pc, #324]	; (800cb34 <UART_SetConfig+0x304>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d17a      	bne.n	800caea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c9f8:	2b08      	cmp	r3, #8
 800c9fa:	d824      	bhi.n	800ca46 <UART_SetConfig+0x216>
 800c9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <UART_SetConfig+0x1d4>)
 800c9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca02:	bf00      	nop
 800ca04:	0800ca29 	.word	0x0800ca29
 800ca08:	0800ca47 	.word	0x0800ca47
 800ca0c:	0800ca31 	.word	0x0800ca31
 800ca10:	0800ca47 	.word	0x0800ca47
 800ca14:	0800ca37 	.word	0x0800ca37
 800ca18:	0800ca47 	.word	0x0800ca47
 800ca1c:	0800ca47 	.word	0x0800ca47
 800ca20:	0800ca47 	.word	0x0800ca47
 800ca24:	0800ca3f 	.word	0x0800ca3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca28:	f7fe fac0 	bl	800afac <HAL_RCC_GetPCLK1Freq>
 800ca2c:	61f8      	str	r0, [r7, #28]
        break;
 800ca2e:	e010      	b.n	800ca52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca30:	4b44      	ldr	r3, [pc, #272]	; (800cb44 <UART_SetConfig+0x314>)
 800ca32:	61fb      	str	r3, [r7, #28]
        break;
 800ca34:	e00d      	b.n	800ca52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca36:	f7fe fa21 	bl	800ae7c <HAL_RCC_GetSysClockFreq>
 800ca3a:	61f8      	str	r0, [r7, #28]
        break;
 800ca3c:	e009      	b.n	800ca52 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca42:	61fb      	str	r3, [r7, #28]
        break;
 800ca44:	e005      	b.n	800ca52 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ca50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 8107 	beq.w	800cc68 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	4413      	add	r3, r2
 800ca64:	69fa      	ldr	r2, [r7, #28]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d305      	bcc.n	800ca76 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ca70:	69fa      	ldr	r2, [r7, #28]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d903      	bls.n	800ca7e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ca7c:	e0f4      	b.n	800cc68 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	2200      	movs	r2, #0
 800ca82:	461c      	mov	r4, r3
 800ca84:	4615      	mov	r5, r2
 800ca86:	f04f 0200 	mov.w	r2, #0
 800ca8a:	f04f 0300 	mov.w	r3, #0
 800ca8e:	022b      	lsls	r3, r5, #8
 800ca90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ca94:	0222      	lsls	r2, r4, #8
 800ca96:	68f9      	ldr	r1, [r7, #12]
 800ca98:	6849      	ldr	r1, [r1, #4]
 800ca9a:	0849      	lsrs	r1, r1, #1
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	4688      	mov	r8, r1
 800caa0:	4681      	mov	r9, r0
 800caa2:	eb12 0a08 	adds.w	sl, r2, r8
 800caa6:	eb43 0b09 	adc.w	fp, r3, r9
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	603b      	str	r3, [r7, #0]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab8:	4650      	mov	r0, sl
 800caba:	4659      	mov	r1, fp
 800cabc:	f7f3 fbe0 	bl	8000280 <__aeabi_uldivmod>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4613      	mov	r3, r2
 800cac6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cace:	d308      	bcc.n	800cae2 <UART_SetConfig+0x2b2>
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad6:	d204      	bcs.n	800cae2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	69ba      	ldr	r2, [r7, #24]
 800cade:	60da      	str	r2, [r3, #12]
 800cae0:	e0c2      	b.n	800cc68 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cae8:	e0be      	b.n	800cc68 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	69db      	ldr	r3, [r3, #28]
 800caee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf2:	d16a      	bne.n	800cbca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800caf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800caf8:	2b08      	cmp	r3, #8
 800cafa:	d834      	bhi.n	800cb66 <UART_SetConfig+0x336>
 800cafc:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <UART_SetConfig+0x2d4>)
 800cafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb02:	bf00      	nop
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb49 	.word	0x0800cb49
 800cb0c:	0800cb51 	.word	0x0800cb51
 800cb10:	0800cb67 	.word	0x0800cb67
 800cb14:	0800cb57 	.word	0x0800cb57
 800cb18:	0800cb67 	.word	0x0800cb67
 800cb1c:	0800cb67 	.word	0x0800cb67
 800cb20:	0800cb67 	.word	0x0800cb67
 800cb24:	0800cb5f 	.word	0x0800cb5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb28:	f7fe fa40 	bl	800afac <HAL_RCC_GetPCLK1Freq>
 800cb2c:	61f8      	str	r0, [r7, #28]
        break;
 800cb2e:	e020      	b.n	800cb72 <UART_SetConfig+0x342>
 800cb30:	efff69f3 	.word	0xefff69f3
 800cb34:	40008000 	.word	0x40008000
 800cb38:	40013800 	.word	0x40013800
 800cb3c:	40021000 	.word	0x40021000
 800cb40:	40004400 	.word	0x40004400
 800cb44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb48:	f7fe fa46 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 800cb4c:	61f8      	str	r0, [r7, #28]
        break;
 800cb4e:	e010      	b.n	800cb72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb50:	4b4c      	ldr	r3, [pc, #304]	; (800cc84 <UART_SetConfig+0x454>)
 800cb52:	61fb      	str	r3, [r7, #28]
        break;
 800cb54:	e00d      	b.n	800cb72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb56:	f7fe f991 	bl	800ae7c <HAL_RCC_GetSysClockFreq>
 800cb5a:	61f8      	str	r0, [r7, #28]
        break;
 800cb5c:	e009      	b.n	800cb72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb62:	61fb      	str	r3, [r7, #28]
        break;
 800cb64:	e005      	b.n	800cb72 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cb70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d077      	beq.n	800cc68 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	005a      	lsls	r2, r3, #1
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	085b      	lsrs	r3, r3, #1
 800cb82:	441a      	add	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	2b0f      	cmp	r3, #15
 800cb92:	d916      	bls.n	800cbc2 <UART_SetConfig+0x392>
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb9a:	d212      	bcs.n	800cbc2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	f023 030f 	bic.w	r3, r3, #15
 800cba4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	085b      	lsrs	r3, r3, #1
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	f003 0307 	and.w	r3, r3, #7
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	8afb      	ldrh	r3, [r7, #22]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	8afa      	ldrh	r2, [r7, #22]
 800cbbe:	60da      	str	r2, [r3, #12]
 800cbc0:	e052      	b.n	800cc68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cbc8:	e04e      	b.n	800cc68 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbce:	2b08      	cmp	r3, #8
 800cbd0:	d827      	bhi.n	800cc22 <UART_SetConfig+0x3f2>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <UART_SetConfig+0x3a8>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cbfd 	.word	0x0800cbfd
 800cbdc:	0800cc05 	.word	0x0800cc05
 800cbe0:	0800cc0d 	.word	0x0800cc0d
 800cbe4:	0800cc23 	.word	0x0800cc23
 800cbe8:	0800cc13 	.word	0x0800cc13
 800cbec:	0800cc23 	.word	0x0800cc23
 800cbf0:	0800cc23 	.word	0x0800cc23
 800cbf4:	0800cc23 	.word	0x0800cc23
 800cbf8:	0800cc1b 	.word	0x0800cc1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbfc:	f7fe f9d6 	bl	800afac <HAL_RCC_GetPCLK1Freq>
 800cc00:	61f8      	str	r0, [r7, #28]
        break;
 800cc02:	e014      	b.n	800cc2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc04:	f7fe f9e8 	bl	800afd8 <HAL_RCC_GetPCLK2Freq>
 800cc08:	61f8      	str	r0, [r7, #28]
        break;
 800cc0a:	e010      	b.n	800cc2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc0c:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <UART_SetConfig+0x454>)
 800cc0e:	61fb      	str	r3, [r7, #28]
        break;
 800cc10:	e00d      	b.n	800cc2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc12:	f7fe f933 	bl	800ae7c <HAL_RCC_GetSysClockFreq>
 800cc16:	61f8      	str	r0, [r7, #28]
        break;
 800cc18:	e009      	b.n	800cc2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc1e:	61fb      	str	r3, [r7, #28]
        break;
 800cc20:	e005      	b.n	800cc2e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800cc22:	2300      	movs	r3, #0
 800cc24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cc2c:	bf00      	nop
    }

    if (pclk != 0U)
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d019      	beq.n	800cc68 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	085a      	lsrs	r2, r3, #1
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	441a      	add	r2, r3
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2b0f      	cmp	r3, #15
 800cc4c:	d909      	bls.n	800cc62 <UART_SetConfig+0x432>
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc54:	d205      	bcs.n	800cc62 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60da      	str	r2, [r3, #12]
 800cc60:	e002      	b.n	800cc68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cc74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3728      	adds	r7, #40	; 0x28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc82:	bf00      	nop
 800cc84:	00f42400 	.word	0x00f42400

0800cc88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00a      	beq.n	800ccb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	430a      	orrs	r2, r1
 800ccb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00a      	beq.n	800ccd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	430a      	orrs	r2, r1
 800ccd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	f003 0302 	and.w	r3, r3, #2
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00a      	beq.n	800ccf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfa:	f003 0304 	and.w	r3, r3, #4
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00a      	beq.n	800cd18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	430a      	orrs	r2, r1
 800cd16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1c:	f003 0310 	and.w	r3, r3, #16
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00a      	beq.n	800cd3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3e:	f003 0320 	and.w	r3, r3, #32
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d01a      	beq.n	800cd9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	430a      	orrs	r2, r1
 800cd7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd86:	d10a      	bne.n	800cd9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00a      	beq.n	800cdc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	430a      	orrs	r2, r1
 800cdbe:	605a      	str	r2, [r3, #4]
  }
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b098      	sub	sp, #96	; 0x60
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cddc:	f7fb fe76 	bl	8008acc <HAL_GetTick>
 800cde0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0308 	and.w	r3, r3, #8
 800cdec:	2b08      	cmp	r3, #8
 800cdee:	d12e      	bne.n	800ce4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 f88c 	bl	800cf1c <UART_WaitOnFlagUntilTimeout>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d021      	beq.n	800ce4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	e853 3f00 	ldrex	r3, [r3]
 800ce16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	461a      	mov	r2, r3
 800ce26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce28:	647b      	str	r3, [r7, #68]	; 0x44
 800ce2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce30:	e841 2300 	strex	r3, r2, [r1]
 800ce34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1e6      	bne.n	800ce0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2220      	movs	r2, #32
 800ce40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	e062      	b.n	800cf14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0304 	and.w	r3, r3, #4
 800ce58:	2b04      	cmp	r3, #4
 800ce5a:	d149      	bne.n	800cef0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce64:	2200      	movs	r2, #0
 800ce66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f856 	bl	800cf1c <UART_WaitOnFlagUntilTimeout>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d03c      	beq.n	800cef0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	e853 3f00 	ldrex	r3, [r3]
 800ce82:	623b      	str	r3, [r7, #32]
   return(result);
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	461a      	mov	r2, r3
 800ce92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce94:	633b      	str	r3, [r7, #48]	; 0x30
 800ce96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce9c:	e841 2300 	strex	r3, r2, [r1]
 800cea0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1e6      	bne.n	800ce76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3308      	adds	r3, #8
 800ceae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f023 0301 	bic.w	r3, r3, #1
 800cebe:	64bb      	str	r3, [r7, #72]	; 0x48
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3308      	adds	r3, #8
 800cec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cec8:	61fa      	str	r2, [r7, #28]
 800ceca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	69b9      	ldr	r1, [r7, #24]
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	617b      	str	r3, [r7, #20]
   return(result);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e5      	bne.n	800cea8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2220      	movs	r2, #32
 800cee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e011      	b.n	800cf14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2220      	movs	r2, #32
 800cef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2220      	movs	r2, #32
 800cefa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3758      	adds	r7, #88	; 0x58
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf2c:	e049      	b.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf34:	d045      	beq.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf36:	f7fb fdc9 	bl	8008acc <HAL_GetTick>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d302      	bcc.n	800cf4c <UART_WaitOnFlagUntilTimeout+0x30>
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	e048      	b.n	800cfe2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0304 	and.w	r3, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d031      	beq.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b08      	cmp	r3, #8
 800cf6a:	d110      	bne.n	800cf8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2208      	movs	r2, #8
 800cf72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 f8ff 	bl	800d178 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2208      	movs	r2, #8
 800cf7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e029      	b.n	800cfe2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	69db      	ldr	r3, [r3, #28]
 800cf94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf9c:	d111      	bne.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 f8e5 	bl	800d178 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2220      	movs	r2, #32
 800cfb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e00f      	b.n	800cfe2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	69da      	ldr	r2, [r3, #28]
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	bf0c      	ite	eq
 800cfd2:	2301      	moveq	r3, #1
 800cfd4:	2300      	movne	r3, #0
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	461a      	mov	r2, r3
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d0a6      	beq.n	800cf2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b096      	sub	sp, #88	; 0x58
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	68ba      	ldr	r2, [r7, #8]
 800cffe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	88fa      	ldrh	r2, [r7, #6]
 800d004:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2222      	movs	r2, #34	; 0x22
 800d014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d028      	beq.n	800d072 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d024:	4a3e      	ldr	r2, [pc, #248]	; (800d120 <UART_Start_Receive_DMA+0x134>)
 800d026:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d02c:	4a3d      	ldr	r2, [pc, #244]	; (800d124 <UART_Start_Receive_DMA+0x138>)
 800d02e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d034:	4a3c      	ldr	r2, [pc, #240]	; (800d128 <UART_Start_Receive_DMA+0x13c>)
 800d036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d03c:	2200      	movs	r2, #0
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3324      	adds	r3, #36	; 0x24
 800d04a:	4619      	mov	r1, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d050:	461a      	mov	r2, r3
 800d052:	88fb      	ldrh	r3, [r7, #6]
 800d054:	f7fc fdd0 	bl	8009bf8 <HAL_DMA_Start_IT>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d009      	beq.n	800d072 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2210      	movs	r2, #16
 800d062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e051      	b.n	800d116 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d018      	beq.n	800d0ac <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d08e:	657b      	str	r3, [r7, #84]	; 0x54
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d098:	64bb      	str	r3, [r7, #72]	; 0x48
 800d09a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d09e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e6      	bne.n	800d07a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	f043 0301 	orr.w	r3, r3, #1
 800d0c2:	653b      	str	r3, [r7, #80]	; 0x50
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0cc:	637a      	str	r2, [r7, #52]	; 0x34
 800d0ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d4:	e841 2300 	strex	r3, r2, [r1]
 800d0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1e5      	bne.n	800d0ac <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	e853 3f00 	ldrex	r3, [r3]
 800d0ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d100:	623a      	str	r2, [r7, #32]
 800d102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d104:	69f9      	ldr	r1, [r7, #28]
 800d106:	6a3a      	ldr	r2, [r7, #32]
 800d108:	e841 2300 	strex	r3, r2, [r1]
 800d10c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1e5      	bne.n	800d0e0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3758      	adds	r7, #88	; 0x58
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	0800d2f7 	.word	0x0800d2f7
 800d124:	0800d423 	.word	0x0800d423
 800d128:	0800d461 	.word	0x0800d461

0800d12c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b089      	sub	sp, #36	; 0x24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	e853 3f00 	ldrex	r3, [r3]
 800d140:	60bb      	str	r3, [r7, #8]
   return(result);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d148:	61fb      	str	r3, [r7, #28]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	61bb      	str	r3, [r7, #24]
 800d154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d156:	6979      	ldr	r1, [r7, #20]
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	e841 2300 	strex	r3, r2, [r1]
 800d15e:	613b      	str	r3, [r7, #16]
   return(result);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1e6      	bne.n	800d134 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2220      	movs	r2, #32
 800d16a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800d16c:	bf00      	nop
 800d16e:	3724      	adds	r7, #36	; 0x24
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d178:	b480      	push	{r7}
 800d17a:	b095      	sub	sp, #84	; 0x54
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d188:	e853 3f00 	ldrex	r3, [r3]
 800d18c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d194:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19e:	643b      	str	r3, [r7, #64]	; 0x40
 800d1a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1a6:	e841 2300 	strex	r3, r2, [r1]
 800d1aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1e6      	bne.n	800d180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	e853 3f00 	ldrex	r3, [r3]
 800d1c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f023 0301 	bic.w	r3, r3, #1
 800d1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e5      	bne.n	800d1b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d118      	bne.n	800d220 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	e853 3f00 	ldrex	r3, [r3]
 800d1fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f023 0310 	bic.w	r3, r3, #16
 800d202:	647b      	str	r3, [r7, #68]	; 0x44
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d20c:	61bb      	str	r3, [r7, #24]
 800d20e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d210:	6979      	ldr	r1, [r7, #20]
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	e841 2300 	strex	r3, r2, [r1]
 800d218:	613b      	str	r3, [r7, #16]
   return(result);
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1e6      	bne.n	800d1ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2220      	movs	r2, #32
 800d224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d234:	bf00      	nop
 800d236:	3754      	adds	r7, #84	; 0x54
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b090      	sub	sp, #64	; 0x40
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 0320 	and.w	r3, r3, #32
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d137      	bne.n	800d2cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25e:	2200      	movs	r2, #0
 800d260:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3308      	adds	r3, #8
 800d26a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26e:	e853 3f00 	ldrex	r3, [r3]
 800d272:	623b      	str	r3, [r7, #32]
   return(result);
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d27a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d284:	633a      	str	r2, [r7, #48]	; 0x30
 800d286:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d28c:	e841 2300 	strex	r3, r2, [r1]
 800d290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1e5      	bne.n	800d264 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	e853 3f00 	ldrex	r3, [r3]
 800d2a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b6:	61fb      	str	r3, [r7, #28]
 800d2b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ba:	69b9      	ldr	r1, [r7, #24]
 800d2bc:	69fa      	ldr	r2, [r7, #28]
 800d2be:	e841 2300 	strex	r3, r2, [r1]
 800d2c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d1e6      	bne.n	800d298 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2ca:	e002      	b.n	800d2d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d2cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d2ce:	f7fa fd56 	bl	8007d7e <HAL_UART_TxCpltCallback>
}
 800d2d2:	bf00      	nop
 800d2d4:	3740      	adds	r7, #64	; 0x40
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f7ff fa77 	bl	800c7dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2ee:	bf00      	nop
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b09c      	sub	sp, #112	; 0x70
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d302:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f003 0320 	and.w	r3, r3, #32
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d171      	bne.n	800d3f6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d314:	2200      	movs	r2, #0
 800d316:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d32a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d32e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	461a      	mov	r2, r3
 800d336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d338:	65bb      	str	r3, [r7, #88]	; 0x58
 800d33a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d33e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d340:	e841 2300 	strex	r3, r2, [r1]
 800d344:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e6      	bne.n	800d31a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3308      	adds	r3, #8
 800d352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	f023 0301 	bic.w	r3, r3, #1
 800d362:	667b      	str	r3, [r7, #100]	; 0x64
 800d364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3308      	adds	r3, #8
 800d36a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d36c:	647a      	str	r2, [r7, #68]	; 0x44
 800d36e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d374:	e841 2300 	strex	r3, r2, [r1]
 800d378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1e5      	bne.n	800d34c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3308      	adds	r3, #8
 800d386:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38a:	e853 3f00 	ldrex	r3, [r3]
 800d38e:	623b      	str	r3, [r7, #32]
   return(result);
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d396:	663b      	str	r3, [r7, #96]	; 0x60
 800d398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3308      	adds	r3, #8
 800d39e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3a0:	633a      	str	r2, [r7, #48]	; 0x30
 800d3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3a8:	e841 2300 	strex	r3, r2, [r1]
 800d3ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1e5      	bne.n	800d380 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d3b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d118      	bne.n	800d3f6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	e853 3f00 	ldrex	r3, [r3]
 800d3d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f023 0310 	bic.w	r3, r3, #16
 800d3d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3e2:	61fb      	str	r3, [r7, #28]
 800d3e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e6:	69b9      	ldr	r1, [r7, #24]
 800d3e8:	69fa      	ldr	r2, [r7, #28]
 800d3ea:	e841 2300 	strex	r3, r2, [r1]
 800d3ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1e6      	bne.n	800d3c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d400:	2b01      	cmp	r3, #1
 800d402:	d107      	bne.n	800d414 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d40a:	4619      	mov	r1, r3
 800d40c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d40e:	f7ff fa03 	bl	800c818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d412:	e002      	b.n	800d41a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d414:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d416:	f7fa fca8 	bl	8007d6a <HAL_UART_RxCpltCallback>
}
 800d41a:	bf00      	nop
 800d41c:	3770      	adds	r7, #112	; 0x70
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2201      	movs	r2, #1
 800d434:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d109      	bne.n	800d452 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d444:	085b      	lsrs	r3, r3, #1
 800d446:	b29b      	uxth	r3, r3
 800d448:	4619      	mov	r1, r3
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff f9e4 	bl	800c818 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d450:	e002      	b.n	800d458 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f7ff f9cc 	bl	800c7f0 <HAL_UART_RxHalfCpltCallback>
}
 800d458:	bf00      	nop
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d472:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d47a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d486:	2b80      	cmp	r3, #128	; 0x80
 800d488:	d109      	bne.n	800d49e <UART_DMAError+0x3e>
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b21      	cmp	r3, #33	; 0x21
 800d48e:	d106      	bne.n	800d49e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	2200      	movs	r2, #0
 800d494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d498:	6978      	ldr	r0, [r7, #20]
 800d49a:	f7ff fe47 	bl	800d12c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a8:	2b40      	cmp	r3, #64	; 0x40
 800d4aa:	d109      	bne.n	800d4c0 <UART_DMAError+0x60>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2b22      	cmp	r3, #34	; 0x22
 800d4b0:	d106      	bne.n	800d4c0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d4ba:	6978      	ldr	r0, [r7, #20]
 800d4bc:	f7ff fe5c 	bl	800d178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c6:	f043 0210 	orr.w	r2, r3, #16
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4d0:	6978      	ldr	r0, [r7, #20]
 800d4d2:	f7ff f997 	bl	800c804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4d6:	bf00      	nop
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7ff f981 	bl	800c804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d502:	bf00      	nop
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b088      	sub	sp, #32
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	e853 3f00 	ldrex	r3, [r3]
 800d51e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	461a      	mov	r2, r3
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	61bb      	str	r3, [r7, #24]
 800d532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d534:	6979      	ldr	r1, [r7, #20]
 800d536:	69ba      	ldr	r2, [r7, #24]
 800d538:	e841 2300 	strex	r3, r2, [r1]
 800d53c:	613b      	str	r3, [r7, #16]
   return(result);
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1e6      	bne.n	800d512 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2220      	movs	r2, #32
 800d548:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7fa fc14 	bl	8007d7e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d556:	bf00      	nop
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d55e:	b480      	push	{r7}
 800d560:	b083      	sub	sp, #12
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
	...

0800d574 <calloc>:
 800d574:	4b02      	ldr	r3, [pc, #8]	; (800d580 <calloc+0xc>)
 800d576:	460a      	mov	r2, r1
 800d578:	4601      	mov	r1, r0
 800d57a:	6818      	ldr	r0, [r3, #0]
 800d57c:	f000 b802 	b.w	800d584 <_calloc_r>
 800d580:	20000434 	.word	0x20000434

0800d584 <_calloc_r>:
 800d584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d586:	fba1 2402 	umull	r2, r4, r1, r2
 800d58a:	b94c      	cbnz	r4, 800d5a0 <_calloc_r+0x1c>
 800d58c:	4611      	mov	r1, r2
 800d58e:	9201      	str	r2, [sp, #4]
 800d590:	f000 f83e 	bl	800d610 <_malloc_r>
 800d594:	9a01      	ldr	r2, [sp, #4]
 800d596:	4605      	mov	r5, r0
 800d598:	b930      	cbnz	r0, 800d5a8 <_calloc_r+0x24>
 800d59a:	4628      	mov	r0, r5
 800d59c:	b003      	add	sp, #12
 800d59e:	bd30      	pop	{r4, r5, pc}
 800d5a0:	220c      	movs	r2, #12
 800d5a2:	6002      	str	r2, [r0, #0]
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	e7f8      	b.n	800d59a <_calloc_r+0x16>
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	f000 ffdd 	bl	800e568 <memset>
 800d5ae:	e7f4      	b.n	800d59a <_calloc_r+0x16>

0800d5b0 <malloc>:
 800d5b0:	4b02      	ldr	r3, [pc, #8]	; (800d5bc <malloc+0xc>)
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	f000 b82b 	b.w	800d610 <_malloc_r>
 800d5ba:	bf00      	nop
 800d5bc:	20000434 	.word	0x20000434

0800d5c0 <free>:
 800d5c0:	4b02      	ldr	r3, [pc, #8]	; (800d5cc <free+0xc>)
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	f001 b867 	b.w	800e698 <_free_r>
 800d5ca:	bf00      	nop
 800d5cc:	20000434 	.word	0x20000434

0800d5d0 <sbrk_aligned>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4e0e      	ldr	r6, [pc, #56]	; (800d60c <sbrk_aligned+0x3c>)
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	6831      	ldr	r1, [r6, #0]
 800d5d8:	4605      	mov	r5, r0
 800d5da:	b911      	cbnz	r1, 800d5e2 <sbrk_aligned+0x12>
 800d5dc:	f001 f800 	bl	800e5e0 <_sbrk_r>
 800d5e0:	6030      	str	r0, [r6, #0]
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f000 fffb 	bl	800e5e0 <_sbrk_r>
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	d00a      	beq.n	800d604 <sbrk_aligned+0x34>
 800d5ee:	1cc4      	adds	r4, r0, #3
 800d5f0:	f024 0403 	bic.w	r4, r4, #3
 800d5f4:	42a0      	cmp	r0, r4
 800d5f6:	d007      	beq.n	800d608 <sbrk_aligned+0x38>
 800d5f8:	1a21      	subs	r1, r4, r0
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f000 fff0 	bl	800e5e0 <_sbrk_r>
 800d600:	3001      	adds	r0, #1
 800d602:	d101      	bne.n	800d608 <sbrk_aligned+0x38>
 800d604:	f04f 34ff 	mov.w	r4, #4294967295
 800d608:	4620      	mov	r0, r4
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	2000101c 	.word	0x2000101c

0800d610 <_malloc_r>:
 800d610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d614:	1ccd      	adds	r5, r1, #3
 800d616:	f025 0503 	bic.w	r5, r5, #3
 800d61a:	3508      	adds	r5, #8
 800d61c:	2d0c      	cmp	r5, #12
 800d61e:	bf38      	it	cc
 800d620:	250c      	movcc	r5, #12
 800d622:	2d00      	cmp	r5, #0
 800d624:	4607      	mov	r7, r0
 800d626:	db01      	blt.n	800d62c <_malloc_r+0x1c>
 800d628:	42a9      	cmp	r1, r5
 800d62a:	d905      	bls.n	800d638 <_malloc_r+0x28>
 800d62c:	230c      	movs	r3, #12
 800d62e:	603b      	str	r3, [r7, #0]
 800d630:	2600      	movs	r6, #0
 800d632:	4630      	mov	r0, r6
 800d634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d70c <_malloc_r+0xfc>
 800d63c:	f000 f868 	bl	800d710 <__malloc_lock>
 800d640:	f8d8 3000 	ldr.w	r3, [r8]
 800d644:	461c      	mov	r4, r3
 800d646:	bb5c      	cbnz	r4, 800d6a0 <_malloc_r+0x90>
 800d648:	4629      	mov	r1, r5
 800d64a:	4638      	mov	r0, r7
 800d64c:	f7ff ffc0 	bl	800d5d0 <sbrk_aligned>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	4604      	mov	r4, r0
 800d654:	d155      	bne.n	800d702 <_malloc_r+0xf2>
 800d656:	f8d8 4000 	ldr.w	r4, [r8]
 800d65a:	4626      	mov	r6, r4
 800d65c:	2e00      	cmp	r6, #0
 800d65e:	d145      	bne.n	800d6ec <_malloc_r+0xdc>
 800d660:	2c00      	cmp	r4, #0
 800d662:	d048      	beq.n	800d6f6 <_malloc_r+0xe6>
 800d664:	6823      	ldr	r3, [r4, #0]
 800d666:	4631      	mov	r1, r6
 800d668:	4638      	mov	r0, r7
 800d66a:	eb04 0903 	add.w	r9, r4, r3
 800d66e:	f000 ffb7 	bl	800e5e0 <_sbrk_r>
 800d672:	4581      	cmp	r9, r0
 800d674:	d13f      	bne.n	800d6f6 <_malloc_r+0xe6>
 800d676:	6821      	ldr	r1, [r4, #0]
 800d678:	1a6d      	subs	r5, r5, r1
 800d67a:	4629      	mov	r1, r5
 800d67c:	4638      	mov	r0, r7
 800d67e:	f7ff ffa7 	bl	800d5d0 <sbrk_aligned>
 800d682:	3001      	adds	r0, #1
 800d684:	d037      	beq.n	800d6f6 <_malloc_r+0xe6>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	442b      	add	r3, r5
 800d68a:	6023      	str	r3, [r4, #0]
 800d68c:	f8d8 3000 	ldr.w	r3, [r8]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d038      	beq.n	800d706 <_malloc_r+0xf6>
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	42a2      	cmp	r2, r4
 800d698:	d12b      	bne.n	800d6f2 <_malloc_r+0xe2>
 800d69a:	2200      	movs	r2, #0
 800d69c:	605a      	str	r2, [r3, #4]
 800d69e:	e00f      	b.n	800d6c0 <_malloc_r+0xb0>
 800d6a0:	6822      	ldr	r2, [r4, #0]
 800d6a2:	1b52      	subs	r2, r2, r5
 800d6a4:	d41f      	bmi.n	800d6e6 <_malloc_r+0xd6>
 800d6a6:	2a0b      	cmp	r2, #11
 800d6a8:	d917      	bls.n	800d6da <_malloc_r+0xca>
 800d6aa:	1961      	adds	r1, r4, r5
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	6025      	str	r5, [r4, #0]
 800d6b0:	bf18      	it	ne
 800d6b2:	6059      	strne	r1, [r3, #4]
 800d6b4:	6863      	ldr	r3, [r4, #4]
 800d6b6:	bf08      	it	eq
 800d6b8:	f8c8 1000 	streq.w	r1, [r8]
 800d6bc:	5162      	str	r2, [r4, r5]
 800d6be:	604b      	str	r3, [r1, #4]
 800d6c0:	4638      	mov	r0, r7
 800d6c2:	f104 060b 	add.w	r6, r4, #11
 800d6c6:	f000 f829 	bl	800d71c <__malloc_unlock>
 800d6ca:	f026 0607 	bic.w	r6, r6, #7
 800d6ce:	1d23      	adds	r3, r4, #4
 800d6d0:	1af2      	subs	r2, r6, r3
 800d6d2:	d0ae      	beq.n	800d632 <_malloc_r+0x22>
 800d6d4:	1b9b      	subs	r3, r3, r6
 800d6d6:	50a3      	str	r3, [r4, r2]
 800d6d8:	e7ab      	b.n	800d632 <_malloc_r+0x22>
 800d6da:	42a3      	cmp	r3, r4
 800d6dc:	6862      	ldr	r2, [r4, #4]
 800d6de:	d1dd      	bne.n	800d69c <_malloc_r+0x8c>
 800d6e0:	f8c8 2000 	str.w	r2, [r8]
 800d6e4:	e7ec      	b.n	800d6c0 <_malloc_r+0xb0>
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	6864      	ldr	r4, [r4, #4]
 800d6ea:	e7ac      	b.n	800d646 <_malloc_r+0x36>
 800d6ec:	4634      	mov	r4, r6
 800d6ee:	6876      	ldr	r6, [r6, #4]
 800d6f0:	e7b4      	b.n	800d65c <_malloc_r+0x4c>
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	e7cc      	b.n	800d690 <_malloc_r+0x80>
 800d6f6:	230c      	movs	r3, #12
 800d6f8:	603b      	str	r3, [r7, #0]
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	f000 f80e 	bl	800d71c <__malloc_unlock>
 800d700:	e797      	b.n	800d632 <_malloc_r+0x22>
 800d702:	6025      	str	r5, [r4, #0]
 800d704:	e7dc      	b.n	800d6c0 <_malloc_r+0xb0>
 800d706:	605b      	str	r3, [r3, #4]
 800d708:	deff      	udf	#255	; 0xff
 800d70a:	bf00      	nop
 800d70c:	20001018 	.word	0x20001018

0800d710 <__malloc_lock>:
 800d710:	4801      	ldr	r0, [pc, #4]	; (800d718 <__malloc_lock+0x8>)
 800d712:	f000 bfb1 	b.w	800e678 <__retarget_lock_acquire_recursive>
 800d716:	bf00      	nop
 800d718:	20001160 	.word	0x20001160

0800d71c <__malloc_unlock>:
 800d71c:	4801      	ldr	r0, [pc, #4]	; (800d724 <__malloc_unlock+0x8>)
 800d71e:	f000 bfac 	b.w	800e67a <__retarget_lock_release_recursive>
 800d722:	bf00      	nop
 800d724:	20001160 	.word	0x20001160

0800d728 <__sfputc_r>:
 800d728:	6893      	ldr	r3, [r2, #8]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	b410      	push	{r4}
 800d730:	6093      	str	r3, [r2, #8]
 800d732:	da08      	bge.n	800d746 <__sfputc_r+0x1e>
 800d734:	6994      	ldr	r4, [r2, #24]
 800d736:	42a3      	cmp	r3, r4
 800d738:	db01      	blt.n	800d73e <__sfputc_r+0x16>
 800d73a:	290a      	cmp	r1, #10
 800d73c:	d103      	bne.n	800d746 <__sfputc_r+0x1e>
 800d73e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d742:	f000 be62 	b.w	800e40a <__swbuf_r>
 800d746:	6813      	ldr	r3, [r2, #0]
 800d748:	1c58      	adds	r0, r3, #1
 800d74a:	6010      	str	r0, [r2, #0]
 800d74c:	7019      	strb	r1, [r3, #0]
 800d74e:	4608      	mov	r0, r1
 800d750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <__sfputs_r>:
 800d756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d758:	4606      	mov	r6, r0
 800d75a:	460f      	mov	r7, r1
 800d75c:	4614      	mov	r4, r2
 800d75e:	18d5      	adds	r5, r2, r3
 800d760:	42ac      	cmp	r4, r5
 800d762:	d101      	bne.n	800d768 <__sfputs_r+0x12>
 800d764:	2000      	movs	r0, #0
 800d766:	e007      	b.n	800d778 <__sfputs_r+0x22>
 800d768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d76c:	463a      	mov	r2, r7
 800d76e:	4630      	mov	r0, r6
 800d770:	f7ff ffda 	bl	800d728 <__sfputc_r>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d1f3      	bne.n	800d760 <__sfputs_r+0xa>
 800d778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d77c <_vfiprintf_r>:
 800d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	460d      	mov	r5, r1
 800d782:	b09d      	sub	sp, #116	; 0x74
 800d784:	4614      	mov	r4, r2
 800d786:	4698      	mov	r8, r3
 800d788:	4606      	mov	r6, r0
 800d78a:	b118      	cbz	r0, 800d794 <_vfiprintf_r+0x18>
 800d78c:	6a03      	ldr	r3, [r0, #32]
 800d78e:	b90b      	cbnz	r3, 800d794 <_vfiprintf_r+0x18>
 800d790:	f000 fbe4 	bl	800df5c <__sinit>
 800d794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d796:	07d9      	lsls	r1, r3, #31
 800d798:	d405      	bmi.n	800d7a6 <_vfiprintf_r+0x2a>
 800d79a:	89ab      	ldrh	r3, [r5, #12]
 800d79c:	059a      	lsls	r2, r3, #22
 800d79e:	d402      	bmi.n	800d7a6 <_vfiprintf_r+0x2a>
 800d7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7a2:	f000 ff69 	bl	800e678 <__retarget_lock_acquire_recursive>
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	071b      	lsls	r3, r3, #28
 800d7aa:	d501      	bpl.n	800d7b0 <_vfiprintf_r+0x34>
 800d7ac:	692b      	ldr	r3, [r5, #16]
 800d7ae:	b99b      	cbnz	r3, 800d7d8 <_vfiprintf_r+0x5c>
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f000 fe66 	bl	800e484 <__swsetup_r>
 800d7b8:	b170      	cbz	r0, 800d7d8 <_vfiprintf_r+0x5c>
 800d7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7bc:	07dc      	lsls	r4, r3, #31
 800d7be:	d504      	bpl.n	800d7ca <_vfiprintf_r+0x4e>
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	b01d      	add	sp, #116	; 0x74
 800d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ca:	89ab      	ldrh	r3, [r5, #12]
 800d7cc:	0598      	lsls	r0, r3, #22
 800d7ce:	d4f7      	bmi.n	800d7c0 <_vfiprintf_r+0x44>
 800d7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7d2:	f000 ff52 	bl	800e67a <__retarget_lock_release_recursive>
 800d7d6:	e7f3      	b.n	800d7c0 <_vfiprintf_r+0x44>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	9309      	str	r3, [sp, #36]	; 0x24
 800d7dc:	2320      	movs	r3, #32
 800d7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7e6:	2330      	movs	r3, #48	; 0x30
 800d7e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d99c <_vfiprintf_r+0x220>
 800d7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7f0:	f04f 0901 	mov.w	r9, #1
 800d7f4:	4623      	mov	r3, r4
 800d7f6:	469a      	mov	sl, r3
 800d7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7fc:	b10a      	cbz	r2, 800d802 <_vfiprintf_r+0x86>
 800d7fe:	2a25      	cmp	r2, #37	; 0x25
 800d800:	d1f9      	bne.n	800d7f6 <_vfiprintf_r+0x7a>
 800d802:	ebba 0b04 	subs.w	fp, sl, r4
 800d806:	d00b      	beq.n	800d820 <_vfiprintf_r+0xa4>
 800d808:	465b      	mov	r3, fp
 800d80a:	4622      	mov	r2, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	4630      	mov	r0, r6
 800d810:	f7ff ffa1 	bl	800d756 <__sfputs_r>
 800d814:	3001      	adds	r0, #1
 800d816:	f000 80a9 	beq.w	800d96c <_vfiprintf_r+0x1f0>
 800d81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d81c:	445a      	add	r2, fp
 800d81e:	9209      	str	r2, [sp, #36]	; 0x24
 800d820:	f89a 3000 	ldrb.w	r3, [sl]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80a1 	beq.w	800d96c <_vfiprintf_r+0x1f0>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f04f 32ff 	mov.w	r2, #4294967295
 800d830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d834:	f10a 0a01 	add.w	sl, sl, #1
 800d838:	9304      	str	r3, [sp, #16]
 800d83a:	9307      	str	r3, [sp, #28]
 800d83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d840:	931a      	str	r3, [sp, #104]	; 0x68
 800d842:	4654      	mov	r4, sl
 800d844:	2205      	movs	r2, #5
 800d846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d84a:	4854      	ldr	r0, [pc, #336]	; (800d99c <_vfiprintf_r+0x220>)
 800d84c:	f7f2 fcc0 	bl	80001d0 <memchr>
 800d850:	9a04      	ldr	r2, [sp, #16]
 800d852:	b9d8      	cbnz	r0, 800d88c <_vfiprintf_r+0x110>
 800d854:	06d1      	lsls	r1, r2, #27
 800d856:	bf44      	itt	mi
 800d858:	2320      	movmi	r3, #32
 800d85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d85e:	0713      	lsls	r3, r2, #28
 800d860:	bf44      	itt	mi
 800d862:	232b      	movmi	r3, #43	; 0x2b
 800d864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d868:	f89a 3000 	ldrb.w	r3, [sl]
 800d86c:	2b2a      	cmp	r3, #42	; 0x2a
 800d86e:	d015      	beq.n	800d89c <_vfiprintf_r+0x120>
 800d870:	9a07      	ldr	r2, [sp, #28]
 800d872:	4654      	mov	r4, sl
 800d874:	2000      	movs	r0, #0
 800d876:	f04f 0c0a 	mov.w	ip, #10
 800d87a:	4621      	mov	r1, r4
 800d87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d880:	3b30      	subs	r3, #48	; 0x30
 800d882:	2b09      	cmp	r3, #9
 800d884:	d94d      	bls.n	800d922 <_vfiprintf_r+0x1a6>
 800d886:	b1b0      	cbz	r0, 800d8b6 <_vfiprintf_r+0x13a>
 800d888:	9207      	str	r2, [sp, #28]
 800d88a:	e014      	b.n	800d8b6 <_vfiprintf_r+0x13a>
 800d88c:	eba0 0308 	sub.w	r3, r0, r8
 800d890:	fa09 f303 	lsl.w	r3, r9, r3
 800d894:	4313      	orrs	r3, r2
 800d896:	9304      	str	r3, [sp, #16]
 800d898:	46a2      	mov	sl, r4
 800d89a:	e7d2      	b.n	800d842 <_vfiprintf_r+0xc6>
 800d89c:	9b03      	ldr	r3, [sp, #12]
 800d89e:	1d19      	adds	r1, r3, #4
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	9103      	str	r1, [sp, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	bfbb      	ittet	lt
 800d8a8:	425b      	neglt	r3, r3
 800d8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ae:	9307      	strge	r3, [sp, #28]
 800d8b0:	9307      	strlt	r3, [sp, #28]
 800d8b2:	bfb8      	it	lt
 800d8b4:	9204      	strlt	r2, [sp, #16]
 800d8b6:	7823      	ldrb	r3, [r4, #0]
 800d8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ba:	d10c      	bne.n	800d8d6 <_vfiprintf_r+0x15a>
 800d8bc:	7863      	ldrb	r3, [r4, #1]
 800d8be:	2b2a      	cmp	r3, #42	; 0x2a
 800d8c0:	d134      	bne.n	800d92c <_vfiprintf_r+0x1b0>
 800d8c2:	9b03      	ldr	r3, [sp, #12]
 800d8c4:	1d1a      	adds	r2, r3, #4
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	9203      	str	r2, [sp, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	bfb8      	it	lt
 800d8ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8d2:	3402      	adds	r4, #2
 800d8d4:	9305      	str	r3, [sp, #20]
 800d8d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d9ac <_vfiprintf_r+0x230>
 800d8da:	7821      	ldrb	r1, [r4, #0]
 800d8dc:	2203      	movs	r2, #3
 800d8de:	4650      	mov	r0, sl
 800d8e0:	f7f2 fc76 	bl	80001d0 <memchr>
 800d8e4:	b138      	cbz	r0, 800d8f6 <_vfiprintf_r+0x17a>
 800d8e6:	9b04      	ldr	r3, [sp, #16]
 800d8e8:	eba0 000a 	sub.w	r0, r0, sl
 800d8ec:	2240      	movs	r2, #64	; 0x40
 800d8ee:	4082      	lsls	r2, r0
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	3401      	adds	r4, #1
 800d8f4:	9304      	str	r3, [sp, #16]
 800d8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8fa:	4829      	ldr	r0, [pc, #164]	; (800d9a0 <_vfiprintf_r+0x224>)
 800d8fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d900:	2206      	movs	r2, #6
 800d902:	f7f2 fc65 	bl	80001d0 <memchr>
 800d906:	2800      	cmp	r0, #0
 800d908:	d03f      	beq.n	800d98a <_vfiprintf_r+0x20e>
 800d90a:	4b26      	ldr	r3, [pc, #152]	; (800d9a4 <_vfiprintf_r+0x228>)
 800d90c:	bb1b      	cbnz	r3, 800d956 <_vfiprintf_r+0x1da>
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	3307      	adds	r3, #7
 800d912:	f023 0307 	bic.w	r3, r3, #7
 800d916:	3308      	adds	r3, #8
 800d918:	9303      	str	r3, [sp, #12]
 800d91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d91c:	443b      	add	r3, r7
 800d91e:	9309      	str	r3, [sp, #36]	; 0x24
 800d920:	e768      	b.n	800d7f4 <_vfiprintf_r+0x78>
 800d922:	fb0c 3202 	mla	r2, ip, r2, r3
 800d926:	460c      	mov	r4, r1
 800d928:	2001      	movs	r0, #1
 800d92a:	e7a6      	b.n	800d87a <_vfiprintf_r+0xfe>
 800d92c:	2300      	movs	r3, #0
 800d92e:	3401      	adds	r4, #1
 800d930:	9305      	str	r3, [sp, #20]
 800d932:	4619      	mov	r1, r3
 800d934:	f04f 0c0a 	mov.w	ip, #10
 800d938:	4620      	mov	r0, r4
 800d93a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d93e:	3a30      	subs	r2, #48	; 0x30
 800d940:	2a09      	cmp	r2, #9
 800d942:	d903      	bls.n	800d94c <_vfiprintf_r+0x1d0>
 800d944:	2b00      	cmp	r3, #0
 800d946:	d0c6      	beq.n	800d8d6 <_vfiprintf_r+0x15a>
 800d948:	9105      	str	r1, [sp, #20]
 800d94a:	e7c4      	b.n	800d8d6 <_vfiprintf_r+0x15a>
 800d94c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d950:	4604      	mov	r4, r0
 800d952:	2301      	movs	r3, #1
 800d954:	e7f0      	b.n	800d938 <_vfiprintf_r+0x1bc>
 800d956:	ab03      	add	r3, sp, #12
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	462a      	mov	r2, r5
 800d95c:	4b12      	ldr	r3, [pc, #72]	; (800d9a8 <_vfiprintf_r+0x22c>)
 800d95e:	a904      	add	r1, sp, #16
 800d960:	4630      	mov	r0, r6
 800d962:	f3af 8000 	nop.w
 800d966:	4607      	mov	r7, r0
 800d968:	1c78      	adds	r0, r7, #1
 800d96a:	d1d6      	bne.n	800d91a <_vfiprintf_r+0x19e>
 800d96c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d96e:	07d9      	lsls	r1, r3, #31
 800d970:	d405      	bmi.n	800d97e <_vfiprintf_r+0x202>
 800d972:	89ab      	ldrh	r3, [r5, #12]
 800d974:	059a      	lsls	r2, r3, #22
 800d976:	d402      	bmi.n	800d97e <_vfiprintf_r+0x202>
 800d978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d97a:	f000 fe7e 	bl	800e67a <__retarget_lock_release_recursive>
 800d97e:	89ab      	ldrh	r3, [r5, #12]
 800d980:	065b      	lsls	r3, r3, #25
 800d982:	f53f af1d 	bmi.w	800d7c0 <_vfiprintf_r+0x44>
 800d986:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d988:	e71c      	b.n	800d7c4 <_vfiprintf_r+0x48>
 800d98a:	ab03      	add	r3, sp, #12
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	462a      	mov	r2, r5
 800d990:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <_vfiprintf_r+0x22c>)
 800d992:	a904      	add	r1, sp, #16
 800d994:	4630      	mov	r0, r6
 800d996:	f000 f883 	bl	800daa0 <_printf_i>
 800d99a:	e7e4      	b.n	800d966 <_vfiprintf_r+0x1ea>
 800d99c:	0800f1bc 	.word	0x0800f1bc
 800d9a0:	0800f1c6 	.word	0x0800f1c6
 800d9a4:	00000000 	.word	0x00000000
 800d9a8:	0800d757 	.word	0x0800d757
 800d9ac:	0800f1c2 	.word	0x0800f1c2

0800d9b0 <vfiprintf>:
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	460a      	mov	r2, r1
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	4802      	ldr	r0, [pc, #8]	; (800d9c0 <vfiprintf+0x10>)
 800d9b8:	6800      	ldr	r0, [r0, #0]
 800d9ba:	f7ff bedf 	b.w	800d77c <_vfiprintf_r>
 800d9be:	bf00      	nop
 800d9c0:	20000434 	.word	0x20000434

0800d9c4 <_printf_common>:
 800d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c8:	4616      	mov	r6, r2
 800d9ca:	4699      	mov	r9, r3
 800d9cc:	688a      	ldr	r2, [r1, #8]
 800d9ce:	690b      	ldr	r3, [r1, #16]
 800d9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	bfb8      	it	lt
 800d9d8:	4613      	movlt	r3, r2
 800d9da:	6033      	str	r3, [r6, #0]
 800d9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9e0:	4607      	mov	r7, r0
 800d9e2:	460c      	mov	r4, r1
 800d9e4:	b10a      	cbz	r2, 800d9ea <_printf_common+0x26>
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	6033      	str	r3, [r6, #0]
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	0699      	lsls	r1, r3, #26
 800d9ee:	bf42      	ittt	mi
 800d9f0:	6833      	ldrmi	r3, [r6, #0]
 800d9f2:	3302      	addmi	r3, #2
 800d9f4:	6033      	strmi	r3, [r6, #0]
 800d9f6:	6825      	ldr	r5, [r4, #0]
 800d9f8:	f015 0506 	ands.w	r5, r5, #6
 800d9fc:	d106      	bne.n	800da0c <_printf_common+0x48>
 800d9fe:	f104 0a19 	add.w	sl, r4, #25
 800da02:	68e3      	ldr	r3, [r4, #12]
 800da04:	6832      	ldr	r2, [r6, #0]
 800da06:	1a9b      	subs	r3, r3, r2
 800da08:	42ab      	cmp	r3, r5
 800da0a:	dc26      	bgt.n	800da5a <_printf_common+0x96>
 800da0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da10:	1e13      	subs	r3, r2, #0
 800da12:	6822      	ldr	r2, [r4, #0]
 800da14:	bf18      	it	ne
 800da16:	2301      	movne	r3, #1
 800da18:	0692      	lsls	r2, r2, #26
 800da1a:	d42b      	bmi.n	800da74 <_printf_common+0xb0>
 800da1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da20:	4649      	mov	r1, r9
 800da22:	4638      	mov	r0, r7
 800da24:	47c0      	blx	r8
 800da26:	3001      	adds	r0, #1
 800da28:	d01e      	beq.n	800da68 <_printf_common+0xa4>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	6922      	ldr	r2, [r4, #16]
 800da2e:	f003 0306 	and.w	r3, r3, #6
 800da32:	2b04      	cmp	r3, #4
 800da34:	bf02      	ittt	eq
 800da36:	68e5      	ldreq	r5, [r4, #12]
 800da38:	6833      	ldreq	r3, [r6, #0]
 800da3a:	1aed      	subeq	r5, r5, r3
 800da3c:	68a3      	ldr	r3, [r4, #8]
 800da3e:	bf0c      	ite	eq
 800da40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da44:	2500      	movne	r5, #0
 800da46:	4293      	cmp	r3, r2
 800da48:	bfc4      	itt	gt
 800da4a:	1a9b      	subgt	r3, r3, r2
 800da4c:	18ed      	addgt	r5, r5, r3
 800da4e:	2600      	movs	r6, #0
 800da50:	341a      	adds	r4, #26
 800da52:	42b5      	cmp	r5, r6
 800da54:	d11a      	bne.n	800da8c <_printf_common+0xc8>
 800da56:	2000      	movs	r0, #0
 800da58:	e008      	b.n	800da6c <_printf_common+0xa8>
 800da5a:	2301      	movs	r3, #1
 800da5c:	4652      	mov	r2, sl
 800da5e:	4649      	mov	r1, r9
 800da60:	4638      	mov	r0, r7
 800da62:	47c0      	blx	r8
 800da64:	3001      	adds	r0, #1
 800da66:	d103      	bne.n	800da70 <_printf_common+0xac>
 800da68:	f04f 30ff 	mov.w	r0, #4294967295
 800da6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da70:	3501      	adds	r5, #1
 800da72:	e7c6      	b.n	800da02 <_printf_common+0x3e>
 800da74:	18e1      	adds	r1, r4, r3
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	2030      	movs	r0, #48	; 0x30
 800da7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da7e:	4422      	add	r2, r4
 800da80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da88:	3302      	adds	r3, #2
 800da8a:	e7c7      	b.n	800da1c <_printf_common+0x58>
 800da8c:	2301      	movs	r3, #1
 800da8e:	4622      	mov	r2, r4
 800da90:	4649      	mov	r1, r9
 800da92:	4638      	mov	r0, r7
 800da94:	47c0      	blx	r8
 800da96:	3001      	adds	r0, #1
 800da98:	d0e6      	beq.n	800da68 <_printf_common+0xa4>
 800da9a:	3601      	adds	r6, #1
 800da9c:	e7d9      	b.n	800da52 <_printf_common+0x8e>
	...

0800daa0 <_printf_i>:
 800daa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daa4:	7e0f      	ldrb	r7, [r1, #24]
 800daa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800daa8:	2f78      	cmp	r7, #120	; 0x78
 800daaa:	4691      	mov	r9, r2
 800daac:	4680      	mov	r8, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	469a      	mov	sl, r3
 800dab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dab6:	d807      	bhi.n	800dac8 <_printf_i+0x28>
 800dab8:	2f62      	cmp	r7, #98	; 0x62
 800daba:	d80a      	bhi.n	800dad2 <_printf_i+0x32>
 800dabc:	2f00      	cmp	r7, #0
 800dabe:	f000 80d4 	beq.w	800dc6a <_printf_i+0x1ca>
 800dac2:	2f58      	cmp	r7, #88	; 0x58
 800dac4:	f000 80c0 	beq.w	800dc48 <_printf_i+0x1a8>
 800dac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dacc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dad0:	e03a      	b.n	800db48 <_printf_i+0xa8>
 800dad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dad6:	2b15      	cmp	r3, #21
 800dad8:	d8f6      	bhi.n	800dac8 <_printf_i+0x28>
 800dada:	a101      	add	r1, pc, #4	; (adr r1, 800dae0 <_printf_i+0x40>)
 800dadc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dae0:	0800db39 	.word	0x0800db39
 800dae4:	0800db4d 	.word	0x0800db4d
 800dae8:	0800dac9 	.word	0x0800dac9
 800daec:	0800dac9 	.word	0x0800dac9
 800daf0:	0800dac9 	.word	0x0800dac9
 800daf4:	0800dac9 	.word	0x0800dac9
 800daf8:	0800db4d 	.word	0x0800db4d
 800dafc:	0800dac9 	.word	0x0800dac9
 800db00:	0800dac9 	.word	0x0800dac9
 800db04:	0800dac9 	.word	0x0800dac9
 800db08:	0800dac9 	.word	0x0800dac9
 800db0c:	0800dc51 	.word	0x0800dc51
 800db10:	0800db79 	.word	0x0800db79
 800db14:	0800dc0b 	.word	0x0800dc0b
 800db18:	0800dac9 	.word	0x0800dac9
 800db1c:	0800dac9 	.word	0x0800dac9
 800db20:	0800dc73 	.word	0x0800dc73
 800db24:	0800dac9 	.word	0x0800dac9
 800db28:	0800db79 	.word	0x0800db79
 800db2c:	0800dac9 	.word	0x0800dac9
 800db30:	0800dac9 	.word	0x0800dac9
 800db34:	0800dc13 	.word	0x0800dc13
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	1d1a      	adds	r2, r3, #4
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	602a      	str	r2, [r5, #0]
 800db40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db48:	2301      	movs	r3, #1
 800db4a:	e09f      	b.n	800dc8c <_printf_i+0x1ec>
 800db4c:	6820      	ldr	r0, [r4, #0]
 800db4e:	682b      	ldr	r3, [r5, #0]
 800db50:	0607      	lsls	r7, r0, #24
 800db52:	f103 0104 	add.w	r1, r3, #4
 800db56:	6029      	str	r1, [r5, #0]
 800db58:	d501      	bpl.n	800db5e <_printf_i+0xbe>
 800db5a:	681e      	ldr	r6, [r3, #0]
 800db5c:	e003      	b.n	800db66 <_printf_i+0xc6>
 800db5e:	0646      	lsls	r6, r0, #25
 800db60:	d5fb      	bpl.n	800db5a <_printf_i+0xba>
 800db62:	f9b3 6000 	ldrsh.w	r6, [r3]
 800db66:	2e00      	cmp	r6, #0
 800db68:	da03      	bge.n	800db72 <_printf_i+0xd2>
 800db6a:	232d      	movs	r3, #45	; 0x2d
 800db6c:	4276      	negs	r6, r6
 800db6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db72:	485a      	ldr	r0, [pc, #360]	; (800dcdc <_printf_i+0x23c>)
 800db74:	230a      	movs	r3, #10
 800db76:	e012      	b.n	800db9e <_printf_i+0xfe>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	6820      	ldr	r0, [r4, #0]
 800db7c:	1d19      	adds	r1, r3, #4
 800db7e:	6029      	str	r1, [r5, #0]
 800db80:	0605      	lsls	r5, r0, #24
 800db82:	d501      	bpl.n	800db88 <_printf_i+0xe8>
 800db84:	681e      	ldr	r6, [r3, #0]
 800db86:	e002      	b.n	800db8e <_printf_i+0xee>
 800db88:	0641      	lsls	r1, r0, #25
 800db8a:	d5fb      	bpl.n	800db84 <_printf_i+0xe4>
 800db8c:	881e      	ldrh	r6, [r3, #0]
 800db8e:	4853      	ldr	r0, [pc, #332]	; (800dcdc <_printf_i+0x23c>)
 800db90:	2f6f      	cmp	r7, #111	; 0x6f
 800db92:	bf0c      	ite	eq
 800db94:	2308      	moveq	r3, #8
 800db96:	230a      	movne	r3, #10
 800db98:	2100      	movs	r1, #0
 800db9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db9e:	6865      	ldr	r5, [r4, #4]
 800dba0:	60a5      	str	r5, [r4, #8]
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	bfa2      	ittt	ge
 800dba6:	6821      	ldrge	r1, [r4, #0]
 800dba8:	f021 0104 	bicge.w	r1, r1, #4
 800dbac:	6021      	strge	r1, [r4, #0]
 800dbae:	b90e      	cbnz	r6, 800dbb4 <_printf_i+0x114>
 800dbb0:	2d00      	cmp	r5, #0
 800dbb2:	d04b      	beq.n	800dc4c <_printf_i+0x1ac>
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbba:	fb03 6711 	mls	r7, r3, r1, r6
 800dbbe:	5dc7      	ldrb	r7, [r0, r7]
 800dbc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbc4:	4637      	mov	r7, r6
 800dbc6:	42bb      	cmp	r3, r7
 800dbc8:	460e      	mov	r6, r1
 800dbca:	d9f4      	bls.n	800dbb6 <_printf_i+0x116>
 800dbcc:	2b08      	cmp	r3, #8
 800dbce:	d10b      	bne.n	800dbe8 <_printf_i+0x148>
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	07de      	lsls	r6, r3, #31
 800dbd4:	d508      	bpl.n	800dbe8 <_printf_i+0x148>
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	6861      	ldr	r1, [r4, #4]
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	bfde      	ittt	le
 800dbde:	2330      	movle	r3, #48	; 0x30
 800dbe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbe8:	1b52      	subs	r2, r2, r5
 800dbea:	6122      	str	r2, [r4, #16]
 800dbec:	f8cd a000 	str.w	sl, [sp]
 800dbf0:	464b      	mov	r3, r9
 800dbf2:	aa03      	add	r2, sp, #12
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	f7ff fee4 	bl	800d9c4 <_printf_common>
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d14a      	bne.n	800dc96 <_printf_i+0x1f6>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	b004      	add	sp, #16
 800dc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	f043 0320 	orr.w	r3, r3, #32
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	4833      	ldr	r0, [pc, #204]	; (800dce0 <_printf_i+0x240>)
 800dc14:	2778      	movs	r7, #120	; 0x78
 800dc16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	6829      	ldr	r1, [r5, #0]
 800dc1e:	061f      	lsls	r7, r3, #24
 800dc20:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc24:	d402      	bmi.n	800dc2c <_printf_i+0x18c>
 800dc26:	065f      	lsls	r7, r3, #25
 800dc28:	bf48      	it	mi
 800dc2a:	b2b6      	uxthmi	r6, r6
 800dc2c:	07df      	lsls	r7, r3, #31
 800dc2e:	bf48      	it	mi
 800dc30:	f043 0320 	orrmi.w	r3, r3, #32
 800dc34:	6029      	str	r1, [r5, #0]
 800dc36:	bf48      	it	mi
 800dc38:	6023      	strmi	r3, [r4, #0]
 800dc3a:	b91e      	cbnz	r6, 800dc44 <_printf_i+0x1a4>
 800dc3c:	6823      	ldr	r3, [r4, #0]
 800dc3e:	f023 0320 	bic.w	r3, r3, #32
 800dc42:	6023      	str	r3, [r4, #0]
 800dc44:	2310      	movs	r3, #16
 800dc46:	e7a7      	b.n	800db98 <_printf_i+0xf8>
 800dc48:	4824      	ldr	r0, [pc, #144]	; (800dcdc <_printf_i+0x23c>)
 800dc4a:	e7e4      	b.n	800dc16 <_printf_i+0x176>
 800dc4c:	4615      	mov	r5, r2
 800dc4e:	e7bd      	b.n	800dbcc <_printf_i+0x12c>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	6826      	ldr	r6, [r4, #0]
 800dc54:	6961      	ldr	r1, [r4, #20]
 800dc56:	1d18      	adds	r0, r3, #4
 800dc58:	6028      	str	r0, [r5, #0]
 800dc5a:	0635      	lsls	r5, r6, #24
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	d501      	bpl.n	800dc64 <_printf_i+0x1c4>
 800dc60:	6019      	str	r1, [r3, #0]
 800dc62:	e002      	b.n	800dc6a <_printf_i+0x1ca>
 800dc64:	0670      	lsls	r0, r6, #25
 800dc66:	d5fb      	bpl.n	800dc60 <_printf_i+0x1c0>
 800dc68:	8019      	strh	r1, [r3, #0]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6123      	str	r3, [r4, #16]
 800dc6e:	4615      	mov	r5, r2
 800dc70:	e7bc      	b.n	800dbec <_printf_i+0x14c>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	1d1a      	adds	r2, r3, #4
 800dc76:	602a      	str	r2, [r5, #0]
 800dc78:	681d      	ldr	r5, [r3, #0]
 800dc7a:	6862      	ldr	r2, [r4, #4]
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f7f2 faa6 	bl	80001d0 <memchr>
 800dc84:	b108      	cbz	r0, 800dc8a <_printf_i+0x1ea>
 800dc86:	1b40      	subs	r0, r0, r5
 800dc88:	6060      	str	r0, [r4, #4]
 800dc8a:	6863      	ldr	r3, [r4, #4]
 800dc8c:	6123      	str	r3, [r4, #16]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc94:	e7aa      	b.n	800dbec <_printf_i+0x14c>
 800dc96:	6923      	ldr	r3, [r4, #16]
 800dc98:	462a      	mov	r2, r5
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	47d0      	blx	sl
 800dca0:	3001      	adds	r0, #1
 800dca2:	d0ad      	beq.n	800dc00 <_printf_i+0x160>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	079b      	lsls	r3, r3, #30
 800dca8:	d413      	bmi.n	800dcd2 <_printf_i+0x232>
 800dcaa:	68e0      	ldr	r0, [r4, #12]
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	4298      	cmp	r0, r3
 800dcb0:	bfb8      	it	lt
 800dcb2:	4618      	movlt	r0, r3
 800dcb4:	e7a6      	b.n	800dc04 <_printf_i+0x164>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	4632      	mov	r2, r6
 800dcba:	4649      	mov	r1, r9
 800dcbc:	4640      	mov	r0, r8
 800dcbe:	47d0      	blx	sl
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d09d      	beq.n	800dc00 <_printf_i+0x160>
 800dcc4:	3501      	adds	r5, #1
 800dcc6:	68e3      	ldr	r3, [r4, #12]
 800dcc8:	9903      	ldr	r1, [sp, #12]
 800dcca:	1a5b      	subs	r3, r3, r1
 800dccc:	42ab      	cmp	r3, r5
 800dcce:	dcf2      	bgt.n	800dcb6 <_printf_i+0x216>
 800dcd0:	e7eb      	b.n	800dcaa <_printf_i+0x20a>
 800dcd2:	2500      	movs	r5, #0
 800dcd4:	f104 0619 	add.w	r6, r4, #25
 800dcd8:	e7f5      	b.n	800dcc6 <_printf_i+0x226>
 800dcda:	bf00      	nop
 800dcdc:	0800f1cd 	.word	0x0800f1cd
 800dce0:	0800f1de 	.word	0x0800f1de

0800dce4 <__sflush_r>:
 800dce4:	898a      	ldrh	r2, [r1, #12]
 800dce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcea:	4605      	mov	r5, r0
 800dcec:	0710      	lsls	r0, r2, #28
 800dcee:	460c      	mov	r4, r1
 800dcf0:	d458      	bmi.n	800dda4 <__sflush_r+0xc0>
 800dcf2:	684b      	ldr	r3, [r1, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	dc05      	bgt.n	800dd04 <__sflush_r+0x20>
 800dcf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	dc02      	bgt.n	800dd04 <__sflush_r+0x20>
 800dcfe:	2000      	movs	r0, #0
 800dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd06:	2e00      	cmp	r6, #0
 800dd08:	d0f9      	beq.n	800dcfe <__sflush_r+0x1a>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd10:	682f      	ldr	r7, [r5, #0]
 800dd12:	6a21      	ldr	r1, [r4, #32]
 800dd14:	602b      	str	r3, [r5, #0]
 800dd16:	d032      	beq.n	800dd7e <__sflush_r+0x9a>
 800dd18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	075a      	lsls	r2, r3, #29
 800dd1e:	d505      	bpl.n	800dd2c <__sflush_r+0x48>
 800dd20:	6863      	ldr	r3, [r4, #4]
 800dd22:	1ac0      	subs	r0, r0, r3
 800dd24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd26:	b10b      	cbz	r3, 800dd2c <__sflush_r+0x48>
 800dd28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd2a:	1ac0      	subs	r0, r0, r3
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	4602      	mov	r2, r0
 800dd30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd32:	6a21      	ldr	r1, [r4, #32]
 800dd34:	4628      	mov	r0, r5
 800dd36:	47b0      	blx	r6
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	d106      	bne.n	800dd4c <__sflush_r+0x68>
 800dd3e:	6829      	ldr	r1, [r5, #0]
 800dd40:	291d      	cmp	r1, #29
 800dd42:	d82b      	bhi.n	800dd9c <__sflush_r+0xb8>
 800dd44:	4a29      	ldr	r2, [pc, #164]	; (800ddec <__sflush_r+0x108>)
 800dd46:	410a      	asrs	r2, r1
 800dd48:	07d6      	lsls	r6, r2, #31
 800dd4a:	d427      	bmi.n	800dd9c <__sflush_r+0xb8>
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	6062      	str	r2, [r4, #4]
 800dd50:	04d9      	lsls	r1, r3, #19
 800dd52:	6922      	ldr	r2, [r4, #16]
 800dd54:	6022      	str	r2, [r4, #0]
 800dd56:	d504      	bpl.n	800dd62 <__sflush_r+0x7e>
 800dd58:	1c42      	adds	r2, r0, #1
 800dd5a:	d101      	bne.n	800dd60 <__sflush_r+0x7c>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b903      	cbnz	r3, 800dd62 <__sflush_r+0x7e>
 800dd60:	6560      	str	r0, [r4, #84]	; 0x54
 800dd62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd64:	602f      	str	r7, [r5, #0]
 800dd66:	2900      	cmp	r1, #0
 800dd68:	d0c9      	beq.n	800dcfe <__sflush_r+0x1a>
 800dd6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd6e:	4299      	cmp	r1, r3
 800dd70:	d002      	beq.n	800dd78 <__sflush_r+0x94>
 800dd72:	4628      	mov	r0, r5
 800dd74:	f000 fc90 	bl	800e698 <_free_r>
 800dd78:	2000      	movs	r0, #0
 800dd7a:	6360      	str	r0, [r4, #52]	; 0x34
 800dd7c:	e7c0      	b.n	800dd00 <__sflush_r+0x1c>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b0      	blx	r6
 800dd84:	1c41      	adds	r1, r0, #1
 800dd86:	d1c8      	bne.n	800dd1a <__sflush_r+0x36>
 800dd88:	682b      	ldr	r3, [r5, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0c5      	beq.n	800dd1a <__sflush_r+0x36>
 800dd8e:	2b1d      	cmp	r3, #29
 800dd90:	d001      	beq.n	800dd96 <__sflush_r+0xb2>
 800dd92:	2b16      	cmp	r3, #22
 800dd94:	d101      	bne.n	800dd9a <__sflush_r+0xb6>
 800dd96:	602f      	str	r7, [r5, #0]
 800dd98:	e7b1      	b.n	800dcfe <__sflush_r+0x1a>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda0:	81a3      	strh	r3, [r4, #12]
 800dda2:	e7ad      	b.n	800dd00 <__sflush_r+0x1c>
 800dda4:	690f      	ldr	r7, [r1, #16]
 800dda6:	2f00      	cmp	r7, #0
 800dda8:	d0a9      	beq.n	800dcfe <__sflush_r+0x1a>
 800ddaa:	0793      	lsls	r3, r2, #30
 800ddac:	680e      	ldr	r6, [r1, #0]
 800ddae:	bf08      	it	eq
 800ddb0:	694b      	ldreq	r3, [r1, #20]
 800ddb2:	600f      	str	r7, [r1, #0]
 800ddb4:	bf18      	it	ne
 800ddb6:	2300      	movne	r3, #0
 800ddb8:	eba6 0807 	sub.w	r8, r6, r7
 800ddbc:	608b      	str	r3, [r1, #8]
 800ddbe:	f1b8 0f00 	cmp.w	r8, #0
 800ddc2:	dd9c      	ble.n	800dcfe <__sflush_r+0x1a>
 800ddc4:	6a21      	ldr	r1, [r4, #32]
 800ddc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ddc8:	4643      	mov	r3, r8
 800ddca:	463a      	mov	r2, r7
 800ddcc:	4628      	mov	r0, r5
 800ddce:	47b0      	blx	r6
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	dc06      	bgt.n	800dde2 <__sflush_r+0xfe>
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddda:	81a3      	strh	r3, [r4, #12]
 800dddc:	f04f 30ff 	mov.w	r0, #4294967295
 800dde0:	e78e      	b.n	800dd00 <__sflush_r+0x1c>
 800dde2:	4407      	add	r7, r0
 800dde4:	eba8 0800 	sub.w	r8, r8, r0
 800dde8:	e7e9      	b.n	800ddbe <__sflush_r+0xda>
 800ddea:	bf00      	nop
 800ddec:	dfbffffe 	.word	0xdfbffffe

0800ddf0 <_fflush_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	690b      	ldr	r3, [r1, #16]
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	b913      	cbnz	r3, 800de00 <_fflush_r+0x10>
 800ddfa:	2500      	movs	r5, #0
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	b118      	cbz	r0, 800de0a <_fflush_r+0x1a>
 800de02:	6a03      	ldr	r3, [r0, #32]
 800de04:	b90b      	cbnz	r3, 800de0a <_fflush_r+0x1a>
 800de06:	f000 f8a9 	bl	800df5c <__sinit>
 800de0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d0f3      	beq.n	800ddfa <_fflush_r+0xa>
 800de12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de14:	07d0      	lsls	r0, r2, #31
 800de16:	d404      	bmi.n	800de22 <_fflush_r+0x32>
 800de18:	0599      	lsls	r1, r3, #22
 800de1a:	d402      	bmi.n	800de22 <_fflush_r+0x32>
 800de1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de1e:	f000 fc2b 	bl	800e678 <__retarget_lock_acquire_recursive>
 800de22:	4628      	mov	r0, r5
 800de24:	4621      	mov	r1, r4
 800de26:	f7ff ff5d 	bl	800dce4 <__sflush_r>
 800de2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de2c:	07da      	lsls	r2, r3, #31
 800de2e:	4605      	mov	r5, r0
 800de30:	d4e4      	bmi.n	800ddfc <_fflush_r+0xc>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	059b      	lsls	r3, r3, #22
 800de36:	d4e1      	bmi.n	800ddfc <_fflush_r+0xc>
 800de38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de3a:	f000 fc1e 	bl	800e67a <__retarget_lock_release_recursive>
 800de3e:	e7dd      	b.n	800ddfc <_fflush_r+0xc>

0800de40 <fflush>:
 800de40:	4601      	mov	r1, r0
 800de42:	b920      	cbnz	r0, 800de4e <fflush+0xe>
 800de44:	4a04      	ldr	r2, [pc, #16]	; (800de58 <fflush+0x18>)
 800de46:	4905      	ldr	r1, [pc, #20]	; (800de5c <fflush+0x1c>)
 800de48:	4805      	ldr	r0, [pc, #20]	; (800de60 <fflush+0x20>)
 800de4a:	f000 b8cb 	b.w	800dfe4 <_fwalk_sglue>
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <fflush+0x24>)
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	f7ff bfcd 	b.w	800ddf0 <_fflush_r>
 800de56:	bf00      	nop
 800de58:	200003dc 	.word	0x200003dc
 800de5c:	0800ddf1 	.word	0x0800ddf1
 800de60:	200003e8 	.word	0x200003e8
 800de64:	20000434 	.word	0x20000434

0800de68 <std>:
 800de68:	2300      	movs	r3, #0
 800de6a:	b510      	push	{r4, lr}
 800de6c:	4604      	mov	r4, r0
 800de6e:	e9c0 3300 	strd	r3, r3, [r0]
 800de72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de76:	6083      	str	r3, [r0, #8]
 800de78:	8181      	strh	r1, [r0, #12]
 800de7a:	6643      	str	r3, [r0, #100]	; 0x64
 800de7c:	81c2      	strh	r2, [r0, #14]
 800de7e:	6183      	str	r3, [r0, #24]
 800de80:	4619      	mov	r1, r3
 800de82:	2208      	movs	r2, #8
 800de84:	305c      	adds	r0, #92	; 0x5c
 800de86:	f000 fb6f 	bl	800e568 <memset>
 800de8a:	4b05      	ldr	r3, [pc, #20]	; (800dea0 <std+0x38>)
 800de8c:	6263      	str	r3, [r4, #36]	; 0x24
 800de8e:	4b05      	ldr	r3, [pc, #20]	; (800dea4 <std+0x3c>)
 800de90:	62a3      	str	r3, [r4, #40]	; 0x28
 800de92:	4b05      	ldr	r3, [pc, #20]	; (800dea8 <std+0x40>)
 800de94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de96:	4b05      	ldr	r3, [pc, #20]	; (800deac <std+0x44>)
 800de98:	6224      	str	r4, [r4, #32]
 800de9a:	6323      	str	r3, [r4, #48]	; 0x30
 800de9c:	bd10      	pop	{r4, pc}
 800de9e:	bf00      	nop
 800dea0:	0800e385 	.word	0x0800e385
 800dea4:	0800e3a7 	.word	0x0800e3a7
 800dea8:	0800e3df 	.word	0x0800e3df
 800deac:	0800e403 	.word	0x0800e403

0800deb0 <stdio_exit_handler>:
 800deb0:	4a02      	ldr	r2, [pc, #8]	; (800debc <stdio_exit_handler+0xc>)
 800deb2:	4903      	ldr	r1, [pc, #12]	; (800dec0 <stdio_exit_handler+0x10>)
 800deb4:	4803      	ldr	r0, [pc, #12]	; (800dec4 <stdio_exit_handler+0x14>)
 800deb6:	f000 b895 	b.w	800dfe4 <_fwalk_sglue>
 800deba:	bf00      	nop
 800debc:	200003dc 	.word	0x200003dc
 800dec0:	0800ddf1 	.word	0x0800ddf1
 800dec4:	200003e8 	.word	0x200003e8

0800dec8 <cleanup_stdio>:
 800dec8:	6841      	ldr	r1, [r0, #4]
 800deca:	4b0c      	ldr	r3, [pc, #48]	; (800defc <cleanup_stdio+0x34>)
 800decc:	4299      	cmp	r1, r3
 800dece:	b510      	push	{r4, lr}
 800ded0:	4604      	mov	r4, r0
 800ded2:	d001      	beq.n	800ded8 <cleanup_stdio+0x10>
 800ded4:	f7ff ff8c 	bl	800ddf0 <_fflush_r>
 800ded8:	68a1      	ldr	r1, [r4, #8]
 800deda:	4b09      	ldr	r3, [pc, #36]	; (800df00 <cleanup_stdio+0x38>)
 800dedc:	4299      	cmp	r1, r3
 800dede:	d002      	beq.n	800dee6 <cleanup_stdio+0x1e>
 800dee0:	4620      	mov	r0, r4
 800dee2:	f7ff ff85 	bl	800ddf0 <_fflush_r>
 800dee6:	68e1      	ldr	r1, [r4, #12]
 800dee8:	4b06      	ldr	r3, [pc, #24]	; (800df04 <cleanup_stdio+0x3c>)
 800deea:	4299      	cmp	r1, r3
 800deec:	d004      	beq.n	800def8 <cleanup_stdio+0x30>
 800deee:	4620      	mov	r0, r4
 800def0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800def4:	f7ff bf7c 	b.w	800ddf0 <_fflush_r>
 800def8:	bd10      	pop	{r4, pc}
 800defa:	bf00      	nop
 800defc:	20001020 	.word	0x20001020
 800df00:	20001088 	.word	0x20001088
 800df04:	200010f0 	.word	0x200010f0

0800df08 <global_stdio_init.part.0>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <global_stdio_init.part.0+0x30>)
 800df0c:	4c0b      	ldr	r4, [pc, #44]	; (800df3c <global_stdio_init.part.0+0x34>)
 800df0e:	4a0c      	ldr	r2, [pc, #48]	; (800df40 <global_stdio_init.part.0+0x38>)
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	4620      	mov	r0, r4
 800df14:	2200      	movs	r2, #0
 800df16:	2104      	movs	r1, #4
 800df18:	f7ff ffa6 	bl	800de68 <std>
 800df1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800df20:	2201      	movs	r2, #1
 800df22:	2109      	movs	r1, #9
 800df24:	f7ff ffa0 	bl	800de68 <std>
 800df28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800df2c:	2202      	movs	r2, #2
 800df2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df32:	2112      	movs	r1, #18
 800df34:	f7ff bf98 	b.w	800de68 <std>
 800df38:	20001158 	.word	0x20001158
 800df3c:	20001020 	.word	0x20001020
 800df40:	0800deb1 	.word	0x0800deb1

0800df44 <__sfp_lock_acquire>:
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__sfp_lock_acquire+0x8>)
 800df46:	f000 bb97 	b.w	800e678 <__retarget_lock_acquire_recursive>
 800df4a:	bf00      	nop
 800df4c:	20001161 	.word	0x20001161

0800df50 <__sfp_lock_release>:
 800df50:	4801      	ldr	r0, [pc, #4]	; (800df58 <__sfp_lock_release+0x8>)
 800df52:	f000 bb92 	b.w	800e67a <__retarget_lock_release_recursive>
 800df56:	bf00      	nop
 800df58:	20001161 	.word	0x20001161

0800df5c <__sinit>:
 800df5c:	b510      	push	{r4, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	f7ff fff0 	bl	800df44 <__sfp_lock_acquire>
 800df64:	6a23      	ldr	r3, [r4, #32]
 800df66:	b11b      	cbz	r3, 800df70 <__sinit+0x14>
 800df68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df6c:	f7ff bff0 	b.w	800df50 <__sfp_lock_release>
 800df70:	4b04      	ldr	r3, [pc, #16]	; (800df84 <__sinit+0x28>)
 800df72:	6223      	str	r3, [r4, #32]
 800df74:	4b04      	ldr	r3, [pc, #16]	; (800df88 <__sinit+0x2c>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1f5      	bne.n	800df68 <__sinit+0xc>
 800df7c:	f7ff ffc4 	bl	800df08 <global_stdio_init.part.0>
 800df80:	e7f2      	b.n	800df68 <__sinit+0xc>
 800df82:	bf00      	nop
 800df84:	0800dec9 	.word	0x0800dec9
 800df88:	20001158 	.word	0x20001158

0800df8c <_fputc_r>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	460e      	mov	r6, r1
 800df90:	4614      	mov	r4, r2
 800df92:	4605      	mov	r5, r0
 800df94:	b118      	cbz	r0, 800df9e <_fputc_r+0x12>
 800df96:	6a03      	ldr	r3, [r0, #32]
 800df98:	b90b      	cbnz	r3, 800df9e <_fputc_r+0x12>
 800df9a:	f7ff ffdf 	bl	800df5c <__sinit>
 800df9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfa0:	07d8      	lsls	r0, r3, #31
 800dfa2:	d405      	bmi.n	800dfb0 <_fputc_r+0x24>
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	0599      	lsls	r1, r3, #22
 800dfa8:	d402      	bmi.n	800dfb0 <_fputc_r+0x24>
 800dfaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfac:	f000 fb64 	bl	800e678 <__retarget_lock_acquire_recursive>
 800dfb0:	4622      	mov	r2, r4
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	f000 f89f 	bl	800e0f8 <_putc_r>
 800dfba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfbc:	07da      	lsls	r2, r3, #31
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	d405      	bmi.n	800dfce <_fputc_r+0x42>
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	059b      	lsls	r3, r3, #22
 800dfc6:	d402      	bmi.n	800dfce <_fputc_r+0x42>
 800dfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfca:	f000 fb56 	bl	800e67a <__retarget_lock_release_recursive>
 800dfce:	4628      	mov	r0, r5
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dfd4 <fputc>:
 800dfd4:	4b02      	ldr	r3, [pc, #8]	; (800dfe0 <fputc+0xc>)
 800dfd6:	460a      	mov	r2, r1
 800dfd8:	4601      	mov	r1, r0
 800dfda:	6818      	ldr	r0, [r3, #0]
 800dfdc:	f7ff bfd6 	b.w	800df8c <_fputc_r>
 800dfe0:	20000434 	.word	0x20000434

0800dfe4 <_fwalk_sglue>:
 800dfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	4607      	mov	r7, r0
 800dfea:	4688      	mov	r8, r1
 800dfec:	4614      	mov	r4, r2
 800dfee:	2600      	movs	r6, #0
 800dff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dff4:	f1b9 0901 	subs.w	r9, r9, #1
 800dff8:	d505      	bpl.n	800e006 <_fwalk_sglue+0x22>
 800dffa:	6824      	ldr	r4, [r4, #0]
 800dffc:	2c00      	cmp	r4, #0
 800dffe:	d1f7      	bne.n	800dff0 <_fwalk_sglue+0xc>
 800e000:	4630      	mov	r0, r6
 800e002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e006:	89ab      	ldrh	r3, [r5, #12]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d907      	bls.n	800e01c <_fwalk_sglue+0x38>
 800e00c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e010:	3301      	adds	r3, #1
 800e012:	d003      	beq.n	800e01c <_fwalk_sglue+0x38>
 800e014:	4629      	mov	r1, r5
 800e016:	4638      	mov	r0, r7
 800e018:	47c0      	blx	r8
 800e01a:	4306      	orrs	r6, r0
 800e01c:	3568      	adds	r5, #104	; 0x68
 800e01e:	e7e9      	b.n	800dff4 <_fwalk_sglue+0x10>

0800e020 <_fwrite_r>:
 800e020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e024:	9c08      	ldr	r4, [sp, #32]
 800e026:	468a      	mov	sl, r1
 800e028:	4690      	mov	r8, r2
 800e02a:	fb02 f903 	mul.w	r9, r2, r3
 800e02e:	4606      	mov	r6, r0
 800e030:	b118      	cbz	r0, 800e03a <_fwrite_r+0x1a>
 800e032:	6a03      	ldr	r3, [r0, #32]
 800e034:	b90b      	cbnz	r3, 800e03a <_fwrite_r+0x1a>
 800e036:	f7ff ff91 	bl	800df5c <__sinit>
 800e03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e03c:	07dd      	lsls	r5, r3, #31
 800e03e:	d405      	bmi.n	800e04c <_fwrite_r+0x2c>
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	0598      	lsls	r0, r3, #22
 800e044:	d402      	bmi.n	800e04c <_fwrite_r+0x2c>
 800e046:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e048:	f000 fb16 	bl	800e678 <__retarget_lock_acquire_recursive>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	0719      	lsls	r1, r3, #28
 800e050:	d516      	bpl.n	800e080 <_fwrite_r+0x60>
 800e052:	6923      	ldr	r3, [r4, #16]
 800e054:	b1a3      	cbz	r3, 800e080 <_fwrite_r+0x60>
 800e056:	2500      	movs	r5, #0
 800e058:	454d      	cmp	r5, r9
 800e05a:	d01f      	beq.n	800e09c <_fwrite_r+0x7c>
 800e05c:	68a7      	ldr	r7, [r4, #8]
 800e05e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800e062:	3f01      	subs	r7, #1
 800e064:	2f00      	cmp	r7, #0
 800e066:	60a7      	str	r7, [r4, #8]
 800e068:	da04      	bge.n	800e074 <_fwrite_r+0x54>
 800e06a:	69a3      	ldr	r3, [r4, #24]
 800e06c:	429f      	cmp	r7, r3
 800e06e:	db0f      	blt.n	800e090 <_fwrite_r+0x70>
 800e070:	290a      	cmp	r1, #10
 800e072:	d00d      	beq.n	800e090 <_fwrite_r+0x70>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	6022      	str	r2, [r4, #0]
 800e07a:	7019      	strb	r1, [r3, #0]
 800e07c:	3501      	adds	r5, #1
 800e07e:	e7eb      	b.n	800e058 <_fwrite_r+0x38>
 800e080:	4621      	mov	r1, r4
 800e082:	4630      	mov	r0, r6
 800e084:	f000 f9fe 	bl	800e484 <__swsetup_r>
 800e088:	2800      	cmp	r0, #0
 800e08a:	d0e4      	beq.n	800e056 <_fwrite_r+0x36>
 800e08c:	2500      	movs	r5, #0
 800e08e:	e005      	b.n	800e09c <_fwrite_r+0x7c>
 800e090:	4622      	mov	r2, r4
 800e092:	4630      	mov	r0, r6
 800e094:	f000 f9b9 	bl	800e40a <__swbuf_r>
 800e098:	3001      	adds	r0, #1
 800e09a:	d1ef      	bne.n	800e07c <_fwrite_r+0x5c>
 800e09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e09e:	07da      	lsls	r2, r3, #31
 800e0a0:	d405      	bmi.n	800e0ae <_fwrite_r+0x8e>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	059b      	lsls	r3, r3, #22
 800e0a6:	d402      	bmi.n	800e0ae <_fwrite_r+0x8e>
 800e0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0aa:	f000 fae6 	bl	800e67a <__retarget_lock_release_recursive>
 800e0ae:	fbb5 f0f8 	udiv	r0, r5, r8
 800e0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800e0b8 <fwrite>:
 800e0b8:	b507      	push	{r0, r1, r2, lr}
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	460a      	mov	r2, r1
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	4803      	ldr	r0, [pc, #12]	; (800e0d0 <fwrite+0x18>)
 800e0c4:	6800      	ldr	r0, [r0, #0]
 800e0c6:	f7ff ffab 	bl	800e020 <_fwrite_r>
 800e0ca:	b003      	add	sp, #12
 800e0cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0d0:	20000434 	.word	0x20000434

0800e0d4 <iprintf>:
 800e0d4:	b40f      	push	{r0, r1, r2, r3}
 800e0d6:	b507      	push	{r0, r1, r2, lr}
 800e0d8:	4906      	ldr	r1, [pc, #24]	; (800e0f4 <iprintf+0x20>)
 800e0da:	ab04      	add	r3, sp, #16
 800e0dc:	6808      	ldr	r0, [r1, #0]
 800e0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e2:	6881      	ldr	r1, [r0, #8]
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	f7ff fb49 	bl	800d77c <_vfiprintf_r>
 800e0ea:	b003      	add	sp, #12
 800e0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0f0:	b004      	add	sp, #16
 800e0f2:	4770      	bx	lr
 800e0f4:	20000434 	.word	0x20000434

0800e0f8 <_putc_r>:
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	460d      	mov	r5, r1
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	4606      	mov	r6, r0
 800e100:	b118      	cbz	r0, 800e10a <_putc_r+0x12>
 800e102:	6a03      	ldr	r3, [r0, #32]
 800e104:	b90b      	cbnz	r3, 800e10a <_putc_r+0x12>
 800e106:	f7ff ff29 	bl	800df5c <__sinit>
 800e10a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e10c:	07d8      	lsls	r0, r3, #31
 800e10e:	d405      	bmi.n	800e11c <_putc_r+0x24>
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	0599      	lsls	r1, r3, #22
 800e114:	d402      	bmi.n	800e11c <_putc_r+0x24>
 800e116:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e118:	f000 faae 	bl	800e678 <__retarget_lock_acquire_recursive>
 800e11c:	68a3      	ldr	r3, [r4, #8]
 800e11e:	3b01      	subs	r3, #1
 800e120:	2b00      	cmp	r3, #0
 800e122:	60a3      	str	r3, [r4, #8]
 800e124:	da05      	bge.n	800e132 <_putc_r+0x3a>
 800e126:	69a2      	ldr	r2, [r4, #24]
 800e128:	4293      	cmp	r3, r2
 800e12a:	db12      	blt.n	800e152 <_putc_r+0x5a>
 800e12c:	b2eb      	uxtb	r3, r5
 800e12e:	2b0a      	cmp	r3, #10
 800e130:	d00f      	beq.n	800e152 <_putc_r+0x5a>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	6022      	str	r2, [r4, #0]
 800e138:	701d      	strb	r5, [r3, #0]
 800e13a:	b2ed      	uxtb	r5, r5
 800e13c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e13e:	07da      	lsls	r2, r3, #31
 800e140:	d405      	bmi.n	800e14e <_putc_r+0x56>
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	059b      	lsls	r3, r3, #22
 800e146:	d402      	bmi.n	800e14e <_putc_r+0x56>
 800e148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14a:	f000 fa96 	bl	800e67a <__retarget_lock_release_recursive>
 800e14e:	4628      	mov	r0, r5
 800e150:	bd70      	pop	{r4, r5, r6, pc}
 800e152:	4629      	mov	r1, r5
 800e154:	4622      	mov	r2, r4
 800e156:	4630      	mov	r0, r6
 800e158:	f000 f957 	bl	800e40a <__swbuf_r>
 800e15c:	4605      	mov	r5, r0
 800e15e:	e7ed      	b.n	800e13c <_putc_r+0x44>

0800e160 <_puts_r>:
 800e160:	6a03      	ldr	r3, [r0, #32]
 800e162:	b570      	push	{r4, r5, r6, lr}
 800e164:	6884      	ldr	r4, [r0, #8]
 800e166:	4605      	mov	r5, r0
 800e168:	460e      	mov	r6, r1
 800e16a:	b90b      	cbnz	r3, 800e170 <_puts_r+0x10>
 800e16c:	f7ff fef6 	bl	800df5c <__sinit>
 800e170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e172:	07db      	lsls	r3, r3, #31
 800e174:	d405      	bmi.n	800e182 <_puts_r+0x22>
 800e176:	89a3      	ldrh	r3, [r4, #12]
 800e178:	0598      	lsls	r0, r3, #22
 800e17a:	d402      	bmi.n	800e182 <_puts_r+0x22>
 800e17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e17e:	f000 fa7b 	bl	800e678 <__retarget_lock_acquire_recursive>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	0719      	lsls	r1, r3, #28
 800e186:	d513      	bpl.n	800e1b0 <_puts_r+0x50>
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	b18b      	cbz	r3, 800e1b0 <_puts_r+0x50>
 800e18c:	3e01      	subs	r6, #1
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e194:	3b01      	subs	r3, #1
 800e196:	60a3      	str	r3, [r4, #8]
 800e198:	b9e9      	cbnz	r1, 800e1d6 <_puts_r+0x76>
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	da2e      	bge.n	800e1fc <_puts_r+0x9c>
 800e19e:	4622      	mov	r2, r4
 800e1a0:	210a      	movs	r1, #10
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f000 f931 	bl	800e40a <__swbuf_r>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d007      	beq.n	800e1bc <_puts_r+0x5c>
 800e1ac:	250a      	movs	r5, #10
 800e1ae:	e007      	b.n	800e1c0 <_puts_r+0x60>
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f000 f966 	bl	800e484 <__swsetup_r>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d0e7      	beq.n	800e18c <_puts_r+0x2c>
 800e1bc:	f04f 35ff 	mov.w	r5, #4294967295
 800e1c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1c2:	07da      	lsls	r2, r3, #31
 800e1c4:	d405      	bmi.n	800e1d2 <_puts_r+0x72>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	059b      	lsls	r3, r3, #22
 800e1ca:	d402      	bmi.n	800e1d2 <_puts_r+0x72>
 800e1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ce:	f000 fa54 	bl	800e67a <__retarget_lock_release_recursive>
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	bd70      	pop	{r4, r5, r6, pc}
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	da04      	bge.n	800e1e4 <_puts_r+0x84>
 800e1da:	69a2      	ldr	r2, [r4, #24]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	dc06      	bgt.n	800e1ee <_puts_r+0x8e>
 800e1e0:	290a      	cmp	r1, #10
 800e1e2:	d004      	beq.n	800e1ee <_puts_r+0x8e>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	6022      	str	r2, [r4, #0]
 800e1ea:	7019      	strb	r1, [r3, #0]
 800e1ec:	e7cf      	b.n	800e18e <_puts_r+0x2e>
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f000 f90a 	bl	800e40a <__swbuf_r>
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	d1c9      	bne.n	800e18e <_puts_r+0x2e>
 800e1fa:	e7df      	b.n	800e1bc <_puts_r+0x5c>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	250a      	movs	r5, #10
 800e200:	1c5a      	adds	r2, r3, #1
 800e202:	6022      	str	r2, [r4, #0]
 800e204:	701d      	strb	r5, [r3, #0]
 800e206:	e7db      	b.n	800e1c0 <_puts_r+0x60>

0800e208 <puts>:
 800e208:	4b02      	ldr	r3, [pc, #8]	; (800e214 <puts+0xc>)
 800e20a:	4601      	mov	r1, r0
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f7ff bfa7 	b.w	800e160 <_puts_r>
 800e212:	bf00      	nop
 800e214:	20000434 	.word	0x20000434

0800e218 <setbuf>:
 800e218:	fab1 f281 	clz	r2, r1
 800e21c:	0952      	lsrs	r2, r2, #5
 800e21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e222:	0052      	lsls	r2, r2, #1
 800e224:	f000 b800 	b.w	800e228 <setvbuf>

0800e228 <setvbuf>:
 800e228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	461d      	mov	r5, r3
 800e22e:	4b54      	ldr	r3, [pc, #336]	; (800e380 <setvbuf+0x158>)
 800e230:	681f      	ldr	r7, [r3, #0]
 800e232:	4604      	mov	r4, r0
 800e234:	460e      	mov	r6, r1
 800e236:	4690      	mov	r8, r2
 800e238:	b127      	cbz	r7, 800e244 <setvbuf+0x1c>
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	b913      	cbnz	r3, 800e244 <setvbuf+0x1c>
 800e23e:	4638      	mov	r0, r7
 800e240:	f7ff fe8c 	bl	800df5c <__sinit>
 800e244:	f1b8 0f02 	cmp.w	r8, #2
 800e248:	d006      	beq.n	800e258 <setvbuf+0x30>
 800e24a:	f1b8 0f01 	cmp.w	r8, #1
 800e24e:	f200 8094 	bhi.w	800e37a <setvbuf+0x152>
 800e252:	2d00      	cmp	r5, #0
 800e254:	f2c0 8091 	blt.w	800e37a <setvbuf+0x152>
 800e258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e25a:	07da      	lsls	r2, r3, #31
 800e25c:	d405      	bmi.n	800e26a <setvbuf+0x42>
 800e25e:	89a3      	ldrh	r3, [r4, #12]
 800e260:	059b      	lsls	r3, r3, #22
 800e262:	d402      	bmi.n	800e26a <setvbuf+0x42>
 800e264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e266:	f000 fa07 	bl	800e678 <__retarget_lock_acquire_recursive>
 800e26a:	4621      	mov	r1, r4
 800e26c:	4638      	mov	r0, r7
 800e26e:	f7ff fdbf 	bl	800ddf0 <_fflush_r>
 800e272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e274:	b141      	cbz	r1, 800e288 <setvbuf+0x60>
 800e276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e27a:	4299      	cmp	r1, r3
 800e27c:	d002      	beq.n	800e284 <setvbuf+0x5c>
 800e27e:	4638      	mov	r0, r7
 800e280:	f000 fa0a 	bl	800e698 <_free_r>
 800e284:	2300      	movs	r3, #0
 800e286:	6363      	str	r3, [r4, #52]	; 0x34
 800e288:	2300      	movs	r3, #0
 800e28a:	61a3      	str	r3, [r4, #24]
 800e28c:	6063      	str	r3, [r4, #4]
 800e28e:	89a3      	ldrh	r3, [r4, #12]
 800e290:	0618      	lsls	r0, r3, #24
 800e292:	d503      	bpl.n	800e29c <setvbuf+0x74>
 800e294:	6921      	ldr	r1, [r4, #16]
 800e296:	4638      	mov	r0, r7
 800e298:	f000 f9fe 	bl	800e698 <_free_r>
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e2a2:	f023 0303 	bic.w	r3, r3, #3
 800e2a6:	f1b8 0f02 	cmp.w	r8, #2
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	d05f      	beq.n	800e36e <setvbuf+0x146>
 800e2ae:	ab01      	add	r3, sp, #4
 800e2b0:	466a      	mov	r2, sp
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f000 fa3b 	bl	800e730 <__swhatbuf_r>
 800e2ba:	89a3      	ldrh	r3, [r4, #12]
 800e2bc:	4318      	orrs	r0, r3
 800e2be:	81a0      	strh	r0, [r4, #12]
 800e2c0:	bb2d      	cbnz	r5, 800e30e <setvbuf+0xe6>
 800e2c2:	9d00      	ldr	r5, [sp, #0]
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	f7ff f973 	bl	800d5b0 <malloc>
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d150      	bne.n	800e372 <setvbuf+0x14a>
 800e2d0:	f8dd 9000 	ldr.w	r9, [sp]
 800e2d4:	45a9      	cmp	r9, r5
 800e2d6:	d13e      	bne.n	800e356 <setvbuf+0x12e>
 800e2d8:	f04f 35ff 	mov.w	r5, #4294967295
 800e2dc:	2200      	movs	r2, #0
 800e2de:	60a2      	str	r2, [r4, #8]
 800e2e0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e2e4:	6022      	str	r2, [r4, #0]
 800e2e6:	6122      	str	r2, [r4, #16]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ee:	6162      	str	r2, [r4, #20]
 800e2f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2f2:	f043 0302 	orr.w	r3, r3, #2
 800e2f6:	07d1      	lsls	r1, r2, #31
 800e2f8:	81a3      	strh	r3, [r4, #12]
 800e2fa:	d404      	bmi.n	800e306 <setvbuf+0xde>
 800e2fc:	059b      	lsls	r3, r3, #22
 800e2fe:	d402      	bmi.n	800e306 <setvbuf+0xde>
 800e300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e302:	f000 f9ba 	bl	800e67a <__retarget_lock_release_recursive>
 800e306:	4628      	mov	r0, r5
 800e308:	b003      	add	sp, #12
 800e30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e30e:	2e00      	cmp	r6, #0
 800e310:	d0d8      	beq.n	800e2c4 <setvbuf+0x9c>
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	b913      	cbnz	r3, 800e31c <setvbuf+0xf4>
 800e316:	4638      	mov	r0, r7
 800e318:	f7ff fe20 	bl	800df5c <__sinit>
 800e31c:	f1b8 0f01 	cmp.w	r8, #1
 800e320:	bf08      	it	eq
 800e322:	89a3      	ldrheq	r3, [r4, #12]
 800e324:	6026      	str	r6, [r4, #0]
 800e326:	bf04      	itt	eq
 800e328:	f043 0301 	orreq.w	r3, r3, #1
 800e32c:	81a3      	strheq	r3, [r4, #12]
 800e32e:	89a3      	ldrh	r3, [r4, #12]
 800e330:	f013 0208 	ands.w	r2, r3, #8
 800e334:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e338:	d01d      	beq.n	800e376 <setvbuf+0x14e>
 800e33a:	07da      	lsls	r2, r3, #31
 800e33c:	bf41      	itttt	mi
 800e33e:	2200      	movmi	r2, #0
 800e340:	426d      	negmi	r5, r5
 800e342:	60a2      	strmi	r2, [r4, #8]
 800e344:	61a5      	strmi	r5, [r4, #24]
 800e346:	bf58      	it	pl
 800e348:	60a5      	strpl	r5, [r4, #8]
 800e34a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e34c:	f015 0501 	ands.w	r5, r5, #1
 800e350:	d0d4      	beq.n	800e2fc <setvbuf+0xd4>
 800e352:	2500      	movs	r5, #0
 800e354:	e7d7      	b.n	800e306 <setvbuf+0xde>
 800e356:	4648      	mov	r0, r9
 800e358:	f7ff f92a 	bl	800d5b0 <malloc>
 800e35c:	4606      	mov	r6, r0
 800e35e:	2800      	cmp	r0, #0
 800e360:	d0ba      	beq.n	800e2d8 <setvbuf+0xb0>
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	464d      	mov	r5, r9
 800e36c:	e7d1      	b.n	800e312 <setvbuf+0xea>
 800e36e:	2500      	movs	r5, #0
 800e370:	e7b4      	b.n	800e2dc <setvbuf+0xb4>
 800e372:	46a9      	mov	r9, r5
 800e374:	e7f5      	b.n	800e362 <setvbuf+0x13a>
 800e376:	60a2      	str	r2, [r4, #8]
 800e378:	e7e7      	b.n	800e34a <setvbuf+0x122>
 800e37a:	f04f 35ff 	mov.w	r5, #4294967295
 800e37e:	e7c2      	b.n	800e306 <setvbuf+0xde>
 800e380:	20000434 	.word	0x20000434

0800e384 <__sread>:
 800e384:	b510      	push	{r4, lr}
 800e386:	460c      	mov	r4, r1
 800e388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e38c:	f000 f916 	bl	800e5bc <_read_r>
 800e390:	2800      	cmp	r0, #0
 800e392:	bfab      	itete	ge
 800e394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e396:	89a3      	ldrhlt	r3, [r4, #12]
 800e398:	181b      	addge	r3, r3, r0
 800e39a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e39e:	bfac      	ite	ge
 800e3a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3a2:	81a3      	strhlt	r3, [r4, #12]
 800e3a4:	bd10      	pop	{r4, pc}

0800e3a6 <__swrite>:
 800e3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3aa:	461f      	mov	r7, r3
 800e3ac:	898b      	ldrh	r3, [r1, #12]
 800e3ae:	05db      	lsls	r3, r3, #23
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	4616      	mov	r6, r2
 800e3b6:	d505      	bpl.n	800e3c4 <__swrite+0x1e>
 800e3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3bc:	2302      	movs	r3, #2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f000 f8ea 	bl	800e598 <_lseek_r>
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3ce:	81a3      	strh	r3, [r4, #12]
 800e3d0:	4632      	mov	r2, r6
 800e3d2:	463b      	mov	r3, r7
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3da:	f000 b911 	b.w	800e600 <_write_r>

0800e3de <__sseek>:
 800e3de:	b510      	push	{r4, lr}
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e6:	f000 f8d7 	bl	800e598 <_lseek_r>
 800e3ea:	1c43      	adds	r3, r0, #1
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	bf15      	itete	ne
 800e3f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3fa:	81a3      	strheq	r3, [r4, #12]
 800e3fc:	bf18      	it	ne
 800e3fe:	81a3      	strhne	r3, [r4, #12]
 800e400:	bd10      	pop	{r4, pc}

0800e402 <__sclose>:
 800e402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e406:	f000 b8b7 	b.w	800e578 <_close_r>

0800e40a <__swbuf_r>:
 800e40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40c:	460e      	mov	r6, r1
 800e40e:	4614      	mov	r4, r2
 800e410:	4605      	mov	r5, r0
 800e412:	b118      	cbz	r0, 800e41c <__swbuf_r+0x12>
 800e414:	6a03      	ldr	r3, [r0, #32]
 800e416:	b90b      	cbnz	r3, 800e41c <__swbuf_r+0x12>
 800e418:	f7ff fda0 	bl	800df5c <__sinit>
 800e41c:	69a3      	ldr	r3, [r4, #24]
 800e41e:	60a3      	str	r3, [r4, #8]
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	071a      	lsls	r2, r3, #28
 800e424:	d525      	bpl.n	800e472 <__swbuf_r+0x68>
 800e426:	6923      	ldr	r3, [r4, #16]
 800e428:	b31b      	cbz	r3, 800e472 <__swbuf_r+0x68>
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	6922      	ldr	r2, [r4, #16]
 800e42e:	1a98      	subs	r0, r3, r2
 800e430:	6963      	ldr	r3, [r4, #20]
 800e432:	b2f6      	uxtb	r6, r6
 800e434:	4283      	cmp	r3, r0
 800e436:	4637      	mov	r7, r6
 800e438:	dc04      	bgt.n	800e444 <__swbuf_r+0x3a>
 800e43a:	4621      	mov	r1, r4
 800e43c:	4628      	mov	r0, r5
 800e43e:	f7ff fcd7 	bl	800ddf0 <_fflush_r>
 800e442:	b9e0      	cbnz	r0, 800e47e <__swbuf_r+0x74>
 800e444:	68a3      	ldr	r3, [r4, #8]
 800e446:	3b01      	subs	r3, #1
 800e448:	60a3      	str	r3, [r4, #8]
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	6022      	str	r2, [r4, #0]
 800e450:	701e      	strb	r6, [r3, #0]
 800e452:	6962      	ldr	r2, [r4, #20]
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	429a      	cmp	r2, r3
 800e458:	d004      	beq.n	800e464 <__swbuf_r+0x5a>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	07db      	lsls	r3, r3, #31
 800e45e:	d506      	bpl.n	800e46e <__swbuf_r+0x64>
 800e460:	2e0a      	cmp	r6, #10
 800e462:	d104      	bne.n	800e46e <__swbuf_r+0x64>
 800e464:	4621      	mov	r1, r4
 800e466:	4628      	mov	r0, r5
 800e468:	f7ff fcc2 	bl	800ddf0 <_fflush_r>
 800e46c:	b938      	cbnz	r0, 800e47e <__swbuf_r+0x74>
 800e46e:	4638      	mov	r0, r7
 800e470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e472:	4621      	mov	r1, r4
 800e474:	4628      	mov	r0, r5
 800e476:	f000 f805 	bl	800e484 <__swsetup_r>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0d5      	beq.n	800e42a <__swbuf_r+0x20>
 800e47e:	f04f 37ff 	mov.w	r7, #4294967295
 800e482:	e7f4      	b.n	800e46e <__swbuf_r+0x64>

0800e484 <__swsetup_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4b2a      	ldr	r3, [pc, #168]	; (800e530 <__swsetup_r+0xac>)
 800e488:	4605      	mov	r5, r0
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	460c      	mov	r4, r1
 800e48e:	b118      	cbz	r0, 800e498 <__swsetup_r+0x14>
 800e490:	6a03      	ldr	r3, [r0, #32]
 800e492:	b90b      	cbnz	r3, 800e498 <__swsetup_r+0x14>
 800e494:	f7ff fd62 	bl	800df5c <__sinit>
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e49e:	0718      	lsls	r0, r3, #28
 800e4a0:	d422      	bmi.n	800e4e8 <__swsetup_r+0x64>
 800e4a2:	06d9      	lsls	r1, r3, #27
 800e4a4:	d407      	bmi.n	800e4b6 <__swsetup_r+0x32>
 800e4a6:	2309      	movs	r3, #9
 800e4a8:	602b      	str	r3, [r5, #0]
 800e4aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4ae:	81a3      	strh	r3, [r4, #12]
 800e4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b4:	e034      	b.n	800e520 <__swsetup_r+0x9c>
 800e4b6:	0758      	lsls	r0, r3, #29
 800e4b8:	d512      	bpl.n	800e4e0 <__swsetup_r+0x5c>
 800e4ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4bc:	b141      	cbz	r1, 800e4d0 <__swsetup_r+0x4c>
 800e4be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4c2:	4299      	cmp	r1, r3
 800e4c4:	d002      	beq.n	800e4cc <__swsetup_r+0x48>
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 f8e6 	bl	800e698 <_free_r>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	6363      	str	r3, [r4, #52]	; 0x34
 800e4d0:	89a3      	ldrh	r3, [r4, #12]
 800e4d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4d6:	81a3      	strh	r3, [r4, #12]
 800e4d8:	2300      	movs	r3, #0
 800e4da:	6063      	str	r3, [r4, #4]
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	f043 0308 	orr.w	r3, r3, #8
 800e4e6:	81a3      	strh	r3, [r4, #12]
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	b94b      	cbnz	r3, 800e500 <__swsetup_r+0x7c>
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4f6:	d003      	beq.n	800e500 <__swsetup_r+0x7c>
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f000 f93e 	bl	800e77c <__smakebuf_r>
 800e500:	89a0      	ldrh	r0, [r4, #12]
 800e502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e506:	f010 0301 	ands.w	r3, r0, #1
 800e50a:	d00a      	beq.n	800e522 <__swsetup_r+0x9e>
 800e50c:	2300      	movs	r3, #0
 800e50e:	60a3      	str	r3, [r4, #8]
 800e510:	6963      	ldr	r3, [r4, #20]
 800e512:	425b      	negs	r3, r3
 800e514:	61a3      	str	r3, [r4, #24]
 800e516:	6923      	ldr	r3, [r4, #16]
 800e518:	b943      	cbnz	r3, 800e52c <__swsetup_r+0xa8>
 800e51a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e51e:	d1c4      	bne.n	800e4aa <__swsetup_r+0x26>
 800e520:	bd38      	pop	{r3, r4, r5, pc}
 800e522:	0781      	lsls	r1, r0, #30
 800e524:	bf58      	it	pl
 800e526:	6963      	ldrpl	r3, [r4, #20]
 800e528:	60a3      	str	r3, [r4, #8]
 800e52a:	e7f4      	b.n	800e516 <__swsetup_r+0x92>
 800e52c:	2000      	movs	r0, #0
 800e52e:	e7f7      	b.n	800e520 <__swsetup_r+0x9c>
 800e530:	20000434 	.word	0x20000434

0800e534 <memmove>:
 800e534:	4288      	cmp	r0, r1
 800e536:	b510      	push	{r4, lr}
 800e538:	eb01 0402 	add.w	r4, r1, r2
 800e53c:	d902      	bls.n	800e544 <memmove+0x10>
 800e53e:	4284      	cmp	r4, r0
 800e540:	4623      	mov	r3, r4
 800e542:	d807      	bhi.n	800e554 <memmove+0x20>
 800e544:	1e43      	subs	r3, r0, #1
 800e546:	42a1      	cmp	r1, r4
 800e548:	d008      	beq.n	800e55c <memmove+0x28>
 800e54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e552:	e7f8      	b.n	800e546 <memmove+0x12>
 800e554:	4402      	add	r2, r0
 800e556:	4601      	mov	r1, r0
 800e558:	428a      	cmp	r2, r1
 800e55a:	d100      	bne.n	800e55e <memmove+0x2a>
 800e55c:	bd10      	pop	{r4, pc}
 800e55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e566:	e7f7      	b.n	800e558 <memmove+0x24>

0800e568 <memset>:
 800e568:	4402      	add	r2, r0
 800e56a:	4603      	mov	r3, r0
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d100      	bne.n	800e572 <memset+0xa>
 800e570:	4770      	bx	lr
 800e572:	f803 1b01 	strb.w	r1, [r3], #1
 800e576:	e7f9      	b.n	800e56c <memset+0x4>

0800e578 <_close_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4d06      	ldr	r5, [pc, #24]	; (800e594 <_close_r+0x1c>)
 800e57c:	2300      	movs	r3, #0
 800e57e:	4604      	mov	r4, r0
 800e580:	4608      	mov	r0, r1
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	f7fa f993 	bl	80088ae <_close>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d102      	bne.n	800e592 <_close_r+0x1a>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	b103      	cbz	r3, 800e592 <_close_r+0x1a>
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	2000115c 	.word	0x2000115c

0800e598 <_lseek_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4d07      	ldr	r5, [pc, #28]	; (800e5b8 <_lseek_r+0x20>)
 800e59c:	4604      	mov	r4, r0
 800e59e:	4608      	mov	r0, r1
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	602a      	str	r2, [r5, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f7fa f9a8 	bl	80088fc <_lseek>
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	d102      	bne.n	800e5b6 <_lseek_r+0x1e>
 800e5b0:	682b      	ldr	r3, [r5, #0]
 800e5b2:	b103      	cbz	r3, 800e5b6 <_lseek_r+0x1e>
 800e5b4:	6023      	str	r3, [r4, #0]
 800e5b6:	bd38      	pop	{r3, r4, r5, pc}
 800e5b8:	2000115c 	.word	0x2000115c

0800e5bc <_read_r>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	4d07      	ldr	r5, [pc, #28]	; (800e5dc <_read_r+0x20>)
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	4608      	mov	r0, r1
 800e5c4:	4611      	mov	r1, r2
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	602a      	str	r2, [r5, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	f7fa f936 	bl	800883c <_read>
 800e5d0:	1c43      	adds	r3, r0, #1
 800e5d2:	d102      	bne.n	800e5da <_read_r+0x1e>
 800e5d4:	682b      	ldr	r3, [r5, #0]
 800e5d6:	b103      	cbz	r3, 800e5da <_read_r+0x1e>
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	2000115c 	.word	0x2000115c

0800e5e0 <_sbrk_r>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	4d06      	ldr	r5, [pc, #24]	; (800e5fc <_sbrk_r+0x1c>)
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	4608      	mov	r0, r1
 800e5ea:	602b      	str	r3, [r5, #0]
 800e5ec:	f7fa f994 	bl	8008918 <_sbrk>
 800e5f0:	1c43      	adds	r3, r0, #1
 800e5f2:	d102      	bne.n	800e5fa <_sbrk_r+0x1a>
 800e5f4:	682b      	ldr	r3, [r5, #0]
 800e5f6:	b103      	cbz	r3, 800e5fa <_sbrk_r+0x1a>
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	bd38      	pop	{r3, r4, r5, pc}
 800e5fc:	2000115c 	.word	0x2000115c

0800e600 <_write_r>:
 800e600:	b538      	push	{r3, r4, r5, lr}
 800e602:	4d07      	ldr	r5, [pc, #28]	; (800e620 <_write_r+0x20>)
 800e604:	4604      	mov	r4, r0
 800e606:	4608      	mov	r0, r1
 800e608:	4611      	mov	r1, r2
 800e60a:	2200      	movs	r2, #0
 800e60c:	602a      	str	r2, [r5, #0]
 800e60e:	461a      	mov	r2, r3
 800e610:	f7fa f931 	bl	8008876 <_write>
 800e614:	1c43      	adds	r3, r0, #1
 800e616:	d102      	bne.n	800e61e <_write_r+0x1e>
 800e618:	682b      	ldr	r3, [r5, #0]
 800e61a:	b103      	cbz	r3, 800e61e <_write_r+0x1e>
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	bd38      	pop	{r3, r4, r5, pc}
 800e620:	2000115c 	.word	0x2000115c

0800e624 <__errno>:
 800e624:	4b01      	ldr	r3, [pc, #4]	; (800e62c <__errno+0x8>)
 800e626:	6818      	ldr	r0, [r3, #0]
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	20000434 	.word	0x20000434

0800e630 <__libc_init_array>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	4d0d      	ldr	r5, [pc, #52]	; (800e668 <__libc_init_array+0x38>)
 800e634:	4c0d      	ldr	r4, [pc, #52]	; (800e66c <__libc_init_array+0x3c>)
 800e636:	1b64      	subs	r4, r4, r5
 800e638:	10a4      	asrs	r4, r4, #2
 800e63a:	2600      	movs	r6, #0
 800e63c:	42a6      	cmp	r6, r4
 800e63e:	d109      	bne.n	800e654 <__libc_init_array+0x24>
 800e640:	4d0b      	ldr	r5, [pc, #44]	; (800e670 <__libc_init_array+0x40>)
 800e642:	4c0c      	ldr	r4, [pc, #48]	; (800e674 <__libc_init_array+0x44>)
 800e644:	f000 f8f8 	bl	800e838 <_init>
 800e648:	1b64      	subs	r4, r4, r5
 800e64a:	10a4      	asrs	r4, r4, #2
 800e64c:	2600      	movs	r6, #0
 800e64e:	42a6      	cmp	r6, r4
 800e650:	d105      	bne.n	800e65e <__libc_init_array+0x2e>
 800e652:	bd70      	pop	{r4, r5, r6, pc}
 800e654:	f855 3b04 	ldr.w	r3, [r5], #4
 800e658:	4798      	blx	r3
 800e65a:	3601      	adds	r6, #1
 800e65c:	e7ee      	b.n	800e63c <__libc_init_array+0xc>
 800e65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e662:	4798      	blx	r3
 800e664:	3601      	adds	r6, #1
 800e666:	e7f2      	b.n	800e64e <__libc_init_array+0x1e>
 800e668:	0800f1f8 	.word	0x0800f1f8
 800e66c:	0800f1f8 	.word	0x0800f1f8
 800e670:	0800f1f8 	.word	0x0800f1f8
 800e674:	0800f1fc 	.word	0x0800f1fc

0800e678 <__retarget_lock_acquire_recursive>:
 800e678:	4770      	bx	lr

0800e67a <__retarget_lock_release_recursive>:
 800e67a:	4770      	bx	lr

0800e67c <memcpy>:
 800e67c:	440a      	add	r2, r1
 800e67e:	4291      	cmp	r1, r2
 800e680:	f100 33ff 	add.w	r3, r0, #4294967295
 800e684:	d100      	bne.n	800e688 <memcpy+0xc>
 800e686:	4770      	bx	lr
 800e688:	b510      	push	{r4, lr}
 800e68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e692:	4291      	cmp	r1, r2
 800e694:	d1f9      	bne.n	800e68a <memcpy+0xe>
 800e696:	bd10      	pop	{r4, pc}

0800e698 <_free_r>:
 800e698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e69a:	2900      	cmp	r1, #0
 800e69c:	d044      	beq.n	800e728 <_free_r+0x90>
 800e69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a2:	9001      	str	r0, [sp, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e6aa:	bfb8      	it	lt
 800e6ac:	18e4      	addlt	r4, r4, r3
 800e6ae:	f7ff f82f 	bl	800d710 <__malloc_lock>
 800e6b2:	4a1e      	ldr	r2, [pc, #120]	; (800e72c <_free_r+0x94>)
 800e6b4:	9801      	ldr	r0, [sp, #4]
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	b933      	cbnz	r3, 800e6c8 <_free_r+0x30>
 800e6ba:	6063      	str	r3, [r4, #4]
 800e6bc:	6014      	str	r4, [r2, #0]
 800e6be:	b003      	add	sp, #12
 800e6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6c4:	f7ff b82a 	b.w	800d71c <__malloc_unlock>
 800e6c8:	42a3      	cmp	r3, r4
 800e6ca:	d908      	bls.n	800e6de <_free_r+0x46>
 800e6cc:	6825      	ldr	r5, [r4, #0]
 800e6ce:	1961      	adds	r1, r4, r5
 800e6d0:	428b      	cmp	r3, r1
 800e6d2:	bf01      	itttt	eq
 800e6d4:	6819      	ldreq	r1, [r3, #0]
 800e6d6:	685b      	ldreq	r3, [r3, #4]
 800e6d8:	1949      	addeq	r1, r1, r5
 800e6da:	6021      	streq	r1, [r4, #0]
 800e6dc:	e7ed      	b.n	800e6ba <_free_r+0x22>
 800e6de:	461a      	mov	r2, r3
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	b10b      	cbz	r3, 800e6e8 <_free_r+0x50>
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	d9fa      	bls.n	800e6de <_free_r+0x46>
 800e6e8:	6811      	ldr	r1, [r2, #0]
 800e6ea:	1855      	adds	r5, r2, r1
 800e6ec:	42a5      	cmp	r5, r4
 800e6ee:	d10b      	bne.n	800e708 <_free_r+0x70>
 800e6f0:	6824      	ldr	r4, [r4, #0]
 800e6f2:	4421      	add	r1, r4
 800e6f4:	1854      	adds	r4, r2, r1
 800e6f6:	42a3      	cmp	r3, r4
 800e6f8:	6011      	str	r1, [r2, #0]
 800e6fa:	d1e0      	bne.n	800e6be <_free_r+0x26>
 800e6fc:	681c      	ldr	r4, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	6053      	str	r3, [r2, #4]
 800e702:	440c      	add	r4, r1
 800e704:	6014      	str	r4, [r2, #0]
 800e706:	e7da      	b.n	800e6be <_free_r+0x26>
 800e708:	d902      	bls.n	800e710 <_free_r+0x78>
 800e70a:	230c      	movs	r3, #12
 800e70c:	6003      	str	r3, [r0, #0]
 800e70e:	e7d6      	b.n	800e6be <_free_r+0x26>
 800e710:	6825      	ldr	r5, [r4, #0]
 800e712:	1961      	adds	r1, r4, r5
 800e714:	428b      	cmp	r3, r1
 800e716:	bf04      	itt	eq
 800e718:	6819      	ldreq	r1, [r3, #0]
 800e71a:	685b      	ldreq	r3, [r3, #4]
 800e71c:	6063      	str	r3, [r4, #4]
 800e71e:	bf04      	itt	eq
 800e720:	1949      	addeq	r1, r1, r5
 800e722:	6021      	streq	r1, [r4, #0]
 800e724:	6054      	str	r4, [r2, #4]
 800e726:	e7ca      	b.n	800e6be <_free_r+0x26>
 800e728:	b003      	add	sp, #12
 800e72a:	bd30      	pop	{r4, r5, pc}
 800e72c:	20001018 	.word	0x20001018

0800e730 <__swhatbuf_r>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	460c      	mov	r4, r1
 800e734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e738:	2900      	cmp	r1, #0
 800e73a:	b096      	sub	sp, #88	; 0x58
 800e73c:	4615      	mov	r5, r2
 800e73e:	461e      	mov	r6, r3
 800e740:	da0d      	bge.n	800e75e <__swhatbuf_r+0x2e>
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e748:	f04f 0100 	mov.w	r1, #0
 800e74c:	bf0c      	ite	eq
 800e74e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e752:	2340      	movne	r3, #64	; 0x40
 800e754:	2000      	movs	r0, #0
 800e756:	6031      	str	r1, [r6, #0]
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	b016      	add	sp, #88	; 0x58
 800e75c:	bd70      	pop	{r4, r5, r6, pc}
 800e75e:	466a      	mov	r2, sp
 800e760:	f000 f848 	bl	800e7f4 <_fstat_r>
 800e764:	2800      	cmp	r0, #0
 800e766:	dbec      	blt.n	800e742 <__swhatbuf_r+0x12>
 800e768:	9901      	ldr	r1, [sp, #4]
 800e76a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e76e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e772:	4259      	negs	r1, r3
 800e774:	4159      	adcs	r1, r3
 800e776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e77a:	e7eb      	b.n	800e754 <__swhatbuf_r+0x24>

0800e77c <__smakebuf_r>:
 800e77c:	898b      	ldrh	r3, [r1, #12]
 800e77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e780:	079d      	lsls	r5, r3, #30
 800e782:	4606      	mov	r6, r0
 800e784:	460c      	mov	r4, r1
 800e786:	d507      	bpl.n	800e798 <__smakebuf_r+0x1c>
 800e788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	6123      	str	r3, [r4, #16]
 800e790:	2301      	movs	r3, #1
 800e792:	6163      	str	r3, [r4, #20]
 800e794:	b002      	add	sp, #8
 800e796:	bd70      	pop	{r4, r5, r6, pc}
 800e798:	ab01      	add	r3, sp, #4
 800e79a:	466a      	mov	r2, sp
 800e79c:	f7ff ffc8 	bl	800e730 <__swhatbuf_r>
 800e7a0:	9900      	ldr	r1, [sp, #0]
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f7fe ff33 	bl	800d610 <_malloc_r>
 800e7aa:	b948      	cbnz	r0, 800e7c0 <__smakebuf_r+0x44>
 800e7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7b0:	059a      	lsls	r2, r3, #22
 800e7b2:	d4ef      	bmi.n	800e794 <__smakebuf_r+0x18>
 800e7b4:	f023 0303 	bic.w	r3, r3, #3
 800e7b8:	f043 0302 	orr.w	r3, r3, #2
 800e7bc:	81a3      	strh	r3, [r4, #12]
 800e7be:	e7e3      	b.n	800e788 <__smakebuf_r+0xc>
 800e7c0:	89a3      	ldrh	r3, [r4, #12]
 800e7c2:	6020      	str	r0, [r4, #0]
 800e7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c8:	81a3      	strh	r3, [r4, #12]
 800e7ca:	9b00      	ldr	r3, [sp, #0]
 800e7cc:	6163      	str	r3, [r4, #20]
 800e7ce:	9b01      	ldr	r3, [sp, #4]
 800e7d0:	6120      	str	r0, [r4, #16]
 800e7d2:	b15b      	cbz	r3, 800e7ec <__smakebuf_r+0x70>
 800e7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f000 f81d 	bl	800e818 <_isatty_r>
 800e7de:	b128      	cbz	r0, 800e7ec <__smakebuf_r+0x70>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	f023 0303 	bic.w	r3, r3, #3
 800e7e6:	f043 0301 	orr.w	r3, r3, #1
 800e7ea:	81a3      	strh	r3, [r4, #12]
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	431d      	orrs	r5, r3
 800e7f0:	81a5      	strh	r5, [r4, #12]
 800e7f2:	e7cf      	b.n	800e794 <__smakebuf_r+0x18>

0800e7f4 <_fstat_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d07      	ldr	r5, [pc, #28]	; (800e814 <_fstat_r+0x20>)
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	4608      	mov	r0, r1
 800e7fe:	4611      	mov	r1, r2
 800e800:	602b      	str	r3, [r5, #0]
 800e802:	f7fa f860 	bl	80088c6 <_fstat>
 800e806:	1c43      	adds	r3, r0, #1
 800e808:	d102      	bne.n	800e810 <_fstat_r+0x1c>
 800e80a:	682b      	ldr	r3, [r5, #0]
 800e80c:	b103      	cbz	r3, 800e810 <_fstat_r+0x1c>
 800e80e:	6023      	str	r3, [r4, #0]
 800e810:	bd38      	pop	{r3, r4, r5, pc}
 800e812:	bf00      	nop
 800e814:	2000115c 	.word	0x2000115c

0800e818 <_isatty_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d06      	ldr	r5, [pc, #24]	; (800e834 <_isatty_r+0x1c>)
 800e81c:	2300      	movs	r3, #0
 800e81e:	4604      	mov	r4, r0
 800e820:	4608      	mov	r0, r1
 800e822:	602b      	str	r3, [r5, #0]
 800e824:	f7fa f85f 	bl	80088e6 <_isatty>
 800e828:	1c43      	adds	r3, r0, #1
 800e82a:	d102      	bne.n	800e832 <_isatty_r+0x1a>
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	b103      	cbz	r3, 800e832 <_isatty_r+0x1a>
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	2000115c 	.word	0x2000115c

0800e838 <_init>:
 800e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83a:	bf00      	nop
 800e83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83e:	bc08      	pop	{r3}
 800e840:	469e      	mov	lr, r3
 800e842:	4770      	bx	lr

0800e844 <_fini>:
 800e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e846:	bf00      	nop
 800e848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e84a:	bc08      	pop	{r3}
 800e84c:	469e      	mov	lr, r3
 800e84e:	4770      	bx	lr
